/*
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrderApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// order.abandoned.list
        /// </summary>
        /// <remarks>
        /// Get list of orders that were left by customers before completing the order.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Retrieves orders specified by customer id (optional)</param>
        /// <param name="customerEmail">Retrieves orders specified by customer email (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="skipEmptyEmail">Filter empty emails (optional, default to false)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;customer,totals,items&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelResponseOrderAbandonedList</returns>
        ModelResponseOrderAbandonedList OrderAbandonedList(string? customerId = default(string?), string? customerEmail = default(string?), string? createdTo = default(string?), string? createdFrom = default(string?), string? modifiedTo = default(string?), string? modifiedFrom = default(string?), bool? skipEmptyEmail = default(bool?), string? storeId = default(string?), string? pageCursor = default(string?), int? count = default(int?), int? start = default(int?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), int operationIndex = 0);

        /// <summary>
        /// order.abandoned.list
        /// </summary>
        /// <remarks>
        /// Get list of orders that were left by customers before completing the order.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Retrieves orders specified by customer id (optional)</param>
        /// <param name="customerEmail">Retrieves orders specified by customer email (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="skipEmptyEmail">Filter empty emails (optional, default to false)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;customer,totals,items&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelResponseOrderAbandonedList</returns>
        ApiResponse<ModelResponseOrderAbandonedList> OrderAbandonedListWithHttpInfo(string? customerId = default(string?), string? customerEmail = default(string?), string? createdTo = default(string?), string? createdFrom = default(string?), string? modifiedTo = default(string?), string? modifiedFrom = default(string?), bool? skipEmptyEmail = default(bool?), string? storeId = default(string?), string? pageCursor = default(string?), int? count = default(int?), int? start = default(int?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), int operationIndex = 0);
        /// <summary>
        /// order.add
        /// </summary>
        /// <remarks>
        /// Add a new order to the cart.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrderAdd200Response</returns>
        OrderAdd200Response OrderAdd(OrderAdd orderAdd, int operationIndex = 0);

        /// <summary>
        /// order.add
        /// </summary>
        /// <remarks>
        /// Add a new order to the cart.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrderAdd200Response</returns>
        ApiResponse<OrderAdd200Response> OrderAddWithHttpInfo(OrderAdd orderAdd, int operationIndex = 0);
        /// <summary>
        /// order.count
        /// </summary>
        /// <remarks>
        /// Count orders in store
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Counts orders quantity specified by customer id (optional)</param>
        /// <param name="customerEmail">Counts orders quantity specified by customer email (optional)</param>
        /// <param name="orderStatus">Counts orders quantity specified by order status (optional)</param>
        /// <param name="orderStatusIds">Retrieves orders specified by order statuses (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="storeId">Counts orders quantity specified by store id (optional)</param>
        /// <param name="ids">Counts orders specified by ids (optional)</param>
        /// <param name="orderIds">Counts orders specified by order ids (optional)</param>
        /// <param name="ebayOrderStatus">Counts orders quantity specified by order status (optional)</param>
        /// <param name="financialStatus">Counts orders quantity specified by financial status (optional)</param>
        /// <param name="financialStatusIds">Retrieves orders count specified by financial status ids (optional)</param>
        /// <param name="fulfillmentChannel">Retrieves order with a fulfillment channel (optional)</param>
        /// <param name="fulfillmentStatus">Create order with fulfillment status (optional)</param>
        /// <param name="shippingMethod">Retrieve entities according to shipping method (optional)</param>
        /// <param name="deliveryMethod">Retrieves order with delivery method (optional)</param>
        /// <param name="tags">Order tags (optional)</param>
        /// <param name="shipNodeType">Retrieves order with ship node type (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrderCount200Response</returns>
        OrderCount200Response OrderCount(string? customerId = default(string?), string? customerEmail = default(string?), string? orderStatus = default(string?), List<string>? orderStatusIds = default(List<string>?), string? createdTo = default(string?), string? createdFrom = default(string?), string? modifiedTo = default(string?), string? modifiedFrom = default(string?), string? storeId = default(string?), string? ids = default(string?), string? orderIds = default(string?), string? ebayOrderStatus = default(string?), string? financialStatus = default(string?), List<string>? financialStatusIds = default(List<string>?), string? fulfillmentChannel = default(string?), string? fulfillmentStatus = default(string?), string? shippingMethod = default(string?), string? deliveryMethod = default(string?), string? tags = default(string?), string? shipNodeType = default(string?), int operationIndex = 0);

        /// <summary>
        /// order.count
        /// </summary>
        /// <remarks>
        /// Count orders in store
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Counts orders quantity specified by customer id (optional)</param>
        /// <param name="customerEmail">Counts orders quantity specified by customer email (optional)</param>
        /// <param name="orderStatus">Counts orders quantity specified by order status (optional)</param>
        /// <param name="orderStatusIds">Retrieves orders specified by order statuses (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="storeId">Counts orders quantity specified by store id (optional)</param>
        /// <param name="ids">Counts orders specified by ids (optional)</param>
        /// <param name="orderIds">Counts orders specified by order ids (optional)</param>
        /// <param name="ebayOrderStatus">Counts orders quantity specified by order status (optional)</param>
        /// <param name="financialStatus">Counts orders quantity specified by financial status (optional)</param>
        /// <param name="financialStatusIds">Retrieves orders count specified by financial status ids (optional)</param>
        /// <param name="fulfillmentChannel">Retrieves order with a fulfillment channel (optional)</param>
        /// <param name="fulfillmentStatus">Create order with fulfillment status (optional)</param>
        /// <param name="shippingMethod">Retrieve entities according to shipping method (optional)</param>
        /// <param name="deliveryMethod">Retrieves order with delivery method (optional)</param>
        /// <param name="tags">Order tags (optional)</param>
        /// <param name="shipNodeType">Retrieves order with ship node type (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrderCount200Response</returns>
        ApiResponse<OrderCount200Response> OrderCountWithHttpInfo(string? customerId = default(string?), string? customerEmail = default(string?), string? orderStatus = default(string?), List<string>? orderStatusIds = default(List<string>?), string? createdTo = default(string?), string? createdFrom = default(string?), string? modifiedTo = default(string?), string? modifiedFrom = default(string?), string? storeId = default(string?), string? ids = default(string?), string? orderIds = default(string?), string? ebayOrderStatus = default(string?), string? financialStatus = default(string?), List<string>? financialStatusIds = default(List<string>?), string? fulfillmentChannel = default(string?), string? fulfillmentStatus = default(string?), string? shippingMethod = default(string?), string? deliveryMethod = default(string?), string? tags = default(string?), string? shipNodeType = default(string?), int operationIndex = 0);
        /// <summary>
        /// order.financial_status.list
        /// </summary>
        /// <remarks>
        /// Retrieve list of financial statuses
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrderFinancialStatusList200Response</returns>
        OrderFinancialStatusList200Response OrderFinancialStatusList(int operationIndex = 0);

        /// <summary>
        /// order.financial_status.list
        /// </summary>
        /// <remarks>
        /// Retrieve list of financial statuses
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrderFinancialStatusList200Response</returns>
        ApiResponse<OrderFinancialStatusList200Response> OrderFinancialStatusListWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// order.find
        /// </summary>
        /// <remarks>
        /// This method is deprecated and won&#39;t be supported in the future. Please use \&quot;order.list\&quot; instead.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Retrieves orders specified by customer id (optional)</param>
        /// <param name="customerEmail">Retrieves orders specified by customer email (optional)</param>
        /// <param name="orderStatus">Retrieves orders specified by order status (optional)</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;order_id,customer,totals,address,items,bundles,status&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="financialStatus">Retrieves orders specified by financial status (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrderFind200Response</returns>
        [Obsolete]
        OrderFind200Response OrderFind(string? customerId = default(string?), string? customerEmail = default(string?), string? orderStatus = default(string?), int? start = default(int?), int? count = default(int?), string? varParams = default(string?), string? exclude = default(string?), string? createdTo = default(string?), string? createdFrom = default(string?), string? modifiedTo = default(string?), string? modifiedFrom = default(string?), string? financialStatus = default(string?), int operationIndex = 0);

        /// <summary>
        /// order.find
        /// </summary>
        /// <remarks>
        /// This method is deprecated and won&#39;t be supported in the future. Please use \&quot;order.list\&quot; instead.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Retrieves orders specified by customer id (optional)</param>
        /// <param name="customerEmail">Retrieves orders specified by customer email (optional)</param>
        /// <param name="orderStatus">Retrieves orders specified by order status (optional)</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;order_id,customer,totals,address,items,bundles,status&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="financialStatus">Retrieves orders specified by financial status (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrderFind200Response</returns>
        [Obsolete]
        ApiResponse<OrderFind200Response> OrderFindWithHttpInfo(string? customerId = default(string?), string? customerEmail = default(string?), string? orderStatus = default(string?), int? start = default(int?), int? count = default(int?), string? varParams = default(string?), string? exclude = default(string?), string? createdTo = default(string?), string? createdFrom = default(string?), string? modifiedTo = default(string?), string? modifiedFrom = default(string?), string? financialStatus = default(string?), int operationIndex = 0);
        /// <summary>
        /// order.fulfillment_status.list
        /// </summary>
        /// <remarks>
        /// Retrieve list of fulfillment statuses
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">Available statuses for the specified action. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrderFulfillmentStatusList200Response</returns>
        OrderFulfillmentStatusList200Response OrderFulfillmentStatusList(string? action = default(string?), int operationIndex = 0);

        /// <summary>
        /// order.fulfillment_status.list
        /// </summary>
        /// <remarks>
        /// Retrieve list of fulfillment statuses
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">Available statuses for the specified action. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrderFulfillmentStatusList200Response</returns>
        ApiResponse<OrderFulfillmentStatusList200Response> OrderFulfillmentStatusListWithHttpInfo(string? action = default(string?), int operationIndex = 0);
        /// <summary>
        /// order.info
        /// </summary>
        /// <remarks>
        /// Info about a specific order by ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Retrieves order’s info specified by order id (optional)</param>
        /// <param name="id">Retrieves order info specified by id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;order_id,customer,totals,address,items,bundles,status&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="storeId">Defines store id where the order should be found (optional)</param>
        /// <param name="enableCache">If the value is &#39;true&#39; and order exist in our cache, we will return order.info response from cache (optional, default to false)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrderInfo200Response</returns>
        OrderInfo200Response OrderInfo(string? orderId = default(string?), string? id = default(string?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? storeId = default(string?), bool? enableCache = default(bool?), bool? useLatestApiVersion = default(bool?), int operationIndex = 0);

        /// <summary>
        /// order.info
        /// </summary>
        /// <remarks>
        /// Info about a specific order by ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Retrieves order’s info specified by order id (optional)</param>
        /// <param name="id">Retrieves order info specified by id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;order_id,customer,totals,address,items,bundles,status&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="storeId">Defines store id where the order should be found (optional)</param>
        /// <param name="enableCache">If the value is &#39;true&#39; and order exist in our cache, we will return order.info response from cache (optional, default to false)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrderInfo200Response</returns>
        ApiResponse<OrderInfo200Response> OrderInfoWithHttpInfo(string? orderId = default(string?), string? id = default(string?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? storeId = default(string?), bool? enableCache = default(bool?), bool? useLatestApiVersion = default(bool?), int operationIndex = 0);
        /// <summary>
        /// order.list
        /// </summary>
        /// <remarks>
        /// Get list of orders from store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Retrieves orders specified by customer id (optional)</param>
        /// <param name="customerEmail">Retrieves orders specified by customer email (optional)</param>
        /// <param name="phone">Filter orders by customer&#39;s phone number (optional)</param>
        /// <param name="orderStatus">Retrieves orders specified by order status (optional)</param>
        /// <param name="orderStatusIds">Retrieves orders specified by order statuses (optional)</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve orders via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="sortBy">Set field to sort by (optional, default to &quot;order_id&quot;)</param>
        /// <param name="sortDirection">Set sorting direction (optional, default to &quot;asc&quot;)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;order_id,customer,totals,address,items,bundles,status&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="ids">Retrieves orders specified by ids (optional)</param>
        /// <param name="orderIds">Retrieves orders specified by order ids (optional)</param>
        /// <param name="ebayOrderStatus">Retrieves orders specified by order status (optional)</param>
        /// <param name="basketId">Retrieves order’s info specified by basket id. (optional)</param>
        /// <param name="financialStatus">Retrieves orders specified by financial status (optional)</param>
        /// <param name="financialStatusIds">Retrieves orders specified by financial status ids (optional)</param>
        /// <param name="fulfillmentStatus">Create order with fulfillment status (optional)</param>
        /// <param name="fulfillmentChannel">Retrieves order with a fulfillment channel (optional)</param>
        /// <param name="shippingMethod">Retrieve entities according to shipping method (optional)</param>
        /// <param name="skipOrderIds">Skipped orders by ids (optional)</param>
        /// <param name="sinceId">Retrieve entities starting from the specified id. (optional)</param>
        /// <param name="isDeleted">Filter deleted orders (optional)</param>
        /// <param name="shippingCountryIso3">Retrieve entities according to shipping country (optional)</param>
        /// <param name="enableCache">If the value is &#39;true&#39;, we will cache orders for a 15 minutes in order to increase speed and reduce requests throttling for some methods and shoping platforms (for example order.shipment.add) (optional, default to false)</param>
        /// <param name="deliveryMethod">Retrieves order with delivery method (optional)</param>
        /// <param name="tags">Order tags (optional)</param>
        /// <param name="shipNodeType">Retrieves order with ship node type (optional)</param>
        /// <param name="currencyId">Currency Id (optional)</param>
        /// <param name="returnStatus">Retrieves orders specified by return status (optional)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelResponseOrderList</returns>
        ModelResponseOrderList OrderList(string? customerId = default(string?), string? customerEmail = default(string?), string? phone = default(string?), string? orderStatus = default(string?), List<string>? orderStatusIds = default(List<string>?), int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? createdTo = default(string?), string? createdFrom = default(string?), string? modifiedTo = default(string?), string? modifiedFrom = default(string?), string? storeId = default(string?), string? ids = default(string?), string? orderIds = default(string?), string? ebayOrderStatus = default(string?), string? basketId = default(string?), string? financialStatus = default(string?), List<string>? financialStatusIds = default(List<string>?), string? fulfillmentStatus = default(string?), string? fulfillmentChannel = default(string?), string? shippingMethod = default(string?), string? skipOrderIds = default(string?), string? sinceId = default(string?), bool? isDeleted = default(bool?), string? shippingCountryIso3 = default(string?), bool? enableCache = default(bool?), string? deliveryMethod = default(string?), string? tags = default(string?), string? shipNodeType = default(string?), string? currencyId = default(string?), string? returnStatus = default(string?), bool? useLatestApiVersion = default(bool?), int operationIndex = 0);

        /// <summary>
        /// order.list
        /// </summary>
        /// <remarks>
        /// Get list of orders from store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Retrieves orders specified by customer id (optional)</param>
        /// <param name="customerEmail">Retrieves orders specified by customer email (optional)</param>
        /// <param name="phone">Filter orders by customer&#39;s phone number (optional)</param>
        /// <param name="orderStatus">Retrieves orders specified by order status (optional)</param>
        /// <param name="orderStatusIds">Retrieves orders specified by order statuses (optional)</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve orders via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="sortBy">Set field to sort by (optional, default to &quot;order_id&quot;)</param>
        /// <param name="sortDirection">Set sorting direction (optional, default to &quot;asc&quot;)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;order_id,customer,totals,address,items,bundles,status&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="ids">Retrieves orders specified by ids (optional)</param>
        /// <param name="orderIds">Retrieves orders specified by order ids (optional)</param>
        /// <param name="ebayOrderStatus">Retrieves orders specified by order status (optional)</param>
        /// <param name="basketId">Retrieves order’s info specified by basket id. (optional)</param>
        /// <param name="financialStatus">Retrieves orders specified by financial status (optional)</param>
        /// <param name="financialStatusIds">Retrieves orders specified by financial status ids (optional)</param>
        /// <param name="fulfillmentStatus">Create order with fulfillment status (optional)</param>
        /// <param name="fulfillmentChannel">Retrieves order with a fulfillment channel (optional)</param>
        /// <param name="shippingMethod">Retrieve entities according to shipping method (optional)</param>
        /// <param name="skipOrderIds">Skipped orders by ids (optional)</param>
        /// <param name="sinceId">Retrieve entities starting from the specified id. (optional)</param>
        /// <param name="isDeleted">Filter deleted orders (optional)</param>
        /// <param name="shippingCountryIso3">Retrieve entities according to shipping country (optional)</param>
        /// <param name="enableCache">If the value is &#39;true&#39;, we will cache orders for a 15 minutes in order to increase speed and reduce requests throttling for some methods and shoping platforms (for example order.shipment.add) (optional, default to false)</param>
        /// <param name="deliveryMethod">Retrieves order with delivery method (optional)</param>
        /// <param name="tags">Order tags (optional)</param>
        /// <param name="shipNodeType">Retrieves order with ship node type (optional)</param>
        /// <param name="currencyId">Currency Id (optional)</param>
        /// <param name="returnStatus">Retrieves orders specified by return status (optional)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelResponseOrderList</returns>
        ApiResponse<ModelResponseOrderList> OrderListWithHttpInfo(string? customerId = default(string?), string? customerEmail = default(string?), string? phone = default(string?), string? orderStatus = default(string?), List<string>? orderStatusIds = default(List<string>?), int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? createdTo = default(string?), string? createdFrom = default(string?), string? modifiedTo = default(string?), string? modifiedFrom = default(string?), string? storeId = default(string?), string? ids = default(string?), string? orderIds = default(string?), string? ebayOrderStatus = default(string?), string? basketId = default(string?), string? financialStatus = default(string?), List<string>? financialStatusIds = default(List<string>?), string? fulfillmentStatus = default(string?), string? fulfillmentChannel = default(string?), string? shippingMethod = default(string?), string? skipOrderIds = default(string?), string? sinceId = default(string?), bool? isDeleted = default(bool?), string? shippingCountryIso3 = default(string?), bool? enableCache = default(bool?), string? deliveryMethod = default(string?), string? tags = default(string?), string? shipNodeType = default(string?), string? currencyId = default(string?), string? returnStatus = default(string?), bool? useLatestApiVersion = default(bool?), int operationIndex = 0);
        /// <summary>
        /// order.preestimate_shipping.list
        /// </summary>
        /// <remarks>
        /// Retrieve list of order preestimated shipping methods
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderPreestimateShippingList"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelResponseOrderPreestimateShippingList</returns>
        ModelResponseOrderPreestimateShippingList OrderPreestimateShippingList(OrderPreestimateShippingList orderPreestimateShippingList, int operationIndex = 0);

        /// <summary>
        /// order.preestimate_shipping.list
        /// </summary>
        /// <remarks>
        /// Retrieve list of order preestimated shipping methods
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderPreestimateShippingList"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelResponseOrderPreestimateShippingList</returns>
        ApiResponse<ModelResponseOrderPreestimateShippingList> OrderPreestimateShippingListWithHttpInfo(OrderPreestimateShippingList orderPreestimateShippingList, int operationIndex = 0);
        /// <summary>
        /// order.refund.add
        /// </summary>
        /// <remarks>
        /// Add a refund to the order.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRefundAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrderRefundAdd200Response</returns>
        OrderRefundAdd200Response OrderRefundAdd(OrderRefundAdd orderRefundAdd, int operationIndex = 0);

        /// <summary>
        /// order.refund.add
        /// </summary>
        /// <remarks>
        /// Add a refund to the order.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRefundAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrderRefundAdd200Response</returns>
        ApiResponse<OrderRefundAdd200Response> OrderRefundAddWithHttpInfo(OrderRefundAdd orderRefundAdd, int operationIndex = 0);
        /// <summary>
        /// order.return.add
        /// </summary>
        /// <remarks>
        /// Create new return request.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderReturnAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrderReturnAdd200Response</returns>
        OrderReturnAdd200Response OrderReturnAdd(OrderReturnAdd orderReturnAdd, int operationIndex = 0);

        /// <summary>
        /// order.return.add
        /// </summary>
        /// <remarks>
        /// Create new return request.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderReturnAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrderReturnAdd200Response</returns>
        ApiResponse<OrderReturnAdd200Response> OrderReturnAddWithHttpInfo(OrderReturnAdd orderReturnAdd, int operationIndex = 0);
        /// <summary>
        /// order.return.delete
        /// </summary>
        /// <remarks>
        /// Delete return.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnId">Return ID</param>
        /// <param name="orderId">Defines the order id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttributeValueDelete200Response</returns>
        AttributeValueDelete200Response OrderReturnDelete(string returnId, string orderId, string? storeId = default(string?), int operationIndex = 0);

        /// <summary>
        /// order.return.delete
        /// </summary>
        /// <remarks>
        /// Delete return.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnId">Return ID</param>
        /// <param name="orderId">Defines the order id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttributeValueDelete200Response</returns>
        ApiResponse<AttributeValueDelete200Response> OrderReturnDeleteWithHttpInfo(string returnId, string orderId, string? storeId = default(string?), int operationIndex = 0);
        /// <summary>
        /// order.return.update
        /// </summary>
        /// <remarks>
        /// Update order&#39;s shipment information.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderReturnUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountConfigUpdate200Response</returns>
        AccountConfigUpdate200Response OrderReturnUpdate(OrderReturnUpdate orderReturnUpdate, int operationIndex = 0);

        /// <summary>
        /// order.return.update
        /// </summary>
        /// <remarks>
        /// Update order&#39;s shipment information.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderReturnUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountConfigUpdate200Response</returns>
        ApiResponse<AccountConfigUpdate200Response> OrderReturnUpdateWithHttpInfo(OrderReturnUpdate orderReturnUpdate, int operationIndex = 0);
        /// <summary>
        /// order.shipment.add
        /// </summary>
        /// <remarks>
        /// Add a shipment to the order.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderShipmentAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrderShipmentAdd200Response</returns>
        OrderShipmentAdd200Response OrderShipmentAdd(OrderShipmentAdd orderShipmentAdd, int operationIndex = 0);

        /// <summary>
        /// order.shipment.add
        /// </summary>
        /// <remarks>
        /// Add a shipment to the order.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderShipmentAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrderShipmentAdd200Response</returns>
        ApiResponse<OrderShipmentAdd200Response> OrderShipmentAddWithHttpInfo(OrderShipmentAdd orderShipmentAdd, int operationIndex = 0);
        /// <summary>
        /// order.shipment.add.batch
        /// </summary>
        /// <remarks>
        /// Add a shipments to the orders.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderShipmentAddBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoryAddBatch200Response</returns>
        CategoryAddBatch200Response OrderShipmentAddBatch(OrderShipmentAddBatch orderShipmentAddBatch, int operationIndex = 0);

        /// <summary>
        /// order.shipment.add.batch
        /// </summary>
        /// <remarks>
        /// Add a shipments to the orders.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderShipmentAddBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoryAddBatch200Response</returns>
        ApiResponse<CategoryAddBatch200Response> OrderShipmentAddBatchWithHttpInfo(OrderShipmentAddBatch orderShipmentAddBatch, int operationIndex = 0);
        /// <summary>
        /// order.shipment.delete
        /// </summary>
        /// <remarks>
        /// Delete order&#39;s shipment.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">Shipment id indicates the number of delivery</param>
        /// <param name="orderId">Defines the order for which the shipment will be deleted</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrderShipmentDelete200Response</returns>
        OrderShipmentDelete200Response OrderShipmentDelete(string shipmentId, string orderId, string? storeId = default(string?), int operationIndex = 0);

        /// <summary>
        /// order.shipment.delete
        /// </summary>
        /// <remarks>
        /// Delete order&#39;s shipment.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">Shipment id indicates the number of delivery</param>
        /// <param name="orderId">Defines the order for which the shipment will be deleted</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrderShipmentDelete200Response</returns>
        ApiResponse<OrderShipmentDelete200Response> OrderShipmentDeleteWithHttpInfo(string shipmentId, string orderId, string? storeId = default(string?), int operationIndex = 0);
        /// <summary>
        /// order.shipment.info
        /// </summary>
        /// <remarks>
        /// Get information of shipment.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="orderId">Defines the order id</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,order_id,items,tracking_numbers&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrderShipmentInfo200Response</returns>
        OrderShipmentInfo200Response OrderShipmentInfo(string id, string orderId, int? start = default(int?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? storeId = default(string?), int operationIndex = 0);

        /// <summary>
        /// order.shipment.info
        /// </summary>
        /// <remarks>
        /// Get information of shipment.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="orderId">Defines the order id</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,order_id,items,tracking_numbers&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrderShipmentInfo200Response</returns>
        ApiResponse<OrderShipmentInfo200Response> OrderShipmentInfoWithHttpInfo(string id, string orderId, int? start = default(int?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? storeId = default(string?), int operationIndex = 0);
        /// <summary>
        /// order.shipment.list
        /// </summary>
        /// <remarks>
        /// Get list of shipments by orders.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Retrieves shipments specified by order id</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,order_id,items,tracking_numbers&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelResponseOrderShipmentList</returns>
        ModelResponseOrderShipmentList OrderShipmentList(string orderId, string? pageCursor = default(string?), int? start = default(int?), int? count = default(int?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), string? storeId = default(string?), int operationIndex = 0);

        /// <summary>
        /// order.shipment.list
        /// </summary>
        /// <remarks>
        /// Get list of shipments by orders.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Retrieves shipments specified by order id</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,order_id,items,tracking_numbers&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelResponseOrderShipmentList</returns>
        ApiResponse<ModelResponseOrderShipmentList> OrderShipmentListWithHttpInfo(string orderId, string? pageCursor = default(string?), int? start = default(int?), int? count = default(int?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), string? storeId = default(string?), int operationIndex = 0);
        /// <summary>
        /// order.shipment.tracking.add
        /// </summary>
        /// <remarks>
        /// Add order shipment&#39;s tracking info.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderShipmentTrackingAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrderShipmentTrackingAdd200Response</returns>
        OrderShipmentTrackingAdd200Response OrderShipmentTrackingAdd(OrderShipmentTrackingAdd orderShipmentTrackingAdd, int operationIndex = 0);

        /// <summary>
        /// order.shipment.tracking.add
        /// </summary>
        /// <remarks>
        /// Add order shipment&#39;s tracking info.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderShipmentTrackingAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrderShipmentTrackingAdd200Response</returns>
        ApiResponse<OrderShipmentTrackingAdd200Response> OrderShipmentTrackingAddWithHttpInfo(OrderShipmentTrackingAdd orderShipmentTrackingAdd, int operationIndex = 0);
        /// <summary>
        /// order.shipment.update
        /// </summary>
        /// <remarks>
        /// Update order&#39;s shipment information.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderShipmentUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountConfigUpdate200Response</returns>
        AccountConfigUpdate200Response OrderShipmentUpdate(OrderShipmentUpdate orderShipmentUpdate, int operationIndex = 0);

        /// <summary>
        /// order.shipment.update
        /// </summary>
        /// <remarks>
        /// Update order&#39;s shipment information.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderShipmentUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountConfigUpdate200Response</returns>
        ApiResponse<AccountConfigUpdate200Response> OrderShipmentUpdateWithHttpInfo(OrderShipmentUpdate orderShipmentUpdate, int operationIndex = 0);
        /// <summary>
        /// order.status.list
        /// </summary>
        /// <remarks>
        /// Retrieve list of statuses
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="action">Available statuses for the specified action. (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelResponseOrderStatusList</returns>
        ModelResponseOrderStatusList OrderStatusList(string? storeId = default(string?), string? action = default(string?), string? responseFields = default(string?), int operationIndex = 0);

        /// <summary>
        /// order.status.list
        /// </summary>
        /// <remarks>
        /// Retrieve list of statuses
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="action">Available statuses for the specified action. (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelResponseOrderStatusList</returns>
        ApiResponse<ModelResponseOrderStatusList> OrderStatusListWithHttpInfo(string? storeId = default(string?), string? action = default(string?), string? responseFields = default(string?), int operationIndex = 0);
        /// <summary>
        /// order.transaction.list
        /// </summary>
        /// <remarks>
        /// Retrieve list of order transaction
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderIds">Retrieves order transactions specified by order ids</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,order_id,amount,description&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelResponseOrderTransactionList</returns>
        ModelResponseOrderTransactionList OrderTransactionList(string orderIds, int? count = default(int?), string? storeId = default(string?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? pageCursor = default(string?), int operationIndex = 0);

        /// <summary>
        /// order.transaction.list
        /// </summary>
        /// <remarks>
        /// Retrieve list of order transaction
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderIds">Retrieves order transactions specified by order ids</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,order_id,amount,description&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelResponseOrderTransactionList</returns>
        ApiResponse<ModelResponseOrderTransactionList> OrderTransactionListWithHttpInfo(string orderIds, int? count = default(int?), string? storeId = default(string?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? pageCursor = default(string?), int operationIndex = 0);
        /// <summary>
        /// order.update
        /// </summary>
        /// <remarks>
        /// Update existing order.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Defines the orders specified by order id</param>
        /// <param name="storeId">Defines store id where the order should be found (optional)</param>
        /// <param name="orderStatus">Defines new order&#39;s status (optional)</param>
        /// <param name="cancellationReason">Defines the cancellation reason when the order will be canceled (optional)</param>
        /// <param name="comment">Specifies order comment (optional)</param>
        /// <param name="adminComment">Specifies admin&#39;s order comment (optional)</param>
        /// <param name="adminPrivateComment">Specifies private admin&#39;s order comment (optional)</param>
        /// <param name="dateModified">Specifies order&#39;s  modification date (optional)</param>
        /// <param name="dateFinished">Specifies order&#39;s  finished date (optional)</param>
        /// <param name="financialStatus">Update order financial status to specified (optional)</param>
        /// <param name="fulfillmentStatus">Create order with fulfillment status (optional)</param>
        /// <param name="orderPaymentMethod">Defines order payment method.&lt;br/&gt;Setting order_payment_method on Shopify will also change financial_status field value to &#39;paid&#39; (optional)</param>
        /// <param name="sendNotifications">Send notifications to customer after order was created (optional, default to false)</param>
        /// <param name="origin">The source of the order (optional)</param>
        /// <param name="createInvoice">Determines whether an invoice should be created if it has not already been created (optional)</param>
        /// <param name="invoiceAdminComment">Specifies admin&#39;s order invoice comment (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountConfigUpdate200Response</returns>
        AccountConfigUpdate200Response OrderUpdate(string orderId, string? storeId = default(string?), string? orderStatus = default(string?), string? cancellationReason = default(string?), string? comment = default(string?), string? adminComment = default(string?), string? adminPrivateComment = default(string?), string? dateModified = default(string?), string? dateFinished = default(string?), string? financialStatus = default(string?), string? fulfillmentStatus = default(string?), string? orderPaymentMethod = default(string?), bool? sendNotifications = default(bool?), string? origin = default(string?), bool? createInvoice = default(bool?), string? invoiceAdminComment = default(string?), int operationIndex = 0);

        /// <summary>
        /// order.update
        /// </summary>
        /// <remarks>
        /// Update existing order.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Defines the orders specified by order id</param>
        /// <param name="storeId">Defines store id where the order should be found (optional)</param>
        /// <param name="orderStatus">Defines new order&#39;s status (optional)</param>
        /// <param name="cancellationReason">Defines the cancellation reason when the order will be canceled (optional)</param>
        /// <param name="comment">Specifies order comment (optional)</param>
        /// <param name="adminComment">Specifies admin&#39;s order comment (optional)</param>
        /// <param name="adminPrivateComment">Specifies private admin&#39;s order comment (optional)</param>
        /// <param name="dateModified">Specifies order&#39;s  modification date (optional)</param>
        /// <param name="dateFinished">Specifies order&#39;s  finished date (optional)</param>
        /// <param name="financialStatus">Update order financial status to specified (optional)</param>
        /// <param name="fulfillmentStatus">Create order with fulfillment status (optional)</param>
        /// <param name="orderPaymentMethod">Defines order payment method.&lt;br/&gt;Setting order_payment_method on Shopify will also change financial_status field value to &#39;paid&#39; (optional)</param>
        /// <param name="sendNotifications">Send notifications to customer after order was created (optional, default to false)</param>
        /// <param name="origin">The source of the order (optional)</param>
        /// <param name="createInvoice">Determines whether an invoice should be created if it has not already been created (optional)</param>
        /// <param name="invoiceAdminComment">Specifies admin&#39;s order invoice comment (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountConfigUpdate200Response</returns>
        ApiResponse<AccountConfigUpdate200Response> OrderUpdateWithHttpInfo(string orderId, string? storeId = default(string?), string? orderStatus = default(string?), string? cancellationReason = default(string?), string? comment = default(string?), string? adminComment = default(string?), string? adminPrivateComment = default(string?), string? dateModified = default(string?), string? dateFinished = default(string?), string? financialStatus = default(string?), string? fulfillmentStatus = default(string?), string? orderPaymentMethod = default(string?), bool? sendNotifications = default(bool?), string? origin = default(string?), bool? createInvoice = default(bool?), string? invoiceAdminComment = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrderApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// order.abandoned.list
        /// </summary>
        /// <remarks>
        /// Get list of orders that were left by customers before completing the order.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Retrieves orders specified by customer id (optional)</param>
        /// <param name="customerEmail">Retrieves orders specified by customer email (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="skipEmptyEmail">Filter empty emails (optional, default to false)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;customer,totals,items&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelResponseOrderAbandonedList</returns>
        System.Threading.Tasks.Task<ModelResponseOrderAbandonedList> OrderAbandonedListAsync(string? customerId = default(string?), string? customerEmail = default(string?), string? createdTo = default(string?), string? createdFrom = default(string?), string? modifiedTo = default(string?), string? modifiedFrom = default(string?), bool? skipEmptyEmail = default(bool?), string? storeId = default(string?), string? pageCursor = default(string?), int? count = default(int?), int? start = default(int?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// order.abandoned.list
        /// </summary>
        /// <remarks>
        /// Get list of orders that were left by customers before completing the order.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Retrieves orders specified by customer id (optional)</param>
        /// <param name="customerEmail">Retrieves orders specified by customer email (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="skipEmptyEmail">Filter empty emails (optional, default to false)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;customer,totals,items&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelResponseOrderAbandonedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelResponseOrderAbandonedList>> OrderAbandonedListWithHttpInfoAsync(string? customerId = default(string?), string? customerEmail = default(string?), string? createdTo = default(string?), string? createdFrom = default(string?), string? modifiedTo = default(string?), string? modifiedFrom = default(string?), bool? skipEmptyEmail = default(bool?), string? storeId = default(string?), string? pageCursor = default(string?), int? count = default(int?), int? start = default(int?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// order.add
        /// </summary>
        /// <remarks>
        /// Add a new order to the cart.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderAdd200Response</returns>
        System.Threading.Tasks.Task<OrderAdd200Response> OrderAddAsync(OrderAdd orderAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// order.add
        /// </summary>
        /// <remarks>
        /// Add a new order to the cart.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderAdd200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderAdd200Response>> OrderAddWithHttpInfoAsync(OrderAdd orderAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// order.count
        /// </summary>
        /// <remarks>
        /// Count orders in store
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Counts orders quantity specified by customer id (optional)</param>
        /// <param name="customerEmail">Counts orders quantity specified by customer email (optional)</param>
        /// <param name="orderStatus">Counts orders quantity specified by order status (optional)</param>
        /// <param name="orderStatusIds">Retrieves orders specified by order statuses (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="storeId">Counts orders quantity specified by store id (optional)</param>
        /// <param name="ids">Counts orders specified by ids (optional)</param>
        /// <param name="orderIds">Counts orders specified by order ids (optional)</param>
        /// <param name="ebayOrderStatus">Counts orders quantity specified by order status (optional)</param>
        /// <param name="financialStatus">Counts orders quantity specified by financial status (optional)</param>
        /// <param name="financialStatusIds">Retrieves orders count specified by financial status ids (optional)</param>
        /// <param name="fulfillmentChannel">Retrieves order with a fulfillment channel (optional)</param>
        /// <param name="fulfillmentStatus">Create order with fulfillment status (optional)</param>
        /// <param name="shippingMethod">Retrieve entities according to shipping method (optional)</param>
        /// <param name="deliveryMethod">Retrieves order with delivery method (optional)</param>
        /// <param name="tags">Order tags (optional)</param>
        /// <param name="shipNodeType">Retrieves order with ship node type (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderCount200Response</returns>
        System.Threading.Tasks.Task<OrderCount200Response> OrderCountAsync(string? customerId = default(string?), string? customerEmail = default(string?), string? orderStatus = default(string?), List<string>? orderStatusIds = default(List<string>?), string? createdTo = default(string?), string? createdFrom = default(string?), string? modifiedTo = default(string?), string? modifiedFrom = default(string?), string? storeId = default(string?), string? ids = default(string?), string? orderIds = default(string?), string? ebayOrderStatus = default(string?), string? financialStatus = default(string?), List<string>? financialStatusIds = default(List<string>?), string? fulfillmentChannel = default(string?), string? fulfillmentStatus = default(string?), string? shippingMethod = default(string?), string? deliveryMethod = default(string?), string? tags = default(string?), string? shipNodeType = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// order.count
        /// </summary>
        /// <remarks>
        /// Count orders in store
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Counts orders quantity specified by customer id (optional)</param>
        /// <param name="customerEmail">Counts orders quantity specified by customer email (optional)</param>
        /// <param name="orderStatus">Counts orders quantity specified by order status (optional)</param>
        /// <param name="orderStatusIds">Retrieves orders specified by order statuses (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="storeId">Counts orders quantity specified by store id (optional)</param>
        /// <param name="ids">Counts orders specified by ids (optional)</param>
        /// <param name="orderIds">Counts orders specified by order ids (optional)</param>
        /// <param name="ebayOrderStatus">Counts orders quantity specified by order status (optional)</param>
        /// <param name="financialStatus">Counts orders quantity specified by financial status (optional)</param>
        /// <param name="financialStatusIds">Retrieves orders count specified by financial status ids (optional)</param>
        /// <param name="fulfillmentChannel">Retrieves order with a fulfillment channel (optional)</param>
        /// <param name="fulfillmentStatus">Create order with fulfillment status (optional)</param>
        /// <param name="shippingMethod">Retrieve entities according to shipping method (optional)</param>
        /// <param name="deliveryMethod">Retrieves order with delivery method (optional)</param>
        /// <param name="tags">Order tags (optional)</param>
        /// <param name="shipNodeType">Retrieves order with ship node type (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderCount200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderCount200Response>> OrderCountWithHttpInfoAsync(string? customerId = default(string?), string? customerEmail = default(string?), string? orderStatus = default(string?), List<string>? orderStatusIds = default(List<string>?), string? createdTo = default(string?), string? createdFrom = default(string?), string? modifiedTo = default(string?), string? modifiedFrom = default(string?), string? storeId = default(string?), string? ids = default(string?), string? orderIds = default(string?), string? ebayOrderStatus = default(string?), string? financialStatus = default(string?), List<string>? financialStatusIds = default(List<string>?), string? fulfillmentChannel = default(string?), string? fulfillmentStatus = default(string?), string? shippingMethod = default(string?), string? deliveryMethod = default(string?), string? tags = default(string?), string? shipNodeType = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// order.financial_status.list
        /// </summary>
        /// <remarks>
        /// Retrieve list of financial statuses
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderFinancialStatusList200Response</returns>
        System.Threading.Tasks.Task<OrderFinancialStatusList200Response> OrderFinancialStatusListAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// order.financial_status.list
        /// </summary>
        /// <remarks>
        /// Retrieve list of financial statuses
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderFinancialStatusList200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderFinancialStatusList200Response>> OrderFinancialStatusListWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// order.find
        /// </summary>
        /// <remarks>
        /// This method is deprecated and won&#39;t be supported in the future. Please use \&quot;order.list\&quot; instead.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Retrieves orders specified by customer id (optional)</param>
        /// <param name="customerEmail">Retrieves orders specified by customer email (optional)</param>
        /// <param name="orderStatus">Retrieves orders specified by order status (optional)</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;order_id,customer,totals,address,items,bundles,status&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="financialStatus">Retrieves orders specified by financial status (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderFind200Response</returns>
        [Obsolete]
        System.Threading.Tasks.Task<OrderFind200Response> OrderFindAsync(string? customerId = default(string?), string? customerEmail = default(string?), string? orderStatus = default(string?), int? start = default(int?), int? count = default(int?), string? varParams = default(string?), string? exclude = default(string?), string? createdTo = default(string?), string? createdFrom = default(string?), string? modifiedTo = default(string?), string? modifiedFrom = default(string?), string? financialStatus = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// order.find
        /// </summary>
        /// <remarks>
        /// This method is deprecated and won&#39;t be supported in the future. Please use \&quot;order.list\&quot; instead.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Retrieves orders specified by customer id (optional)</param>
        /// <param name="customerEmail">Retrieves orders specified by customer email (optional)</param>
        /// <param name="orderStatus">Retrieves orders specified by order status (optional)</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;order_id,customer,totals,address,items,bundles,status&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="financialStatus">Retrieves orders specified by financial status (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderFind200Response)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<OrderFind200Response>> OrderFindWithHttpInfoAsync(string? customerId = default(string?), string? customerEmail = default(string?), string? orderStatus = default(string?), int? start = default(int?), int? count = default(int?), string? varParams = default(string?), string? exclude = default(string?), string? createdTo = default(string?), string? createdFrom = default(string?), string? modifiedTo = default(string?), string? modifiedFrom = default(string?), string? financialStatus = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// order.fulfillment_status.list
        /// </summary>
        /// <remarks>
        /// Retrieve list of fulfillment statuses
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">Available statuses for the specified action. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderFulfillmentStatusList200Response</returns>
        System.Threading.Tasks.Task<OrderFulfillmentStatusList200Response> OrderFulfillmentStatusListAsync(string? action = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// order.fulfillment_status.list
        /// </summary>
        /// <remarks>
        /// Retrieve list of fulfillment statuses
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">Available statuses for the specified action. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderFulfillmentStatusList200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderFulfillmentStatusList200Response>> OrderFulfillmentStatusListWithHttpInfoAsync(string? action = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// order.info
        /// </summary>
        /// <remarks>
        /// Info about a specific order by ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Retrieves order’s info specified by order id (optional)</param>
        /// <param name="id">Retrieves order info specified by id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;order_id,customer,totals,address,items,bundles,status&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="storeId">Defines store id where the order should be found (optional)</param>
        /// <param name="enableCache">If the value is &#39;true&#39; and order exist in our cache, we will return order.info response from cache (optional, default to false)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderInfo200Response</returns>
        System.Threading.Tasks.Task<OrderInfo200Response> OrderInfoAsync(string? orderId = default(string?), string? id = default(string?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? storeId = default(string?), bool? enableCache = default(bool?), bool? useLatestApiVersion = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// order.info
        /// </summary>
        /// <remarks>
        /// Info about a specific order by ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Retrieves order’s info specified by order id (optional)</param>
        /// <param name="id">Retrieves order info specified by id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;order_id,customer,totals,address,items,bundles,status&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="storeId">Defines store id where the order should be found (optional)</param>
        /// <param name="enableCache">If the value is &#39;true&#39; and order exist in our cache, we will return order.info response from cache (optional, default to false)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderInfo200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderInfo200Response>> OrderInfoWithHttpInfoAsync(string? orderId = default(string?), string? id = default(string?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? storeId = default(string?), bool? enableCache = default(bool?), bool? useLatestApiVersion = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// order.list
        /// </summary>
        /// <remarks>
        /// Get list of orders from store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Retrieves orders specified by customer id (optional)</param>
        /// <param name="customerEmail">Retrieves orders specified by customer email (optional)</param>
        /// <param name="phone">Filter orders by customer&#39;s phone number (optional)</param>
        /// <param name="orderStatus">Retrieves orders specified by order status (optional)</param>
        /// <param name="orderStatusIds">Retrieves orders specified by order statuses (optional)</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve orders via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="sortBy">Set field to sort by (optional, default to &quot;order_id&quot;)</param>
        /// <param name="sortDirection">Set sorting direction (optional, default to &quot;asc&quot;)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;order_id,customer,totals,address,items,bundles,status&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="ids">Retrieves orders specified by ids (optional)</param>
        /// <param name="orderIds">Retrieves orders specified by order ids (optional)</param>
        /// <param name="ebayOrderStatus">Retrieves orders specified by order status (optional)</param>
        /// <param name="basketId">Retrieves order’s info specified by basket id. (optional)</param>
        /// <param name="financialStatus">Retrieves orders specified by financial status (optional)</param>
        /// <param name="financialStatusIds">Retrieves orders specified by financial status ids (optional)</param>
        /// <param name="fulfillmentStatus">Create order with fulfillment status (optional)</param>
        /// <param name="fulfillmentChannel">Retrieves order with a fulfillment channel (optional)</param>
        /// <param name="shippingMethod">Retrieve entities according to shipping method (optional)</param>
        /// <param name="skipOrderIds">Skipped orders by ids (optional)</param>
        /// <param name="sinceId">Retrieve entities starting from the specified id. (optional)</param>
        /// <param name="isDeleted">Filter deleted orders (optional)</param>
        /// <param name="shippingCountryIso3">Retrieve entities according to shipping country (optional)</param>
        /// <param name="enableCache">If the value is &#39;true&#39;, we will cache orders for a 15 minutes in order to increase speed and reduce requests throttling for some methods and shoping platforms (for example order.shipment.add) (optional, default to false)</param>
        /// <param name="deliveryMethod">Retrieves order with delivery method (optional)</param>
        /// <param name="tags">Order tags (optional)</param>
        /// <param name="shipNodeType">Retrieves order with ship node type (optional)</param>
        /// <param name="currencyId">Currency Id (optional)</param>
        /// <param name="returnStatus">Retrieves orders specified by return status (optional)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelResponseOrderList</returns>
        System.Threading.Tasks.Task<ModelResponseOrderList> OrderListAsync(string? customerId = default(string?), string? customerEmail = default(string?), string? phone = default(string?), string? orderStatus = default(string?), List<string>? orderStatusIds = default(List<string>?), int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? createdTo = default(string?), string? createdFrom = default(string?), string? modifiedTo = default(string?), string? modifiedFrom = default(string?), string? storeId = default(string?), string? ids = default(string?), string? orderIds = default(string?), string? ebayOrderStatus = default(string?), string? basketId = default(string?), string? financialStatus = default(string?), List<string>? financialStatusIds = default(List<string>?), string? fulfillmentStatus = default(string?), string? fulfillmentChannel = default(string?), string? shippingMethod = default(string?), string? skipOrderIds = default(string?), string? sinceId = default(string?), bool? isDeleted = default(bool?), string? shippingCountryIso3 = default(string?), bool? enableCache = default(bool?), string? deliveryMethod = default(string?), string? tags = default(string?), string? shipNodeType = default(string?), string? currencyId = default(string?), string? returnStatus = default(string?), bool? useLatestApiVersion = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// order.list
        /// </summary>
        /// <remarks>
        /// Get list of orders from store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Retrieves orders specified by customer id (optional)</param>
        /// <param name="customerEmail">Retrieves orders specified by customer email (optional)</param>
        /// <param name="phone">Filter orders by customer&#39;s phone number (optional)</param>
        /// <param name="orderStatus">Retrieves orders specified by order status (optional)</param>
        /// <param name="orderStatusIds">Retrieves orders specified by order statuses (optional)</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve orders via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="sortBy">Set field to sort by (optional, default to &quot;order_id&quot;)</param>
        /// <param name="sortDirection">Set sorting direction (optional, default to &quot;asc&quot;)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;order_id,customer,totals,address,items,bundles,status&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="ids">Retrieves orders specified by ids (optional)</param>
        /// <param name="orderIds">Retrieves orders specified by order ids (optional)</param>
        /// <param name="ebayOrderStatus">Retrieves orders specified by order status (optional)</param>
        /// <param name="basketId">Retrieves order’s info specified by basket id. (optional)</param>
        /// <param name="financialStatus">Retrieves orders specified by financial status (optional)</param>
        /// <param name="financialStatusIds">Retrieves orders specified by financial status ids (optional)</param>
        /// <param name="fulfillmentStatus">Create order with fulfillment status (optional)</param>
        /// <param name="fulfillmentChannel">Retrieves order with a fulfillment channel (optional)</param>
        /// <param name="shippingMethod">Retrieve entities according to shipping method (optional)</param>
        /// <param name="skipOrderIds">Skipped orders by ids (optional)</param>
        /// <param name="sinceId">Retrieve entities starting from the specified id. (optional)</param>
        /// <param name="isDeleted">Filter deleted orders (optional)</param>
        /// <param name="shippingCountryIso3">Retrieve entities according to shipping country (optional)</param>
        /// <param name="enableCache">If the value is &#39;true&#39;, we will cache orders for a 15 minutes in order to increase speed and reduce requests throttling for some methods and shoping platforms (for example order.shipment.add) (optional, default to false)</param>
        /// <param name="deliveryMethod">Retrieves order with delivery method (optional)</param>
        /// <param name="tags">Order tags (optional)</param>
        /// <param name="shipNodeType">Retrieves order with ship node type (optional)</param>
        /// <param name="currencyId">Currency Id (optional)</param>
        /// <param name="returnStatus">Retrieves orders specified by return status (optional)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelResponseOrderList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelResponseOrderList>> OrderListWithHttpInfoAsync(string? customerId = default(string?), string? customerEmail = default(string?), string? phone = default(string?), string? orderStatus = default(string?), List<string>? orderStatusIds = default(List<string>?), int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? createdTo = default(string?), string? createdFrom = default(string?), string? modifiedTo = default(string?), string? modifiedFrom = default(string?), string? storeId = default(string?), string? ids = default(string?), string? orderIds = default(string?), string? ebayOrderStatus = default(string?), string? basketId = default(string?), string? financialStatus = default(string?), List<string>? financialStatusIds = default(List<string>?), string? fulfillmentStatus = default(string?), string? fulfillmentChannel = default(string?), string? shippingMethod = default(string?), string? skipOrderIds = default(string?), string? sinceId = default(string?), bool? isDeleted = default(bool?), string? shippingCountryIso3 = default(string?), bool? enableCache = default(bool?), string? deliveryMethod = default(string?), string? tags = default(string?), string? shipNodeType = default(string?), string? currencyId = default(string?), string? returnStatus = default(string?), bool? useLatestApiVersion = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// order.preestimate_shipping.list
        /// </summary>
        /// <remarks>
        /// Retrieve list of order preestimated shipping methods
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderPreestimateShippingList"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelResponseOrderPreestimateShippingList</returns>
        System.Threading.Tasks.Task<ModelResponseOrderPreestimateShippingList> OrderPreestimateShippingListAsync(OrderPreestimateShippingList orderPreestimateShippingList, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// order.preestimate_shipping.list
        /// </summary>
        /// <remarks>
        /// Retrieve list of order preestimated shipping methods
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderPreestimateShippingList"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelResponseOrderPreestimateShippingList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelResponseOrderPreestimateShippingList>> OrderPreestimateShippingListWithHttpInfoAsync(OrderPreestimateShippingList orderPreestimateShippingList, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// order.refund.add
        /// </summary>
        /// <remarks>
        /// Add a refund to the order.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRefundAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderRefundAdd200Response</returns>
        System.Threading.Tasks.Task<OrderRefundAdd200Response> OrderRefundAddAsync(OrderRefundAdd orderRefundAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// order.refund.add
        /// </summary>
        /// <remarks>
        /// Add a refund to the order.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRefundAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderRefundAdd200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderRefundAdd200Response>> OrderRefundAddWithHttpInfoAsync(OrderRefundAdd orderRefundAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// order.return.add
        /// </summary>
        /// <remarks>
        /// Create new return request.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderReturnAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderReturnAdd200Response</returns>
        System.Threading.Tasks.Task<OrderReturnAdd200Response> OrderReturnAddAsync(OrderReturnAdd orderReturnAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// order.return.add
        /// </summary>
        /// <remarks>
        /// Create new return request.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderReturnAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderReturnAdd200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderReturnAdd200Response>> OrderReturnAddWithHttpInfoAsync(OrderReturnAdd orderReturnAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// order.return.delete
        /// </summary>
        /// <remarks>
        /// Delete return.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnId">Return ID</param>
        /// <param name="orderId">Defines the order id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttributeValueDelete200Response</returns>
        System.Threading.Tasks.Task<AttributeValueDelete200Response> OrderReturnDeleteAsync(string returnId, string orderId, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// order.return.delete
        /// </summary>
        /// <remarks>
        /// Delete return.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnId">Return ID</param>
        /// <param name="orderId">Defines the order id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttributeValueDelete200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttributeValueDelete200Response>> OrderReturnDeleteWithHttpInfoAsync(string returnId, string orderId, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// order.return.update
        /// </summary>
        /// <remarks>
        /// Update order&#39;s shipment information.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderReturnUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountConfigUpdate200Response</returns>
        System.Threading.Tasks.Task<AccountConfigUpdate200Response> OrderReturnUpdateAsync(OrderReturnUpdate orderReturnUpdate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// order.return.update
        /// </summary>
        /// <remarks>
        /// Update order&#39;s shipment information.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderReturnUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountConfigUpdate200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountConfigUpdate200Response>> OrderReturnUpdateWithHttpInfoAsync(OrderReturnUpdate orderReturnUpdate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// order.shipment.add
        /// </summary>
        /// <remarks>
        /// Add a shipment to the order.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderShipmentAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderShipmentAdd200Response</returns>
        System.Threading.Tasks.Task<OrderShipmentAdd200Response> OrderShipmentAddAsync(OrderShipmentAdd orderShipmentAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// order.shipment.add
        /// </summary>
        /// <remarks>
        /// Add a shipment to the order.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderShipmentAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderShipmentAdd200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderShipmentAdd200Response>> OrderShipmentAddWithHttpInfoAsync(OrderShipmentAdd orderShipmentAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// order.shipment.add.batch
        /// </summary>
        /// <remarks>
        /// Add a shipments to the orders.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderShipmentAddBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryAddBatch200Response</returns>
        System.Threading.Tasks.Task<CategoryAddBatch200Response> OrderShipmentAddBatchAsync(OrderShipmentAddBatch orderShipmentAddBatch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// order.shipment.add.batch
        /// </summary>
        /// <remarks>
        /// Add a shipments to the orders.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderShipmentAddBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryAddBatch200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CategoryAddBatch200Response>> OrderShipmentAddBatchWithHttpInfoAsync(OrderShipmentAddBatch orderShipmentAddBatch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// order.shipment.delete
        /// </summary>
        /// <remarks>
        /// Delete order&#39;s shipment.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">Shipment id indicates the number of delivery</param>
        /// <param name="orderId">Defines the order for which the shipment will be deleted</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderShipmentDelete200Response</returns>
        System.Threading.Tasks.Task<OrderShipmentDelete200Response> OrderShipmentDeleteAsync(string shipmentId, string orderId, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// order.shipment.delete
        /// </summary>
        /// <remarks>
        /// Delete order&#39;s shipment.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">Shipment id indicates the number of delivery</param>
        /// <param name="orderId">Defines the order for which the shipment will be deleted</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderShipmentDelete200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderShipmentDelete200Response>> OrderShipmentDeleteWithHttpInfoAsync(string shipmentId, string orderId, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// order.shipment.info
        /// </summary>
        /// <remarks>
        /// Get information of shipment.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="orderId">Defines the order id</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,order_id,items,tracking_numbers&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderShipmentInfo200Response</returns>
        System.Threading.Tasks.Task<OrderShipmentInfo200Response> OrderShipmentInfoAsync(string id, string orderId, int? start = default(int?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// order.shipment.info
        /// </summary>
        /// <remarks>
        /// Get information of shipment.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="orderId">Defines the order id</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,order_id,items,tracking_numbers&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderShipmentInfo200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderShipmentInfo200Response>> OrderShipmentInfoWithHttpInfoAsync(string id, string orderId, int? start = default(int?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// order.shipment.list
        /// </summary>
        /// <remarks>
        /// Get list of shipments by orders.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Retrieves shipments specified by order id</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,order_id,items,tracking_numbers&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelResponseOrderShipmentList</returns>
        System.Threading.Tasks.Task<ModelResponseOrderShipmentList> OrderShipmentListAsync(string orderId, string? pageCursor = default(string?), int? start = default(int?), int? count = default(int?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// order.shipment.list
        /// </summary>
        /// <remarks>
        /// Get list of shipments by orders.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Retrieves shipments specified by order id</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,order_id,items,tracking_numbers&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelResponseOrderShipmentList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelResponseOrderShipmentList>> OrderShipmentListWithHttpInfoAsync(string orderId, string? pageCursor = default(string?), int? start = default(int?), int? count = default(int?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// order.shipment.tracking.add
        /// </summary>
        /// <remarks>
        /// Add order shipment&#39;s tracking info.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderShipmentTrackingAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderShipmentTrackingAdd200Response</returns>
        System.Threading.Tasks.Task<OrderShipmentTrackingAdd200Response> OrderShipmentTrackingAddAsync(OrderShipmentTrackingAdd orderShipmentTrackingAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// order.shipment.tracking.add
        /// </summary>
        /// <remarks>
        /// Add order shipment&#39;s tracking info.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderShipmentTrackingAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderShipmentTrackingAdd200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderShipmentTrackingAdd200Response>> OrderShipmentTrackingAddWithHttpInfoAsync(OrderShipmentTrackingAdd orderShipmentTrackingAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// order.shipment.update
        /// </summary>
        /// <remarks>
        /// Update order&#39;s shipment information.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderShipmentUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountConfigUpdate200Response</returns>
        System.Threading.Tasks.Task<AccountConfigUpdate200Response> OrderShipmentUpdateAsync(OrderShipmentUpdate orderShipmentUpdate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// order.shipment.update
        /// </summary>
        /// <remarks>
        /// Update order&#39;s shipment information.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderShipmentUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountConfigUpdate200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountConfigUpdate200Response>> OrderShipmentUpdateWithHttpInfoAsync(OrderShipmentUpdate orderShipmentUpdate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// order.status.list
        /// </summary>
        /// <remarks>
        /// Retrieve list of statuses
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="action">Available statuses for the specified action. (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelResponseOrderStatusList</returns>
        System.Threading.Tasks.Task<ModelResponseOrderStatusList> OrderStatusListAsync(string? storeId = default(string?), string? action = default(string?), string? responseFields = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// order.status.list
        /// </summary>
        /// <remarks>
        /// Retrieve list of statuses
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="action">Available statuses for the specified action. (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelResponseOrderStatusList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelResponseOrderStatusList>> OrderStatusListWithHttpInfoAsync(string? storeId = default(string?), string? action = default(string?), string? responseFields = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// order.transaction.list
        /// </summary>
        /// <remarks>
        /// Retrieve list of order transaction
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderIds">Retrieves order transactions specified by order ids</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,order_id,amount,description&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelResponseOrderTransactionList</returns>
        System.Threading.Tasks.Task<ModelResponseOrderTransactionList> OrderTransactionListAsync(string orderIds, int? count = default(int?), string? storeId = default(string?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? pageCursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// order.transaction.list
        /// </summary>
        /// <remarks>
        /// Retrieve list of order transaction
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderIds">Retrieves order transactions specified by order ids</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,order_id,amount,description&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelResponseOrderTransactionList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelResponseOrderTransactionList>> OrderTransactionListWithHttpInfoAsync(string orderIds, int? count = default(int?), string? storeId = default(string?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? pageCursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// order.update
        /// </summary>
        /// <remarks>
        /// Update existing order.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Defines the orders specified by order id</param>
        /// <param name="storeId">Defines store id where the order should be found (optional)</param>
        /// <param name="orderStatus">Defines new order&#39;s status (optional)</param>
        /// <param name="cancellationReason">Defines the cancellation reason when the order will be canceled (optional)</param>
        /// <param name="comment">Specifies order comment (optional)</param>
        /// <param name="adminComment">Specifies admin&#39;s order comment (optional)</param>
        /// <param name="adminPrivateComment">Specifies private admin&#39;s order comment (optional)</param>
        /// <param name="dateModified">Specifies order&#39;s  modification date (optional)</param>
        /// <param name="dateFinished">Specifies order&#39;s  finished date (optional)</param>
        /// <param name="financialStatus">Update order financial status to specified (optional)</param>
        /// <param name="fulfillmentStatus">Create order with fulfillment status (optional)</param>
        /// <param name="orderPaymentMethod">Defines order payment method.&lt;br/&gt;Setting order_payment_method on Shopify will also change financial_status field value to &#39;paid&#39; (optional)</param>
        /// <param name="sendNotifications">Send notifications to customer after order was created (optional, default to false)</param>
        /// <param name="origin">The source of the order (optional)</param>
        /// <param name="createInvoice">Determines whether an invoice should be created if it has not already been created (optional)</param>
        /// <param name="invoiceAdminComment">Specifies admin&#39;s order invoice comment (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountConfigUpdate200Response</returns>
        System.Threading.Tasks.Task<AccountConfigUpdate200Response> OrderUpdateAsync(string orderId, string? storeId = default(string?), string? orderStatus = default(string?), string? cancellationReason = default(string?), string? comment = default(string?), string? adminComment = default(string?), string? adminPrivateComment = default(string?), string? dateModified = default(string?), string? dateFinished = default(string?), string? financialStatus = default(string?), string? fulfillmentStatus = default(string?), string? orderPaymentMethod = default(string?), bool? sendNotifications = default(bool?), string? origin = default(string?), bool? createInvoice = default(bool?), string? invoiceAdminComment = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// order.update
        /// </summary>
        /// <remarks>
        /// Update existing order.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Defines the orders specified by order id</param>
        /// <param name="storeId">Defines store id where the order should be found (optional)</param>
        /// <param name="orderStatus">Defines new order&#39;s status (optional)</param>
        /// <param name="cancellationReason">Defines the cancellation reason when the order will be canceled (optional)</param>
        /// <param name="comment">Specifies order comment (optional)</param>
        /// <param name="adminComment">Specifies admin&#39;s order comment (optional)</param>
        /// <param name="adminPrivateComment">Specifies private admin&#39;s order comment (optional)</param>
        /// <param name="dateModified">Specifies order&#39;s  modification date (optional)</param>
        /// <param name="dateFinished">Specifies order&#39;s  finished date (optional)</param>
        /// <param name="financialStatus">Update order financial status to specified (optional)</param>
        /// <param name="fulfillmentStatus">Create order with fulfillment status (optional)</param>
        /// <param name="orderPaymentMethod">Defines order payment method.&lt;br/&gt;Setting order_payment_method on Shopify will also change financial_status field value to &#39;paid&#39; (optional)</param>
        /// <param name="sendNotifications">Send notifications to customer after order was created (optional, default to false)</param>
        /// <param name="origin">The source of the order (optional)</param>
        /// <param name="createInvoice">Determines whether an invoice should be created if it has not already been created (optional)</param>
        /// <param name="invoiceAdminComment">Specifies admin&#39;s order invoice comment (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountConfigUpdate200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountConfigUpdate200Response>> OrderUpdateWithHttpInfoAsync(string orderId, string? storeId = default(string?), string? orderStatus = default(string?), string? cancellationReason = default(string?), string? comment = default(string?), string? adminComment = default(string?), string? adminPrivateComment = default(string?), string? dateModified = default(string?), string? dateFinished = default(string?), string? financialStatus = default(string?), string? fulfillmentStatus = default(string?), string? orderPaymentMethod = default(string?), bool? sendNotifications = default(bool?), string? origin = default(string?), bool? createInvoice = default(bool?), string? invoiceAdminComment = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrderApi : IOrderApiSync, IOrderApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrderApi : IOrderApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrderApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrderApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrderApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OrderApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// order.abandoned.list Get list of orders that were left by customers before completing the order.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Retrieves orders specified by customer id (optional)</param>
        /// <param name="customerEmail">Retrieves orders specified by customer email (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="skipEmptyEmail">Filter empty emails (optional, default to false)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;customer,totals,items&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelResponseOrderAbandonedList</returns>
        public ModelResponseOrderAbandonedList OrderAbandonedList(string? customerId = default(string?), string? customerEmail = default(string?), string? createdTo = default(string?), string? createdFrom = default(string?), string? modifiedTo = default(string?), string? modifiedFrom = default(string?), bool? skipEmptyEmail = default(bool?), string? storeId = default(string?), string? pageCursor = default(string?), int? count = default(int?), int? start = default(int?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModelResponseOrderAbandonedList> localVarResponse = OrderAbandonedListWithHttpInfo(customerId, customerEmail, createdTo, createdFrom, modifiedTo, modifiedFrom, skipEmptyEmail, storeId, pageCursor, count, start, varParams, responseFields, exclude);
            return localVarResponse.Data;
        }

        /// <summary>
        /// order.abandoned.list Get list of orders that were left by customers before completing the order.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Retrieves orders specified by customer id (optional)</param>
        /// <param name="customerEmail">Retrieves orders specified by customer email (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="skipEmptyEmail">Filter empty emails (optional, default to false)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;customer,totals,items&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelResponseOrderAbandonedList</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModelResponseOrderAbandonedList> OrderAbandonedListWithHttpInfo(string? customerId = default(string?), string? customerEmail = default(string?), string? createdTo = default(string?), string? createdFrom = default(string?), string? modifiedTo = default(string?), string? modifiedFrom = default(string?), bool? skipEmptyEmail = default(bool?), string? storeId = default(string?), string? pageCursor = default(string?), int? count = default(int?), int? start = default(int?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (customerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "customer_id", customerId));
            }
            if (customerEmail != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "customer_email", customerEmail));
            }
            if (createdTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_to", createdTo));
            }
            if (createdFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_from", createdFrom));
            }
            if (modifiedTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_to", modifiedTo));
            }
            if (modifiedFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_from", modifiedFrom));
            }
            if (skipEmptyEmail != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "skip_empty_email", skipEmptyEmail));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (pageCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_cursor", pageCursor));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }

            localVarRequestOptions.Operation = "OrderApi.OrderAbandonedList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ModelResponseOrderAbandonedList>("/order.abandoned.list.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderAbandonedList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// order.abandoned.list Get list of orders that were left by customers before completing the order.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Retrieves orders specified by customer id (optional)</param>
        /// <param name="customerEmail">Retrieves orders specified by customer email (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="skipEmptyEmail">Filter empty emails (optional, default to false)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;customer,totals,items&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelResponseOrderAbandonedList</returns>
        public async System.Threading.Tasks.Task<ModelResponseOrderAbandonedList> OrderAbandonedListAsync(string? customerId = default(string?), string? customerEmail = default(string?), string? createdTo = default(string?), string? createdFrom = default(string?), string? modifiedTo = default(string?), string? modifiedFrom = default(string?), bool? skipEmptyEmail = default(bool?), string? storeId = default(string?), string? pageCursor = default(string?), int? count = default(int?), int? start = default(int?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModelResponseOrderAbandonedList> localVarResponse = await OrderAbandonedListWithHttpInfoAsync(customerId, customerEmail, createdTo, createdFrom, modifiedTo, modifiedFrom, skipEmptyEmail, storeId, pageCursor, count, start, varParams, responseFields, exclude, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// order.abandoned.list Get list of orders that were left by customers before completing the order.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Retrieves orders specified by customer id (optional)</param>
        /// <param name="customerEmail">Retrieves orders specified by customer email (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="skipEmptyEmail">Filter empty emails (optional, default to false)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;customer,totals,items&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelResponseOrderAbandonedList)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModelResponseOrderAbandonedList>> OrderAbandonedListWithHttpInfoAsync(string? customerId = default(string?), string? customerEmail = default(string?), string? createdTo = default(string?), string? createdFrom = default(string?), string? modifiedTo = default(string?), string? modifiedFrom = default(string?), bool? skipEmptyEmail = default(bool?), string? storeId = default(string?), string? pageCursor = default(string?), int? count = default(int?), int? start = default(int?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (customerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "customer_id", customerId));
            }
            if (customerEmail != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "customer_email", customerEmail));
            }
            if (createdTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_to", createdTo));
            }
            if (createdFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_from", createdFrom));
            }
            if (modifiedTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_to", modifiedTo));
            }
            if (modifiedFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_from", modifiedFrom));
            }
            if (skipEmptyEmail != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "skip_empty_email", skipEmptyEmail));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (pageCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_cursor", pageCursor));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }

            localVarRequestOptions.Operation = "OrderApi.OrderAbandonedList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ModelResponseOrderAbandonedList>("/order.abandoned.list.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderAbandonedList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// order.add Add a new order to the cart.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrderAdd200Response</returns>
        public OrderAdd200Response OrderAdd(OrderAdd orderAdd, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<OrderAdd200Response> localVarResponse = OrderAddWithHttpInfo(orderAdd);
            return localVarResponse.Data;
        }

        /// <summary>
        /// order.add Add a new order to the cart.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrderAdd200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<OrderAdd200Response> OrderAddWithHttpInfo(OrderAdd orderAdd, int operationIndex = 0)
        {
            // verify the required parameter 'orderAdd' is set
            if (orderAdd == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'orderAdd' when calling OrderApi->OrderAdd");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = orderAdd;

            localVarRequestOptions.Operation = "OrderApi.OrderAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OrderAdd200Response>("/order.add.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// order.add Add a new order to the cart.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderAdd200Response</returns>
        public async System.Threading.Tasks.Task<OrderAdd200Response> OrderAddAsync(OrderAdd orderAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<OrderAdd200Response> localVarResponse = await OrderAddWithHttpInfoAsync(orderAdd, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// order.add Add a new order to the cart.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderAdd200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<OrderAdd200Response>> OrderAddWithHttpInfoAsync(OrderAdd orderAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'orderAdd' is set
            if (orderAdd == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'orderAdd' when calling OrderApi->OrderAdd");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = orderAdd;

            localVarRequestOptions.Operation = "OrderApi.OrderAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OrderAdd200Response>("/order.add.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// order.count Count orders in store
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Counts orders quantity specified by customer id (optional)</param>
        /// <param name="customerEmail">Counts orders quantity specified by customer email (optional)</param>
        /// <param name="orderStatus">Counts orders quantity specified by order status (optional)</param>
        /// <param name="orderStatusIds">Retrieves orders specified by order statuses (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="storeId">Counts orders quantity specified by store id (optional)</param>
        /// <param name="ids">Counts orders specified by ids (optional)</param>
        /// <param name="orderIds">Counts orders specified by order ids (optional)</param>
        /// <param name="ebayOrderStatus">Counts orders quantity specified by order status (optional)</param>
        /// <param name="financialStatus">Counts orders quantity specified by financial status (optional)</param>
        /// <param name="financialStatusIds">Retrieves orders count specified by financial status ids (optional)</param>
        /// <param name="fulfillmentChannel">Retrieves order with a fulfillment channel (optional)</param>
        /// <param name="fulfillmentStatus">Create order with fulfillment status (optional)</param>
        /// <param name="shippingMethod">Retrieve entities according to shipping method (optional)</param>
        /// <param name="deliveryMethod">Retrieves order with delivery method (optional)</param>
        /// <param name="tags">Order tags (optional)</param>
        /// <param name="shipNodeType">Retrieves order with ship node type (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrderCount200Response</returns>
        public OrderCount200Response OrderCount(string? customerId = default(string?), string? customerEmail = default(string?), string? orderStatus = default(string?), List<string>? orderStatusIds = default(List<string>?), string? createdTo = default(string?), string? createdFrom = default(string?), string? modifiedTo = default(string?), string? modifiedFrom = default(string?), string? storeId = default(string?), string? ids = default(string?), string? orderIds = default(string?), string? ebayOrderStatus = default(string?), string? financialStatus = default(string?), List<string>? financialStatusIds = default(List<string>?), string? fulfillmentChannel = default(string?), string? fulfillmentStatus = default(string?), string? shippingMethod = default(string?), string? deliveryMethod = default(string?), string? tags = default(string?), string? shipNodeType = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<OrderCount200Response> localVarResponse = OrderCountWithHttpInfo(customerId, customerEmail, orderStatus, orderStatusIds, createdTo, createdFrom, modifiedTo, modifiedFrom, storeId, ids, orderIds, ebayOrderStatus, financialStatus, financialStatusIds, fulfillmentChannel, fulfillmentStatus, shippingMethod, deliveryMethod, tags, shipNodeType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// order.count Count orders in store
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Counts orders quantity specified by customer id (optional)</param>
        /// <param name="customerEmail">Counts orders quantity specified by customer email (optional)</param>
        /// <param name="orderStatus">Counts orders quantity specified by order status (optional)</param>
        /// <param name="orderStatusIds">Retrieves orders specified by order statuses (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="storeId">Counts orders quantity specified by store id (optional)</param>
        /// <param name="ids">Counts orders specified by ids (optional)</param>
        /// <param name="orderIds">Counts orders specified by order ids (optional)</param>
        /// <param name="ebayOrderStatus">Counts orders quantity specified by order status (optional)</param>
        /// <param name="financialStatus">Counts orders quantity specified by financial status (optional)</param>
        /// <param name="financialStatusIds">Retrieves orders count specified by financial status ids (optional)</param>
        /// <param name="fulfillmentChannel">Retrieves order with a fulfillment channel (optional)</param>
        /// <param name="fulfillmentStatus">Create order with fulfillment status (optional)</param>
        /// <param name="shippingMethod">Retrieve entities according to shipping method (optional)</param>
        /// <param name="deliveryMethod">Retrieves order with delivery method (optional)</param>
        /// <param name="tags">Order tags (optional)</param>
        /// <param name="shipNodeType">Retrieves order with ship node type (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrderCount200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<OrderCount200Response> OrderCountWithHttpInfo(string? customerId = default(string?), string? customerEmail = default(string?), string? orderStatus = default(string?), List<string>? orderStatusIds = default(List<string>?), string? createdTo = default(string?), string? createdFrom = default(string?), string? modifiedTo = default(string?), string? modifiedFrom = default(string?), string? storeId = default(string?), string? ids = default(string?), string? orderIds = default(string?), string? ebayOrderStatus = default(string?), string? financialStatus = default(string?), List<string>? financialStatusIds = default(List<string>?), string? fulfillmentChannel = default(string?), string? fulfillmentStatus = default(string?), string? shippingMethod = default(string?), string? deliveryMethod = default(string?), string? tags = default(string?), string? shipNodeType = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (customerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "customer_id", customerId));
            }
            if (customerEmail != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "customer_email", customerEmail));
            }
            if (orderStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order_status", orderStatus));
            }
            if (orderStatusIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "order_status_ids", orderStatusIds));
            }
            if (createdTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_to", createdTo));
            }
            if (createdFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_from", createdFrom));
            }
            if (modifiedTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_to", modifiedTo));
            }
            if (modifiedFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_from", modifiedFrom));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (orderIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order_ids", orderIds));
            }
            if (ebayOrderStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ebay_order_status", ebayOrderStatus));
            }
            if (financialStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "financial_status", financialStatus));
            }
            if (financialStatusIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "financial_status_ids", financialStatusIds));
            }
            if (fulfillmentChannel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fulfillment_channel", fulfillmentChannel));
            }
            if (fulfillmentStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fulfillment_status", fulfillmentStatus));
            }
            if (shippingMethod != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "shipping_method", shippingMethod));
            }
            if (deliveryMethod != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "delivery_method", deliveryMethod));
            }
            if (tags != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tags", tags));
            }
            if (shipNodeType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ship_node_type", shipNodeType));
            }

            localVarRequestOptions.Operation = "OrderApi.OrderCount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OrderCount200Response>("/order.count.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// order.count Count orders in store
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Counts orders quantity specified by customer id (optional)</param>
        /// <param name="customerEmail">Counts orders quantity specified by customer email (optional)</param>
        /// <param name="orderStatus">Counts orders quantity specified by order status (optional)</param>
        /// <param name="orderStatusIds">Retrieves orders specified by order statuses (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="storeId">Counts orders quantity specified by store id (optional)</param>
        /// <param name="ids">Counts orders specified by ids (optional)</param>
        /// <param name="orderIds">Counts orders specified by order ids (optional)</param>
        /// <param name="ebayOrderStatus">Counts orders quantity specified by order status (optional)</param>
        /// <param name="financialStatus">Counts orders quantity specified by financial status (optional)</param>
        /// <param name="financialStatusIds">Retrieves orders count specified by financial status ids (optional)</param>
        /// <param name="fulfillmentChannel">Retrieves order with a fulfillment channel (optional)</param>
        /// <param name="fulfillmentStatus">Create order with fulfillment status (optional)</param>
        /// <param name="shippingMethod">Retrieve entities according to shipping method (optional)</param>
        /// <param name="deliveryMethod">Retrieves order with delivery method (optional)</param>
        /// <param name="tags">Order tags (optional)</param>
        /// <param name="shipNodeType">Retrieves order with ship node type (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderCount200Response</returns>
        public async System.Threading.Tasks.Task<OrderCount200Response> OrderCountAsync(string? customerId = default(string?), string? customerEmail = default(string?), string? orderStatus = default(string?), List<string>? orderStatusIds = default(List<string>?), string? createdTo = default(string?), string? createdFrom = default(string?), string? modifiedTo = default(string?), string? modifiedFrom = default(string?), string? storeId = default(string?), string? ids = default(string?), string? orderIds = default(string?), string? ebayOrderStatus = default(string?), string? financialStatus = default(string?), List<string>? financialStatusIds = default(List<string>?), string? fulfillmentChannel = default(string?), string? fulfillmentStatus = default(string?), string? shippingMethod = default(string?), string? deliveryMethod = default(string?), string? tags = default(string?), string? shipNodeType = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<OrderCount200Response> localVarResponse = await OrderCountWithHttpInfoAsync(customerId, customerEmail, orderStatus, orderStatusIds, createdTo, createdFrom, modifiedTo, modifiedFrom, storeId, ids, orderIds, ebayOrderStatus, financialStatus, financialStatusIds, fulfillmentChannel, fulfillmentStatus, shippingMethod, deliveryMethod, tags, shipNodeType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// order.count Count orders in store
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Counts orders quantity specified by customer id (optional)</param>
        /// <param name="customerEmail">Counts orders quantity specified by customer email (optional)</param>
        /// <param name="orderStatus">Counts orders quantity specified by order status (optional)</param>
        /// <param name="orderStatusIds">Retrieves orders specified by order statuses (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="storeId">Counts orders quantity specified by store id (optional)</param>
        /// <param name="ids">Counts orders specified by ids (optional)</param>
        /// <param name="orderIds">Counts orders specified by order ids (optional)</param>
        /// <param name="ebayOrderStatus">Counts orders quantity specified by order status (optional)</param>
        /// <param name="financialStatus">Counts orders quantity specified by financial status (optional)</param>
        /// <param name="financialStatusIds">Retrieves orders count specified by financial status ids (optional)</param>
        /// <param name="fulfillmentChannel">Retrieves order with a fulfillment channel (optional)</param>
        /// <param name="fulfillmentStatus">Create order with fulfillment status (optional)</param>
        /// <param name="shippingMethod">Retrieve entities according to shipping method (optional)</param>
        /// <param name="deliveryMethod">Retrieves order with delivery method (optional)</param>
        /// <param name="tags">Order tags (optional)</param>
        /// <param name="shipNodeType">Retrieves order with ship node type (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderCount200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<OrderCount200Response>> OrderCountWithHttpInfoAsync(string? customerId = default(string?), string? customerEmail = default(string?), string? orderStatus = default(string?), List<string>? orderStatusIds = default(List<string>?), string? createdTo = default(string?), string? createdFrom = default(string?), string? modifiedTo = default(string?), string? modifiedFrom = default(string?), string? storeId = default(string?), string? ids = default(string?), string? orderIds = default(string?), string? ebayOrderStatus = default(string?), string? financialStatus = default(string?), List<string>? financialStatusIds = default(List<string>?), string? fulfillmentChannel = default(string?), string? fulfillmentStatus = default(string?), string? shippingMethod = default(string?), string? deliveryMethod = default(string?), string? tags = default(string?), string? shipNodeType = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (customerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "customer_id", customerId));
            }
            if (customerEmail != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "customer_email", customerEmail));
            }
            if (orderStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order_status", orderStatus));
            }
            if (orderStatusIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "order_status_ids", orderStatusIds));
            }
            if (createdTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_to", createdTo));
            }
            if (createdFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_from", createdFrom));
            }
            if (modifiedTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_to", modifiedTo));
            }
            if (modifiedFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_from", modifiedFrom));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (orderIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order_ids", orderIds));
            }
            if (ebayOrderStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ebay_order_status", ebayOrderStatus));
            }
            if (financialStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "financial_status", financialStatus));
            }
            if (financialStatusIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "financial_status_ids", financialStatusIds));
            }
            if (fulfillmentChannel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fulfillment_channel", fulfillmentChannel));
            }
            if (fulfillmentStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fulfillment_status", fulfillmentStatus));
            }
            if (shippingMethod != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "shipping_method", shippingMethod));
            }
            if (deliveryMethod != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "delivery_method", deliveryMethod));
            }
            if (tags != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tags", tags));
            }
            if (shipNodeType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ship_node_type", shipNodeType));
            }

            localVarRequestOptions.Operation = "OrderApi.OrderCount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OrderCount200Response>("/order.count.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// order.financial_status.list Retrieve list of financial statuses
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrderFinancialStatusList200Response</returns>
        public OrderFinancialStatusList200Response OrderFinancialStatusList(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<OrderFinancialStatusList200Response> localVarResponse = OrderFinancialStatusListWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// order.financial_status.list Retrieve list of financial statuses
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrderFinancialStatusList200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<OrderFinancialStatusList200Response> OrderFinancialStatusListWithHttpInfo(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "OrderApi.OrderFinancialStatusList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OrderFinancialStatusList200Response>("/order.financial_status.list.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderFinancialStatusList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// order.financial_status.list Retrieve list of financial statuses
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderFinancialStatusList200Response</returns>
        public async System.Threading.Tasks.Task<OrderFinancialStatusList200Response> OrderFinancialStatusListAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<OrderFinancialStatusList200Response> localVarResponse = await OrderFinancialStatusListWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// order.financial_status.list Retrieve list of financial statuses
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderFinancialStatusList200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<OrderFinancialStatusList200Response>> OrderFinancialStatusListWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "OrderApi.OrderFinancialStatusList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OrderFinancialStatusList200Response>("/order.financial_status.list.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderFinancialStatusList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// order.find This method is deprecated and won&#39;t be supported in the future. Please use \&quot;order.list\&quot; instead.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Retrieves orders specified by customer id (optional)</param>
        /// <param name="customerEmail">Retrieves orders specified by customer email (optional)</param>
        /// <param name="orderStatus">Retrieves orders specified by order status (optional)</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;order_id,customer,totals,address,items,bundles,status&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="financialStatus">Retrieves orders specified by financial status (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrderFind200Response</returns>
        [Obsolete]
        public OrderFind200Response OrderFind(string? customerId = default(string?), string? customerEmail = default(string?), string? orderStatus = default(string?), int? start = default(int?), int? count = default(int?), string? varParams = default(string?), string? exclude = default(string?), string? createdTo = default(string?), string? createdFrom = default(string?), string? modifiedTo = default(string?), string? modifiedFrom = default(string?), string? financialStatus = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<OrderFind200Response> localVarResponse = OrderFindWithHttpInfo(customerId, customerEmail, orderStatus, start, count, varParams, exclude, createdTo, createdFrom, modifiedTo, modifiedFrom, financialStatus);
            return localVarResponse.Data;
        }

        /// <summary>
        /// order.find This method is deprecated and won&#39;t be supported in the future. Please use \&quot;order.list\&quot; instead.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Retrieves orders specified by customer id (optional)</param>
        /// <param name="customerEmail">Retrieves orders specified by customer email (optional)</param>
        /// <param name="orderStatus">Retrieves orders specified by order status (optional)</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;order_id,customer,totals,address,items,bundles,status&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="financialStatus">Retrieves orders specified by financial status (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrderFind200Response</returns>
        [Obsolete]
        public Org.OpenAPITools.Client.ApiResponse<OrderFind200Response> OrderFindWithHttpInfo(string? customerId = default(string?), string? customerEmail = default(string?), string? orderStatus = default(string?), int? start = default(int?), int? count = default(int?), string? varParams = default(string?), string? exclude = default(string?), string? createdTo = default(string?), string? createdFrom = default(string?), string? modifiedTo = default(string?), string? modifiedFrom = default(string?), string? financialStatus = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (customerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "customer_id", customerId));
            }
            if (customerEmail != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "customer_email", customerEmail));
            }
            if (orderStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order_status", orderStatus));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }
            if (createdTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_to", createdTo));
            }
            if (createdFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_from", createdFrom));
            }
            if (modifiedTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_to", modifiedTo));
            }
            if (modifiedFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_from", modifiedFrom));
            }
            if (financialStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "financial_status", financialStatus));
            }

            localVarRequestOptions.Operation = "OrderApi.OrderFind";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OrderFind200Response>("/order.find.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderFind", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// order.find This method is deprecated and won&#39;t be supported in the future. Please use \&quot;order.list\&quot; instead.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Retrieves orders specified by customer id (optional)</param>
        /// <param name="customerEmail">Retrieves orders specified by customer email (optional)</param>
        /// <param name="orderStatus">Retrieves orders specified by order status (optional)</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;order_id,customer,totals,address,items,bundles,status&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="financialStatus">Retrieves orders specified by financial status (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderFind200Response</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<OrderFind200Response> OrderFindAsync(string? customerId = default(string?), string? customerEmail = default(string?), string? orderStatus = default(string?), int? start = default(int?), int? count = default(int?), string? varParams = default(string?), string? exclude = default(string?), string? createdTo = default(string?), string? createdFrom = default(string?), string? modifiedTo = default(string?), string? modifiedFrom = default(string?), string? financialStatus = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<OrderFind200Response> localVarResponse = await OrderFindWithHttpInfoAsync(customerId, customerEmail, orderStatus, start, count, varParams, exclude, createdTo, createdFrom, modifiedTo, modifiedFrom, financialStatus, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// order.find This method is deprecated and won&#39;t be supported in the future. Please use \&quot;order.list\&quot; instead.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Retrieves orders specified by customer id (optional)</param>
        /// <param name="customerEmail">Retrieves orders specified by customer email (optional)</param>
        /// <param name="orderStatus">Retrieves orders specified by order status (optional)</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;order_id,customer,totals,address,items,bundles,status&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="financialStatus">Retrieves orders specified by financial status (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderFind200Response)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<OrderFind200Response>> OrderFindWithHttpInfoAsync(string? customerId = default(string?), string? customerEmail = default(string?), string? orderStatus = default(string?), int? start = default(int?), int? count = default(int?), string? varParams = default(string?), string? exclude = default(string?), string? createdTo = default(string?), string? createdFrom = default(string?), string? modifiedTo = default(string?), string? modifiedFrom = default(string?), string? financialStatus = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (customerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "customer_id", customerId));
            }
            if (customerEmail != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "customer_email", customerEmail));
            }
            if (orderStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order_status", orderStatus));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }
            if (createdTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_to", createdTo));
            }
            if (createdFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_from", createdFrom));
            }
            if (modifiedTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_to", modifiedTo));
            }
            if (modifiedFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_from", modifiedFrom));
            }
            if (financialStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "financial_status", financialStatus));
            }

            localVarRequestOptions.Operation = "OrderApi.OrderFind";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OrderFind200Response>("/order.find.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderFind", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// order.fulfillment_status.list Retrieve list of fulfillment statuses
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">Available statuses for the specified action. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrderFulfillmentStatusList200Response</returns>
        public OrderFulfillmentStatusList200Response OrderFulfillmentStatusList(string? action = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<OrderFulfillmentStatusList200Response> localVarResponse = OrderFulfillmentStatusListWithHttpInfo(action);
            return localVarResponse.Data;
        }

        /// <summary>
        /// order.fulfillment_status.list Retrieve list of fulfillment statuses
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">Available statuses for the specified action. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrderFulfillmentStatusList200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<OrderFulfillmentStatusList200Response> OrderFulfillmentStatusListWithHttpInfo(string? action = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (action != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "action", action));
            }

            localVarRequestOptions.Operation = "OrderApi.OrderFulfillmentStatusList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OrderFulfillmentStatusList200Response>("/order.fulfillment_status.list.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderFulfillmentStatusList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// order.fulfillment_status.list Retrieve list of fulfillment statuses
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">Available statuses for the specified action. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderFulfillmentStatusList200Response</returns>
        public async System.Threading.Tasks.Task<OrderFulfillmentStatusList200Response> OrderFulfillmentStatusListAsync(string? action = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<OrderFulfillmentStatusList200Response> localVarResponse = await OrderFulfillmentStatusListWithHttpInfoAsync(action, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// order.fulfillment_status.list Retrieve list of fulfillment statuses
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">Available statuses for the specified action. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderFulfillmentStatusList200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<OrderFulfillmentStatusList200Response>> OrderFulfillmentStatusListWithHttpInfoAsync(string? action = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (action != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "action", action));
            }

            localVarRequestOptions.Operation = "OrderApi.OrderFulfillmentStatusList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OrderFulfillmentStatusList200Response>("/order.fulfillment_status.list.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderFulfillmentStatusList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// order.info Info about a specific order by ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Retrieves order’s info specified by order id (optional)</param>
        /// <param name="id">Retrieves order info specified by id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;order_id,customer,totals,address,items,bundles,status&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="storeId">Defines store id where the order should be found (optional)</param>
        /// <param name="enableCache">If the value is &#39;true&#39; and order exist in our cache, we will return order.info response from cache (optional, default to false)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrderInfo200Response</returns>
        public OrderInfo200Response OrderInfo(string? orderId = default(string?), string? id = default(string?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? storeId = default(string?), bool? enableCache = default(bool?), bool? useLatestApiVersion = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<OrderInfo200Response> localVarResponse = OrderInfoWithHttpInfo(orderId, id, varParams, responseFields, exclude, storeId, enableCache, useLatestApiVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// order.info Info about a specific order by ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Retrieves order’s info specified by order id (optional)</param>
        /// <param name="id">Retrieves order info specified by id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;order_id,customer,totals,address,items,bundles,status&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="storeId">Defines store id where the order should be found (optional)</param>
        /// <param name="enableCache">If the value is &#39;true&#39; and order exist in our cache, we will return order.info response from cache (optional, default to false)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrderInfo200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<OrderInfo200Response> OrderInfoWithHttpInfo(string? orderId = default(string?), string? id = default(string?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? storeId = default(string?), bool? enableCache = default(bool?), bool? useLatestApiVersion = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (orderId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order_id", orderId));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (enableCache != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "enable_cache", enableCache));
            }
            if (useLatestApiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "use_latest_api_version", useLatestApiVersion));
            }

            localVarRequestOptions.Operation = "OrderApi.OrderInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OrderInfo200Response>("/order.info.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// order.info Info about a specific order by ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Retrieves order’s info specified by order id (optional)</param>
        /// <param name="id">Retrieves order info specified by id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;order_id,customer,totals,address,items,bundles,status&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="storeId">Defines store id where the order should be found (optional)</param>
        /// <param name="enableCache">If the value is &#39;true&#39; and order exist in our cache, we will return order.info response from cache (optional, default to false)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderInfo200Response</returns>
        public async System.Threading.Tasks.Task<OrderInfo200Response> OrderInfoAsync(string? orderId = default(string?), string? id = default(string?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? storeId = default(string?), bool? enableCache = default(bool?), bool? useLatestApiVersion = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<OrderInfo200Response> localVarResponse = await OrderInfoWithHttpInfoAsync(orderId, id, varParams, responseFields, exclude, storeId, enableCache, useLatestApiVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// order.info Info about a specific order by ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Retrieves order’s info specified by order id (optional)</param>
        /// <param name="id">Retrieves order info specified by id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;order_id,customer,totals,address,items,bundles,status&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="storeId">Defines store id where the order should be found (optional)</param>
        /// <param name="enableCache">If the value is &#39;true&#39; and order exist in our cache, we will return order.info response from cache (optional, default to false)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderInfo200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<OrderInfo200Response>> OrderInfoWithHttpInfoAsync(string? orderId = default(string?), string? id = default(string?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? storeId = default(string?), bool? enableCache = default(bool?), bool? useLatestApiVersion = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (orderId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order_id", orderId));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (enableCache != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "enable_cache", enableCache));
            }
            if (useLatestApiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "use_latest_api_version", useLatestApiVersion));
            }

            localVarRequestOptions.Operation = "OrderApi.OrderInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OrderInfo200Response>("/order.info.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// order.list Get list of orders from store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Retrieves orders specified by customer id (optional)</param>
        /// <param name="customerEmail">Retrieves orders specified by customer email (optional)</param>
        /// <param name="phone">Filter orders by customer&#39;s phone number (optional)</param>
        /// <param name="orderStatus">Retrieves orders specified by order status (optional)</param>
        /// <param name="orderStatusIds">Retrieves orders specified by order statuses (optional)</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve orders via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="sortBy">Set field to sort by (optional, default to &quot;order_id&quot;)</param>
        /// <param name="sortDirection">Set sorting direction (optional, default to &quot;asc&quot;)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;order_id,customer,totals,address,items,bundles,status&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="ids">Retrieves orders specified by ids (optional)</param>
        /// <param name="orderIds">Retrieves orders specified by order ids (optional)</param>
        /// <param name="ebayOrderStatus">Retrieves orders specified by order status (optional)</param>
        /// <param name="basketId">Retrieves order’s info specified by basket id. (optional)</param>
        /// <param name="financialStatus">Retrieves orders specified by financial status (optional)</param>
        /// <param name="financialStatusIds">Retrieves orders specified by financial status ids (optional)</param>
        /// <param name="fulfillmentStatus">Create order with fulfillment status (optional)</param>
        /// <param name="fulfillmentChannel">Retrieves order with a fulfillment channel (optional)</param>
        /// <param name="shippingMethod">Retrieve entities according to shipping method (optional)</param>
        /// <param name="skipOrderIds">Skipped orders by ids (optional)</param>
        /// <param name="sinceId">Retrieve entities starting from the specified id. (optional)</param>
        /// <param name="isDeleted">Filter deleted orders (optional)</param>
        /// <param name="shippingCountryIso3">Retrieve entities according to shipping country (optional)</param>
        /// <param name="enableCache">If the value is &#39;true&#39;, we will cache orders for a 15 minutes in order to increase speed and reduce requests throttling for some methods and shoping platforms (for example order.shipment.add) (optional, default to false)</param>
        /// <param name="deliveryMethod">Retrieves order with delivery method (optional)</param>
        /// <param name="tags">Order tags (optional)</param>
        /// <param name="shipNodeType">Retrieves order with ship node type (optional)</param>
        /// <param name="currencyId">Currency Id (optional)</param>
        /// <param name="returnStatus">Retrieves orders specified by return status (optional)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelResponseOrderList</returns>
        public ModelResponseOrderList OrderList(string? customerId = default(string?), string? customerEmail = default(string?), string? phone = default(string?), string? orderStatus = default(string?), List<string>? orderStatusIds = default(List<string>?), int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? createdTo = default(string?), string? createdFrom = default(string?), string? modifiedTo = default(string?), string? modifiedFrom = default(string?), string? storeId = default(string?), string? ids = default(string?), string? orderIds = default(string?), string? ebayOrderStatus = default(string?), string? basketId = default(string?), string? financialStatus = default(string?), List<string>? financialStatusIds = default(List<string>?), string? fulfillmentStatus = default(string?), string? fulfillmentChannel = default(string?), string? shippingMethod = default(string?), string? skipOrderIds = default(string?), string? sinceId = default(string?), bool? isDeleted = default(bool?), string? shippingCountryIso3 = default(string?), bool? enableCache = default(bool?), string? deliveryMethod = default(string?), string? tags = default(string?), string? shipNodeType = default(string?), string? currencyId = default(string?), string? returnStatus = default(string?), bool? useLatestApiVersion = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModelResponseOrderList> localVarResponse = OrderListWithHttpInfo(customerId, customerEmail, phone, orderStatus, orderStatusIds, start, count, pageCursor, sortBy, sortDirection, varParams, responseFields, exclude, createdTo, createdFrom, modifiedTo, modifiedFrom, storeId, ids, orderIds, ebayOrderStatus, basketId, financialStatus, financialStatusIds, fulfillmentStatus, fulfillmentChannel, shippingMethod, skipOrderIds, sinceId, isDeleted, shippingCountryIso3, enableCache, deliveryMethod, tags, shipNodeType, currencyId, returnStatus, useLatestApiVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// order.list Get list of orders from store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Retrieves orders specified by customer id (optional)</param>
        /// <param name="customerEmail">Retrieves orders specified by customer email (optional)</param>
        /// <param name="phone">Filter orders by customer&#39;s phone number (optional)</param>
        /// <param name="orderStatus">Retrieves orders specified by order status (optional)</param>
        /// <param name="orderStatusIds">Retrieves orders specified by order statuses (optional)</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve orders via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="sortBy">Set field to sort by (optional, default to &quot;order_id&quot;)</param>
        /// <param name="sortDirection">Set sorting direction (optional, default to &quot;asc&quot;)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;order_id,customer,totals,address,items,bundles,status&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="ids">Retrieves orders specified by ids (optional)</param>
        /// <param name="orderIds">Retrieves orders specified by order ids (optional)</param>
        /// <param name="ebayOrderStatus">Retrieves orders specified by order status (optional)</param>
        /// <param name="basketId">Retrieves order’s info specified by basket id. (optional)</param>
        /// <param name="financialStatus">Retrieves orders specified by financial status (optional)</param>
        /// <param name="financialStatusIds">Retrieves orders specified by financial status ids (optional)</param>
        /// <param name="fulfillmentStatus">Create order with fulfillment status (optional)</param>
        /// <param name="fulfillmentChannel">Retrieves order with a fulfillment channel (optional)</param>
        /// <param name="shippingMethod">Retrieve entities according to shipping method (optional)</param>
        /// <param name="skipOrderIds">Skipped orders by ids (optional)</param>
        /// <param name="sinceId">Retrieve entities starting from the specified id. (optional)</param>
        /// <param name="isDeleted">Filter deleted orders (optional)</param>
        /// <param name="shippingCountryIso3">Retrieve entities according to shipping country (optional)</param>
        /// <param name="enableCache">If the value is &#39;true&#39;, we will cache orders for a 15 minutes in order to increase speed and reduce requests throttling for some methods and shoping platforms (for example order.shipment.add) (optional, default to false)</param>
        /// <param name="deliveryMethod">Retrieves order with delivery method (optional)</param>
        /// <param name="tags">Order tags (optional)</param>
        /// <param name="shipNodeType">Retrieves order with ship node type (optional)</param>
        /// <param name="currencyId">Currency Id (optional)</param>
        /// <param name="returnStatus">Retrieves orders specified by return status (optional)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelResponseOrderList</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModelResponseOrderList> OrderListWithHttpInfo(string? customerId = default(string?), string? customerEmail = default(string?), string? phone = default(string?), string? orderStatus = default(string?), List<string>? orderStatusIds = default(List<string>?), int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? createdTo = default(string?), string? createdFrom = default(string?), string? modifiedTo = default(string?), string? modifiedFrom = default(string?), string? storeId = default(string?), string? ids = default(string?), string? orderIds = default(string?), string? ebayOrderStatus = default(string?), string? basketId = default(string?), string? financialStatus = default(string?), List<string>? financialStatusIds = default(List<string>?), string? fulfillmentStatus = default(string?), string? fulfillmentChannel = default(string?), string? shippingMethod = default(string?), string? skipOrderIds = default(string?), string? sinceId = default(string?), bool? isDeleted = default(bool?), string? shippingCountryIso3 = default(string?), bool? enableCache = default(bool?), string? deliveryMethod = default(string?), string? tags = default(string?), string? shipNodeType = default(string?), string? currencyId = default(string?), string? returnStatus = default(string?), bool? useLatestApiVersion = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (customerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "customer_id", customerId));
            }
            if (customerEmail != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "customer_email", customerEmail));
            }
            if (phone != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "phone", phone));
            }
            if (orderStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order_status", orderStatus));
            }
            if (orderStatusIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "order_status_ids", orderStatusIds));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (pageCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_cursor", pageCursor));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sort_direction", sortDirection));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }
            if (createdTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_to", createdTo));
            }
            if (createdFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_from", createdFrom));
            }
            if (modifiedTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_to", modifiedTo));
            }
            if (modifiedFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_from", modifiedFrom));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (orderIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order_ids", orderIds));
            }
            if (ebayOrderStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ebay_order_status", ebayOrderStatus));
            }
            if (basketId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "basket_id", basketId));
            }
            if (financialStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "financial_status", financialStatus));
            }
            if (financialStatusIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "financial_status_ids", financialStatusIds));
            }
            if (fulfillmentStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fulfillment_status", fulfillmentStatus));
            }
            if (fulfillmentChannel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fulfillment_channel", fulfillmentChannel));
            }
            if (shippingMethod != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "shipping_method", shippingMethod));
            }
            if (skipOrderIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "skip_order_ids", skipOrderIds));
            }
            if (sinceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "since_id", sinceId));
            }
            if (isDeleted != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "is_deleted", isDeleted));
            }
            if (shippingCountryIso3 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "shipping_country_iso3", shippingCountryIso3));
            }
            if (enableCache != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "enable_cache", enableCache));
            }
            if (deliveryMethod != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "delivery_method", deliveryMethod));
            }
            if (tags != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tags", tags));
            }
            if (shipNodeType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ship_node_type", shipNodeType));
            }
            if (currencyId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "currency_id", currencyId));
            }
            if (returnStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "return_status", returnStatus));
            }
            if (useLatestApiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "use_latest_api_version", useLatestApiVersion));
            }

            localVarRequestOptions.Operation = "OrderApi.OrderList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ModelResponseOrderList>("/order.list.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// order.list Get list of orders from store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Retrieves orders specified by customer id (optional)</param>
        /// <param name="customerEmail">Retrieves orders specified by customer email (optional)</param>
        /// <param name="phone">Filter orders by customer&#39;s phone number (optional)</param>
        /// <param name="orderStatus">Retrieves orders specified by order status (optional)</param>
        /// <param name="orderStatusIds">Retrieves orders specified by order statuses (optional)</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve orders via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="sortBy">Set field to sort by (optional, default to &quot;order_id&quot;)</param>
        /// <param name="sortDirection">Set sorting direction (optional, default to &quot;asc&quot;)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;order_id,customer,totals,address,items,bundles,status&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="ids">Retrieves orders specified by ids (optional)</param>
        /// <param name="orderIds">Retrieves orders specified by order ids (optional)</param>
        /// <param name="ebayOrderStatus">Retrieves orders specified by order status (optional)</param>
        /// <param name="basketId">Retrieves order’s info specified by basket id. (optional)</param>
        /// <param name="financialStatus">Retrieves orders specified by financial status (optional)</param>
        /// <param name="financialStatusIds">Retrieves orders specified by financial status ids (optional)</param>
        /// <param name="fulfillmentStatus">Create order with fulfillment status (optional)</param>
        /// <param name="fulfillmentChannel">Retrieves order with a fulfillment channel (optional)</param>
        /// <param name="shippingMethod">Retrieve entities according to shipping method (optional)</param>
        /// <param name="skipOrderIds">Skipped orders by ids (optional)</param>
        /// <param name="sinceId">Retrieve entities starting from the specified id. (optional)</param>
        /// <param name="isDeleted">Filter deleted orders (optional)</param>
        /// <param name="shippingCountryIso3">Retrieve entities according to shipping country (optional)</param>
        /// <param name="enableCache">If the value is &#39;true&#39;, we will cache orders for a 15 minutes in order to increase speed and reduce requests throttling for some methods and shoping platforms (for example order.shipment.add) (optional, default to false)</param>
        /// <param name="deliveryMethod">Retrieves order with delivery method (optional)</param>
        /// <param name="tags">Order tags (optional)</param>
        /// <param name="shipNodeType">Retrieves order with ship node type (optional)</param>
        /// <param name="currencyId">Currency Id (optional)</param>
        /// <param name="returnStatus">Retrieves orders specified by return status (optional)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelResponseOrderList</returns>
        public async System.Threading.Tasks.Task<ModelResponseOrderList> OrderListAsync(string? customerId = default(string?), string? customerEmail = default(string?), string? phone = default(string?), string? orderStatus = default(string?), List<string>? orderStatusIds = default(List<string>?), int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? createdTo = default(string?), string? createdFrom = default(string?), string? modifiedTo = default(string?), string? modifiedFrom = default(string?), string? storeId = default(string?), string? ids = default(string?), string? orderIds = default(string?), string? ebayOrderStatus = default(string?), string? basketId = default(string?), string? financialStatus = default(string?), List<string>? financialStatusIds = default(List<string>?), string? fulfillmentStatus = default(string?), string? fulfillmentChannel = default(string?), string? shippingMethod = default(string?), string? skipOrderIds = default(string?), string? sinceId = default(string?), bool? isDeleted = default(bool?), string? shippingCountryIso3 = default(string?), bool? enableCache = default(bool?), string? deliveryMethod = default(string?), string? tags = default(string?), string? shipNodeType = default(string?), string? currencyId = default(string?), string? returnStatus = default(string?), bool? useLatestApiVersion = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModelResponseOrderList> localVarResponse = await OrderListWithHttpInfoAsync(customerId, customerEmail, phone, orderStatus, orderStatusIds, start, count, pageCursor, sortBy, sortDirection, varParams, responseFields, exclude, createdTo, createdFrom, modifiedTo, modifiedFrom, storeId, ids, orderIds, ebayOrderStatus, basketId, financialStatus, financialStatusIds, fulfillmentStatus, fulfillmentChannel, shippingMethod, skipOrderIds, sinceId, isDeleted, shippingCountryIso3, enableCache, deliveryMethod, tags, shipNodeType, currencyId, returnStatus, useLatestApiVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// order.list Get list of orders from store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Retrieves orders specified by customer id (optional)</param>
        /// <param name="customerEmail">Retrieves orders specified by customer email (optional)</param>
        /// <param name="phone">Filter orders by customer&#39;s phone number (optional)</param>
        /// <param name="orderStatus">Retrieves orders specified by order status (optional)</param>
        /// <param name="orderStatusIds">Retrieves orders specified by order statuses (optional)</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve orders via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="sortBy">Set field to sort by (optional, default to &quot;order_id&quot;)</param>
        /// <param name="sortDirection">Set sorting direction (optional, default to &quot;asc&quot;)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;order_id,customer,totals,address,items,bundles,status&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="ids">Retrieves orders specified by ids (optional)</param>
        /// <param name="orderIds">Retrieves orders specified by order ids (optional)</param>
        /// <param name="ebayOrderStatus">Retrieves orders specified by order status (optional)</param>
        /// <param name="basketId">Retrieves order’s info specified by basket id. (optional)</param>
        /// <param name="financialStatus">Retrieves orders specified by financial status (optional)</param>
        /// <param name="financialStatusIds">Retrieves orders specified by financial status ids (optional)</param>
        /// <param name="fulfillmentStatus">Create order with fulfillment status (optional)</param>
        /// <param name="fulfillmentChannel">Retrieves order with a fulfillment channel (optional)</param>
        /// <param name="shippingMethod">Retrieve entities according to shipping method (optional)</param>
        /// <param name="skipOrderIds">Skipped orders by ids (optional)</param>
        /// <param name="sinceId">Retrieve entities starting from the specified id. (optional)</param>
        /// <param name="isDeleted">Filter deleted orders (optional)</param>
        /// <param name="shippingCountryIso3">Retrieve entities according to shipping country (optional)</param>
        /// <param name="enableCache">If the value is &#39;true&#39;, we will cache orders for a 15 minutes in order to increase speed and reduce requests throttling for some methods and shoping platforms (for example order.shipment.add) (optional, default to false)</param>
        /// <param name="deliveryMethod">Retrieves order with delivery method (optional)</param>
        /// <param name="tags">Order tags (optional)</param>
        /// <param name="shipNodeType">Retrieves order with ship node type (optional)</param>
        /// <param name="currencyId">Currency Id (optional)</param>
        /// <param name="returnStatus">Retrieves orders specified by return status (optional)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelResponseOrderList)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModelResponseOrderList>> OrderListWithHttpInfoAsync(string? customerId = default(string?), string? customerEmail = default(string?), string? phone = default(string?), string? orderStatus = default(string?), List<string>? orderStatusIds = default(List<string>?), int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? createdTo = default(string?), string? createdFrom = default(string?), string? modifiedTo = default(string?), string? modifiedFrom = default(string?), string? storeId = default(string?), string? ids = default(string?), string? orderIds = default(string?), string? ebayOrderStatus = default(string?), string? basketId = default(string?), string? financialStatus = default(string?), List<string>? financialStatusIds = default(List<string>?), string? fulfillmentStatus = default(string?), string? fulfillmentChannel = default(string?), string? shippingMethod = default(string?), string? skipOrderIds = default(string?), string? sinceId = default(string?), bool? isDeleted = default(bool?), string? shippingCountryIso3 = default(string?), bool? enableCache = default(bool?), string? deliveryMethod = default(string?), string? tags = default(string?), string? shipNodeType = default(string?), string? currencyId = default(string?), string? returnStatus = default(string?), bool? useLatestApiVersion = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (customerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "customer_id", customerId));
            }
            if (customerEmail != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "customer_email", customerEmail));
            }
            if (phone != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "phone", phone));
            }
            if (orderStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order_status", orderStatus));
            }
            if (orderStatusIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "order_status_ids", orderStatusIds));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (pageCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_cursor", pageCursor));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sort_direction", sortDirection));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }
            if (createdTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_to", createdTo));
            }
            if (createdFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_from", createdFrom));
            }
            if (modifiedTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_to", modifiedTo));
            }
            if (modifiedFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_from", modifiedFrom));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (orderIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order_ids", orderIds));
            }
            if (ebayOrderStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ebay_order_status", ebayOrderStatus));
            }
            if (basketId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "basket_id", basketId));
            }
            if (financialStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "financial_status", financialStatus));
            }
            if (financialStatusIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "financial_status_ids", financialStatusIds));
            }
            if (fulfillmentStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fulfillment_status", fulfillmentStatus));
            }
            if (fulfillmentChannel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fulfillment_channel", fulfillmentChannel));
            }
            if (shippingMethod != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "shipping_method", shippingMethod));
            }
            if (skipOrderIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "skip_order_ids", skipOrderIds));
            }
            if (sinceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "since_id", sinceId));
            }
            if (isDeleted != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "is_deleted", isDeleted));
            }
            if (shippingCountryIso3 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "shipping_country_iso3", shippingCountryIso3));
            }
            if (enableCache != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "enable_cache", enableCache));
            }
            if (deliveryMethod != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "delivery_method", deliveryMethod));
            }
            if (tags != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tags", tags));
            }
            if (shipNodeType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ship_node_type", shipNodeType));
            }
            if (currencyId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "currency_id", currencyId));
            }
            if (returnStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "return_status", returnStatus));
            }
            if (useLatestApiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "use_latest_api_version", useLatestApiVersion));
            }

            localVarRequestOptions.Operation = "OrderApi.OrderList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ModelResponseOrderList>("/order.list.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// order.preestimate_shipping.list Retrieve list of order preestimated shipping methods
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderPreestimateShippingList"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelResponseOrderPreestimateShippingList</returns>
        public ModelResponseOrderPreestimateShippingList OrderPreestimateShippingList(OrderPreestimateShippingList orderPreestimateShippingList, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModelResponseOrderPreestimateShippingList> localVarResponse = OrderPreestimateShippingListWithHttpInfo(orderPreestimateShippingList);
            return localVarResponse.Data;
        }

        /// <summary>
        /// order.preestimate_shipping.list Retrieve list of order preestimated shipping methods
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderPreestimateShippingList"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelResponseOrderPreestimateShippingList</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModelResponseOrderPreestimateShippingList> OrderPreestimateShippingListWithHttpInfo(OrderPreestimateShippingList orderPreestimateShippingList, int operationIndex = 0)
        {
            // verify the required parameter 'orderPreestimateShippingList' is set
            if (orderPreestimateShippingList == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'orderPreestimateShippingList' when calling OrderApi->OrderPreestimateShippingList");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = orderPreestimateShippingList;

            localVarRequestOptions.Operation = "OrderApi.OrderPreestimateShippingList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModelResponseOrderPreestimateShippingList>("/order.preestimate_shipping.list.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderPreestimateShippingList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// order.preestimate_shipping.list Retrieve list of order preestimated shipping methods
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderPreestimateShippingList"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelResponseOrderPreestimateShippingList</returns>
        public async System.Threading.Tasks.Task<ModelResponseOrderPreestimateShippingList> OrderPreestimateShippingListAsync(OrderPreestimateShippingList orderPreestimateShippingList, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModelResponseOrderPreestimateShippingList> localVarResponse = await OrderPreestimateShippingListWithHttpInfoAsync(orderPreestimateShippingList, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// order.preestimate_shipping.list Retrieve list of order preestimated shipping methods
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderPreestimateShippingList"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelResponseOrderPreestimateShippingList)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModelResponseOrderPreestimateShippingList>> OrderPreestimateShippingListWithHttpInfoAsync(OrderPreestimateShippingList orderPreestimateShippingList, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'orderPreestimateShippingList' is set
            if (orderPreestimateShippingList == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'orderPreestimateShippingList' when calling OrderApi->OrderPreestimateShippingList");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = orderPreestimateShippingList;

            localVarRequestOptions.Operation = "OrderApi.OrderPreestimateShippingList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModelResponseOrderPreestimateShippingList>("/order.preestimate_shipping.list.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderPreestimateShippingList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// order.refund.add Add a refund to the order.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRefundAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrderRefundAdd200Response</returns>
        public OrderRefundAdd200Response OrderRefundAdd(OrderRefundAdd orderRefundAdd, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<OrderRefundAdd200Response> localVarResponse = OrderRefundAddWithHttpInfo(orderRefundAdd);
            return localVarResponse.Data;
        }

        /// <summary>
        /// order.refund.add Add a refund to the order.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRefundAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrderRefundAdd200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<OrderRefundAdd200Response> OrderRefundAddWithHttpInfo(OrderRefundAdd orderRefundAdd, int operationIndex = 0)
        {
            // verify the required parameter 'orderRefundAdd' is set
            if (orderRefundAdd == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'orderRefundAdd' when calling OrderApi->OrderRefundAdd");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = orderRefundAdd;

            localVarRequestOptions.Operation = "OrderApi.OrderRefundAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OrderRefundAdd200Response>("/order.refund.add.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderRefundAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// order.refund.add Add a refund to the order.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRefundAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderRefundAdd200Response</returns>
        public async System.Threading.Tasks.Task<OrderRefundAdd200Response> OrderRefundAddAsync(OrderRefundAdd orderRefundAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<OrderRefundAdd200Response> localVarResponse = await OrderRefundAddWithHttpInfoAsync(orderRefundAdd, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// order.refund.add Add a refund to the order.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderRefundAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderRefundAdd200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<OrderRefundAdd200Response>> OrderRefundAddWithHttpInfoAsync(OrderRefundAdd orderRefundAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'orderRefundAdd' is set
            if (orderRefundAdd == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'orderRefundAdd' when calling OrderApi->OrderRefundAdd");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = orderRefundAdd;

            localVarRequestOptions.Operation = "OrderApi.OrderRefundAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OrderRefundAdd200Response>("/order.refund.add.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderRefundAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// order.return.add Create new return request.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderReturnAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrderReturnAdd200Response</returns>
        public OrderReturnAdd200Response OrderReturnAdd(OrderReturnAdd orderReturnAdd, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<OrderReturnAdd200Response> localVarResponse = OrderReturnAddWithHttpInfo(orderReturnAdd);
            return localVarResponse.Data;
        }

        /// <summary>
        /// order.return.add Create new return request.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderReturnAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrderReturnAdd200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<OrderReturnAdd200Response> OrderReturnAddWithHttpInfo(OrderReturnAdd orderReturnAdd, int operationIndex = 0)
        {
            // verify the required parameter 'orderReturnAdd' is set
            if (orderReturnAdd == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'orderReturnAdd' when calling OrderApi->OrderReturnAdd");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = orderReturnAdd;

            localVarRequestOptions.Operation = "OrderApi.OrderReturnAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OrderReturnAdd200Response>("/order.return.add.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderReturnAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// order.return.add Create new return request.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderReturnAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderReturnAdd200Response</returns>
        public async System.Threading.Tasks.Task<OrderReturnAdd200Response> OrderReturnAddAsync(OrderReturnAdd orderReturnAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<OrderReturnAdd200Response> localVarResponse = await OrderReturnAddWithHttpInfoAsync(orderReturnAdd, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// order.return.add Create new return request.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderReturnAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderReturnAdd200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<OrderReturnAdd200Response>> OrderReturnAddWithHttpInfoAsync(OrderReturnAdd orderReturnAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'orderReturnAdd' is set
            if (orderReturnAdd == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'orderReturnAdd' when calling OrderApi->OrderReturnAdd");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = orderReturnAdd;

            localVarRequestOptions.Operation = "OrderApi.OrderReturnAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OrderReturnAdd200Response>("/order.return.add.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderReturnAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// order.return.delete Delete return.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnId">Return ID</param>
        /// <param name="orderId">Defines the order id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttributeValueDelete200Response</returns>
        public AttributeValueDelete200Response OrderReturnDelete(string returnId, string orderId, string? storeId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AttributeValueDelete200Response> localVarResponse = OrderReturnDeleteWithHttpInfo(returnId, orderId, storeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// order.return.delete Delete return.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnId">Return ID</param>
        /// <param name="orderId">Defines the order id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttributeValueDelete200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<AttributeValueDelete200Response> OrderReturnDeleteWithHttpInfo(string returnId, string orderId, string? storeId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'returnId' is set
            if (returnId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'returnId' when calling OrderApi->OrderReturnDelete");
            }

            // verify the required parameter 'orderId' is set
            if (orderId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->OrderReturnDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "return_id", returnId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order_id", orderId));
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }

            localVarRequestOptions.Operation = "OrderApi.OrderReturnDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<AttributeValueDelete200Response>("/order.return.delete.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderReturnDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// order.return.delete Delete return.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnId">Return ID</param>
        /// <param name="orderId">Defines the order id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttributeValueDelete200Response</returns>
        public async System.Threading.Tasks.Task<AttributeValueDelete200Response> OrderReturnDeleteAsync(string returnId, string orderId, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AttributeValueDelete200Response> localVarResponse = await OrderReturnDeleteWithHttpInfoAsync(returnId, orderId, storeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// order.return.delete Delete return.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnId">Return ID</param>
        /// <param name="orderId">Defines the order id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttributeValueDelete200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AttributeValueDelete200Response>> OrderReturnDeleteWithHttpInfoAsync(string returnId, string orderId, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'returnId' is set
            if (returnId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'returnId' when calling OrderApi->OrderReturnDelete");
            }

            // verify the required parameter 'orderId' is set
            if (orderId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->OrderReturnDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "return_id", returnId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order_id", orderId));
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }

            localVarRequestOptions.Operation = "OrderApi.OrderReturnDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<AttributeValueDelete200Response>("/order.return.delete.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderReturnDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// order.return.update Update order&#39;s shipment information.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderReturnUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountConfigUpdate200Response</returns>
        public AccountConfigUpdate200Response OrderReturnUpdate(OrderReturnUpdate orderReturnUpdate, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AccountConfigUpdate200Response> localVarResponse = OrderReturnUpdateWithHttpInfo(orderReturnUpdate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// order.return.update Update order&#39;s shipment information.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderReturnUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountConfigUpdate200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<AccountConfigUpdate200Response> OrderReturnUpdateWithHttpInfo(OrderReturnUpdate orderReturnUpdate, int operationIndex = 0)
        {
            // verify the required parameter 'orderReturnUpdate' is set
            if (orderReturnUpdate == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'orderReturnUpdate' when calling OrderApi->OrderReturnUpdate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = orderReturnUpdate;

            localVarRequestOptions.Operation = "OrderApi.OrderReturnUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<AccountConfigUpdate200Response>("/order.return.update.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderReturnUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// order.return.update Update order&#39;s shipment information.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderReturnUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountConfigUpdate200Response</returns>
        public async System.Threading.Tasks.Task<AccountConfigUpdate200Response> OrderReturnUpdateAsync(OrderReturnUpdate orderReturnUpdate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AccountConfigUpdate200Response> localVarResponse = await OrderReturnUpdateWithHttpInfoAsync(orderReturnUpdate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// order.return.update Update order&#39;s shipment information.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderReturnUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountConfigUpdate200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AccountConfigUpdate200Response>> OrderReturnUpdateWithHttpInfoAsync(OrderReturnUpdate orderReturnUpdate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'orderReturnUpdate' is set
            if (orderReturnUpdate == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'orderReturnUpdate' when calling OrderApi->OrderReturnUpdate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = orderReturnUpdate;

            localVarRequestOptions.Operation = "OrderApi.OrderReturnUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<AccountConfigUpdate200Response>("/order.return.update.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderReturnUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// order.shipment.add Add a shipment to the order.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderShipmentAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrderShipmentAdd200Response</returns>
        public OrderShipmentAdd200Response OrderShipmentAdd(OrderShipmentAdd orderShipmentAdd, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<OrderShipmentAdd200Response> localVarResponse = OrderShipmentAddWithHttpInfo(orderShipmentAdd);
            return localVarResponse.Data;
        }

        /// <summary>
        /// order.shipment.add Add a shipment to the order.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderShipmentAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrderShipmentAdd200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<OrderShipmentAdd200Response> OrderShipmentAddWithHttpInfo(OrderShipmentAdd orderShipmentAdd, int operationIndex = 0)
        {
            // verify the required parameter 'orderShipmentAdd' is set
            if (orderShipmentAdd == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'orderShipmentAdd' when calling OrderApi->OrderShipmentAdd");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = orderShipmentAdd;

            localVarRequestOptions.Operation = "OrderApi.OrderShipmentAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OrderShipmentAdd200Response>("/order.shipment.add.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderShipmentAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// order.shipment.add Add a shipment to the order.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderShipmentAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderShipmentAdd200Response</returns>
        public async System.Threading.Tasks.Task<OrderShipmentAdd200Response> OrderShipmentAddAsync(OrderShipmentAdd orderShipmentAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<OrderShipmentAdd200Response> localVarResponse = await OrderShipmentAddWithHttpInfoAsync(orderShipmentAdd, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// order.shipment.add Add a shipment to the order.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderShipmentAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderShipmentAdd200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<OrderShipmentAdd200Response>> OrderShipmentAddWithHttpInfoAsync(OrderShipmentAdd orderShipmentAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'orderShipmentAdd' is set
            if (orderShipmentAdd == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'orderShipmentAdd' when calling OrderApi->OrderShipmentAdd");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = orderShipmentAdd;

            localVarRequestOptions.Operation = "OrderApi.OrderShipmentAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OrderShipmentAdd200Response>("/order.shipment.add.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderShipmentAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// order.shipment.add.batch Add a shipments to the orders.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderShipmentAddBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoryAddBatch200Response</returns>
        public CategoryAddBatch200Response OrderShipmentAddBatch(OrderShipmentAddBatch orderShipmentAddBatch, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CategoryAddBatch200Response> localVarResponse = OrderShipmentAddBatchWithHttpInfo(orderShipmentAddBatch);
            return localVarResponse.Data;
        }

        /// <summary>
        /// order.shipment.add.batch Add a shipments to the orders.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderShipmentAddBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoryAddBatch200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<CategoryAddBatch200Response> OrderShipmentAddBatchWithHttpInfo(OrderShipmentAddBatch orderShipmentAddBatch, int operationIndex = 0)
        {
            // verify the required parameter 'orderShipmentAddBatch' is set
            if (orderShipmentAddBatch == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'orderShipmentAddBatch' when calling OrderApi->OrderShipmentAddBatch");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = orderShipmentAddBatch;

            localVarRequestOptions.Operation = "OrderApi.OrderShipmentAddBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CategoryAddBatch200Response>("/order.shipment.add.batch.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderShipmentAddBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// order.shipment.add.batch Add a shipments to the orders.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderShipmentAddBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryAddBatch200Response</returns>
        public async System.Threading.Tasks.Task<CategoryAddBatch200Response> OrderShipmentAddBatchAsync(OrderShipmentAddBatch orderShipmentAddBatch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CategoryAddBatch200Response> localVarResponse = await OrderShipmentAddBatchWithHttpInfoAsync(orderShipmentAddBatch, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// order.shipment.add.batch Add a shipments to the orders.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderShipmentAddBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryAddBatch200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CategoryAddBatch200Response>> OrderShipmentAddBatchWithHttpInfoAsync(OrderShipmentAddBatch orderShipmentAddBatch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'orderShipmentAddBatch' is set
            if (orderShipmentAddBatch == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'orderShipmentAddBatch' when calling OrderApi->OrderShipmentAddBatch");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = orderShipmentAddBatch;

            localVarRequestOptions.Operation = "OrderApi.OrderShipmentAddBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CategoryAddBatch200Response>("/order.shipment.add.batch.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderShipmentAddBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// order.shipment.delete Delete order&#39;s shipment.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">Shipment id indicates the number of delivery</param>
        /// <param name="orderId">Defines the order for which the shipment will be deleted</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrderShipmentDelete200Response</returns>
        public OrderShipmentDelete200Response OrderShipmentDelete(string shipmentId, string orderId, string? storeId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<OrderShipmentDelete200Response> localVarResponse = OrderShipmentDeleteWithHttpInfo(shipmentId, orderId, storeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// order.shipment.delete Delete order&#39;s shipment.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">Shipment id indicates the number of delivery</param>
        /// <param name="orderId">Defines the order for which the shipment will be deleted</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrderShipmentDelete200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<OrderShipmentDelete200Response> OrderShipmentDeleteWithHttpInfo(string shipmentId, string orderId, string? storeId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling OrderApi->OrderShipmentDelete");
            }

            // verify the required parameter 'orderId' is set
            if (orderId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->OrderShipmentDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "shipment_id", shipmentId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order_id", orderId));
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }

            localVarRequestOptions.Operation = "OrderApi.OrderShipmentDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<OrderShipmentDelete200Response>("/order.shipment.delete.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderShipmentDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// order.shipment.delete Delete order&#39;s shipment.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">Shipment id indicates the number of delivery</param>
        /// <param name="orderId">Defines the order for which the shipment will be deleted</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderShipmentDelete200Response</returns>
        public async System.Threading.Tasks.Task<OrderShipmentDelete200Response> OrderShipmentDeleteAsync(string shipmentId, string orderId, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<OrderShipmentDelete200Response> localVarResponse = await OrderShipmentDeleteWithHttpInfoAsync(shipmentId, orderId, storeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// order.shipment.delete Delete order&#39;s shipment.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">Shipment id indicates the number of delivery</param>
        /// <param name="orderId">Defines the order for which the shipment will be deleted</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderShipmentDelete200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<OrderShipmentDelete200Response>> OrderShipmentDeleteWithHttpInfoAsync(string shipmentId, string orderId, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling OrderApi->OrderShipmentDelete");
            }

            // verify the required parameter 'orderId' is set
            if (orderId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->OrderShipmentDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "shipment_id", shipmentId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order_id", orderId));
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }

            localVarRequestOptions.Operation = "OrderApi.OrderShipmentDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<OrderShipmentDelete200Response>("/order.shipment.delete.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderShipmentDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// order.shipment.info Get information of shipment.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="orderId">Defines the order id</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,order_id,items,tracking_numbers&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrderShipmentInfo200Response</returns>
        public OrderShipmentInfo200Response OrderShipmentInfo(string id, string orderId, int? start = default(int?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? storeId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<OrderShipmentInfo200Response> localVarResponse = OrderShipmentInfoWithHttpInfo(id, orderId, start, varParams, responseFields, exclude, storeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// order.shipment.info Get information of shipment.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="orderId">Defines the order id</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,order_id,items,tracking_numbers&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrderShipmentInfo200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<OrderShipmentInfo200Response> OrderShipmentInfoWithHttpInfo(string id, string orderId, int? start = default(int?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? storeId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling OrderApi->OrderShipmentInfo");
            }

            // verify the required parameter 'orderId' is set
            if (orderId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->OrderShipmentInfo");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order_id", orderId));
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }

            localVarRequestOptions.Operation = "OrderApi.OrderShipmentInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OrderShipmentInfo200Response>("/order.shipment.info.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderShipmentInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// order.shipment.info Get information of shipment.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="orderId">Defines the order id</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,order_id,items,tracking_numbers&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderShipmentInfo200Response</returns>
        public async System.Threading.Tasks.Task<OrderShipmentInfo200Response> OrderShipmentInfoAsync(string id, string orderId, int? start = default(int?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<OrderShipmentInfo200Response> localVarResponse = await OrderShipmentInfoWithHttpInfoAsync(id, orderId, start, varParams, responseFields, exclude, storeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// order.shipment.info Get information of shipment.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="orderId">Defines the order id</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,order_id,items,tracking_numbers&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderShipmentInfo200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<OrderShipmentInfo200Response>> OrderShipmentInfoWithHttpInfoAsync(string id, string orderId, int? start = default(int?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling OrderApi->OrderShipmentInfo");
            }

            // verify the required parameter 'orderId' is set
            if (orderId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->OrderShipmentInfo");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order_id", orderId));
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }

            localVarRequestOptions.Operation = "OrderApi.OrderShipmentInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OrderShipmentInfo200Response>("/order.shipment.info.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderShipmentInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// order.shipment.list Get list of shipments by orders.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Retrieves shipments specified by order id</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,order_id,items,tracking_numbers&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelResponseOrderShipmentList</returns>
        public ModelResponseOrderShipmentList OrderShipmentList(string orderId, string? pageCursor = default(string?), int? start = default(int?), int? count = default(int?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), string? storeId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModelResponseOrderShipmentList> localVarResponse = OrderShipmentListWithHttpInfo(orderId, pageCursor, start, count, varParams, responseFields, exclude, createdFrom, createdTo, modifiedFrom, modifiedTo, storeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// order.shipment.list Get list of shipments by orders.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Retrieves shipments specified by order id</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,order_id,items,tracking_numbers&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelResponseOrderShipmentList</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModelResponseOrderShipmentList> OrderShipmentListWithHttpInfo(string orderId, string? pageCursor = default(string?), int? start = default(int?), int? count = default(int?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), string? storeId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->OrderShipmentList");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order_id", orderId));
            if (pageCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_cursor", pageCursor));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }
            if (createdFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_from", createdFrom));
            }
            if (createdTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_to", createdTo));
            }
            if (modifiedFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_from", modifiedFrom));
            }
            if (modifiedTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_to", modifiedTo));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }

            localVarRequestOptions.Operation = "OrderApi.OrderShipmentList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ModelResponseOrderShipmentList>("/order.shipment.list.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderShipmentList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// order.shipment.list Get list of shipments by orders.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Retrieves shipments specified by order id</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,order_id,items,tracking_numbers&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelResponseOrderShipmentList</returns>
        public async System.Threading.Tasks.Task<ModelResponseOrderShipmentList> OrderShipmentListAsync(string orderId, string? pageCursor = default(string?), int? start = default(int?), int? count = default(int?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModelResponseOrderShipmentList> localVarResponse = await OrderShipmentListWithHttpInfoAsync(orderId, pageCursor, start, count, varParams, responseFields, exclude, createdFrom, createdTo, modifiedFrom, modifiedTo, storeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// order.shipment.list Get list of shipments by orders.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Retrieves shipments specified by order id</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,order_id,items,tracking_numbers&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelResponseOrderShipmentList)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModelResponseOrderShipmentList>> OrderShipmentListWithHttpInfoAsync(string orderId, string? pageCursor = default(string?), int? start = default(int?), int? count = default(int?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->OrderShipmentList");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order_id", orderId));
            if (pageCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_cursor", pageCursor));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }
            if (createdFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_from", createdFrom));
            }
            if (createdTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_to", createdTo));
            }
            if (modifiedFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_from", modifiedFrom));
            }
            if (modifiedTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_to", modifiedTo));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }

            localVarRequestOptions.Operation = "OrderApi.OrderShipmentList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ModelResponseOrderShipmentList>("/order.shipment.list.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderShipmentList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// order.shipment.tracking.add Add order shipment&#39;s tracking info.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderShipmentTrackingAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrderShipmentTrackingAdd200Response</returns>
        public OrderShipmentTrackingAdd200Response OrderShipmentTrackingAdd(OrderShipmentTrackingAdd orderShipmentTrackingAdd, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<OrderShipmentTrackingAdd200Response> localVarResponse = OrderShipmentTrackingAddWithHttpInfo(orderShipmentTrackingAdd);
            return localVarResponse.Data;
        }

        /// <summary>
        /// order.shipment.tracking.add Add order shipment&#39;s tracking info.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderShipmentTrackingAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrderShipmentTrackingAdd200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<OrderShipmentTrackingAdd200Response> OrderShipmentTrackingAddWithHttpInfo(OrderShipmentTrackingAdd orderShipmentTrackingAdd, int operationIndex = 0)
        {
            // verify the required parameter 'orderShipmentTrackingAdd' is set
            if (orderShipmentTrackingAdd == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'orderShipmentTrackingAdd' when calling OrderApi->OrderShipmentTrackingAdd");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = orderShipmentTrackingAdd;

            localVarRequestOptions.Operation = "OrderApi.OrderShipmentTrackingAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OrderShipmentTrackingAdd200Response>("/order.shipment.tracking.add.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderShipmentTrackingAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// order.shipment.tracking.add Add order shipment&#39;s tracking info.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderShipmentTrackingAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderShipmentTrackingAdd200Response</returns>
        public async System.Threading.Tasks.Task<OrderShipmentTrackingAdd200Response> OrderShipmentTrackingAddAsync(OrderShipmentTrackingAdd orderShipmentTrackingAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<OrderShipmentTrackingAdd200Response> localVarResponse = await OrderShipmentTrackingAddWithHttpInfoAsync(orderShipmentTrackingAdd, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// order.shipment.tracking.add Add order shipment&#39;s tracking info.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderShipmentTrackingAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderShipmentTrackingAdd200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<OrderShipmentTrackingAdd200Response>> OrderShipmentTrackingAddWithHttpInfoAsync(OrderShipmentTrackingAdd orderShipmentTrackingAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'orderShipmentTrackingAdd' is set
            if (orderShipmentTrackingAdd == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'orderShipmentTrackingAdd' when calling OrderApi->OrderShipmentTrackingAdd");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = orderShipmentTrackingAdd;

            localVarRequestOptions.Operation = "OrderApi.OrderShipmentTrackingAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OrderShipmentTrackingAdd200Response>("/order.shipment.tracking.add.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderShipmentTrackingAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// order.shipment.update Update order&#39;s shipment information.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderShipmentUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountConfigUpdate200Response</returns>
        public AccountConfigUpdate200Response OrderShipmentUpdate(OrderShipmentUpdate orderShipmentUpdate, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AccountConfigUpdate200Response> localVarResponse = OrderShipmentUpdateWithHttpInfo(orderShipmentUpdate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// order.shipment.update Update order&#39;s shipment information.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderShipmentUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountConfigUpdate200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<AccountConfigUpdate200Response> OrderShipmentUpdateWithHttpInfo(OrderShipmentUpdate orderShipmentUpdate, int operationIndex = 0)
        {
            // verify the required parameter 'orderShipmentUpdate' is set
            if (orderShipmentUpdate == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'orderShipmentUpdate' when calling OrderApi->OrderShipmentUpdate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = orderShipmentUpdate;

            localVarRequestOptions.Operation = "OrderApi.OrderShipmentUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<AccountConfigUpdate200Response>("/order.shipment.update.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderShipmentUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// order.shipment.update Update order&#39;s shipment information.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderShipmentUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountConfigUpdate200Response</returns>
        public async System.Threading.Tasks.Task<AccountConfigUpdate200Response> OrderShipmentUpdateAsync(OrderShipmentUpdate orderShipmentUpdate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AccountConfigUpdate200Response> localVarResponse = await OrderShipmentUpdateWithHttpInfoAsync(orderShipmentUpdate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// order.shipment.update Update order&#39;s shipment information.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderShipmentUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountConfigUpdate200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AccountConfigUpdate200Response>> OrderShipmentUpdateWithHttpInfoAsync(OrderShipmentUpdate orderShipmentUpdate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'orderShipmentUpdate' is set
            if (orderShipmentUpdate == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'orderShipmentUpdate' when calling OrderApi->OrderShipmentUpdate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = orderShipmentUpdate;

            localVarRequestOptions.Operation = "OrderApi.OrderShipmentUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<AccountConfigUpdate200Response>("/order.shipment.update.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderShipmentUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// order.status.list Retrieve list of statuses
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="action">Available statuses for the specified action. (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelResponseOrderStatusList</returns>
        public ModelResponseOrderStatusList OrderStatusList(string? storeId = default(string?), string? action = default(string?), string? responseFields = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModelResponseOrderStatusList> localVarResponse = OrderStatusListWithHttpInfo(storeId, action, responseFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// order.status.list Retrieve list of statuses
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="action">Available statuses for the specified action. (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelResponseOrderStatusList</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModelResponseOrderStatusList> OrderStatusListWithHttpInfo(string? storeId = default(string?), string? action = default(string?), string? responseFields = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (action != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "action", action));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }

            localVarRequestOptions.Operation = "OrderApi.OrderStatusList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ModelResponseOrderStatusList>("/order.status.list.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderStatusList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// order.status.list Retrieve list of statuses
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="action">Available statuses for the specified action. (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelResponseOrderStatusList</returns>
        public async System.Threading.Tasks.Task<ModelResponseOrderStatusList> OrderStatusListAsync(string? storeId = default(string?), string? action = default(string?), string? responseFields = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModelResponseOrderStatusList> localVarResponse = await OrderStatusListWithHttpInfoAsync(storeId, action, responseFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// order.status.list Retrieve list of statuses
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="action">Available statuses for the specified action. (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelResponseOrderStatusList)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModelResponseOrderStatusList>> OrderStatusListWithHttpInfoAsync(string? storeId = default(string?), string? action = default(string?), string? responseFields = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (action != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "action", action));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }

            localVarRequestOptions.Operation = "OrderApi.OrderStatusList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ModelResponseOrderStatusList>("/order.status.list.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderStatusList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// order.transaction.list Retrieve list of order transaction
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderIds">Retrieves order transactions specified by order ids</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,order_id,amount,description&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelResponseOrderTransactionList</returns>
        public ModelResponseOrderTransactionList OrderTransactionList(string orderIds, int? count = default(int?), string? storeId = default(string?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? pageCursor = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModelResponseOrderTransactionList> localVarResponse = OrderTransactionListWithHttpInfo(orderIds, count, storeId, varParams, responseFields, exclude, pageCursor);
            return localVarResponse.Data;
        }

        /// <summary>
        /// order.transaction.list Retrieve list of order transaction
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderIds">Retrieves order transactions specified by order ids</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,order_id,amount,description&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelResponseOrderTransactionList</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModelResponseOrderTransactionList> OrderTransactionListWithHttpInfo(string orderIds, int? count = default(int?), string? storeId = default(string?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? pageCursor = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'orderIds' is set
            if (orderIds == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'orderIds' when calling OrderApi->OrderTransactionList");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order_ids", orderIds));
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }
            if (pageCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_cursor", pageCursor));
            }

            localVarRequestOptions.Operation = "OrderApi.OrderTransactionList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ModelResponseOrderTransactionList>("/order.transaction.list.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderTransactionList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// order.transaction.list Retrieve list of order transaction
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderIds">Retrieves order transactions specified by order ids</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,order_id,amount,description&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelResponseOrderTransactionList</returns>
        public async System.Threading.Tasks.Task<ModelResponseOrderTransactionList> OrderTransactionListAsync(string orderIds, int? count = default(int?), string? storeId = default(string?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? pageCursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModelResponseOrderTransactionList> localVarResponse = await OrderTransactionListWithHttpInfoAsync(orderIds, count, storeId, varParams, responseFields, exclude, pageCursor, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// order.transaction.list Retrieve list of order transaction
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderIds">Retrieves order transactions specified by order ids</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,order_id,amount,description&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelResponseOrderTransactionList)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModelResponseOrderTransactionList>> OrderTransactionListWithHttpInfoAsync(string orderIds, int? count = default(int?), string? storeId = default(string?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? pageCursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'orderIds' is set
            if (orderIds == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'orderIds' when calling OrderApi->OrderTransactionList");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order_ids", orderIds));
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }
            if (pageCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_cursor", pageCursor));
            }

            localVarRequestOptions.Operation = "OrderApi.OrderTransactionList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ModelResponseOrderTransactionList>("/order.transaction.list.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderTransactionList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// order.update Update existing order.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Defines the orders specified by order id</param>
        /// <param name="storeId">Defines store id where the order should be found (optional)</param>
        /// <param name="orderStatus">Defines new order&#39;s status (optional)</param>
        /// <param name="cancellationReason">Defines the cancellation reason when the order will be canceled (optional)</param>
        /// <param name="comment">Specifies order comment (optional)</param>
        /// <param name="adminComment">Specifies admin&#39;s order comment (optional)</param>
        /// <param name="adminPrivateComment">Specifies private admin&#39;s order comment (optional)</param>
        /// <param name="dateModified">Specifies order&#39;s  modification date (optional)</param>
        /// <param name="dateFinished">Specifies order&#39;s  finished date (optional)</param>
        /// <param name="financialStatus">Update order financial status to specified (optional)</param>
        /// <param name="fulfillmentStatus">Create order with fulfillment status (optional)</param>
        /// <param name="orderPaymentMethod">Defines order payment method.&lt;br/&gt;Setting order_payment_method on Shopify will also change financial_status field value to &#39;paid&#39; (optional)</param>
        /// <param name="sendNotifications">Send notifications to customer after order was created (optional, default to false)</param>
        /// <param name="origin">The source of the order (optional)</param>
        /// <param name="createInvoice">Determines whether an invoice should be created if it has not already been created (optional)</param>
        /// <param name="invoiceAdminComment">Specifies admin&#39;s order invoice comment (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountConfigUpdate200Response</returns>
        public AccountConfigUpdate200Response OrderUpdate(string orderId, string? storeId = default(string?), string? orderStatus = default(string?), string? cancellationReason = default(string?), string? comment = default(string?), string? adminComment = default(string?), string? adminPrivateComment = default(string?), string? dateModified = default(string?), string? dateFinished = default(string?), string? financialStatus = default(string?), string? fulfillmentStatus = default(string?), string? orderPaymentMethod = default(string?), bool? sendNotifications = default(bool?), string? origin = default(string?), bool? createInvoice = default(bool?), string? invoiceAdminComment = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AccountConfigUpdate200Response> localVarResponse = OrderUpdateWithHttpInfo(orderId, storeId, orderStatus, cancellationReason, comment, adminComment, adminPrivateComment, dateModified, dateFinished, financialStatus, fulfillmentStatus, orderPaymentMethod, sendNotifications, origin, createInvoice, invoiceAdminComment);
            return localVarResponse.Data;
        }

        /// <summary>
        /// order.update Update existing order.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Defines the orders specified by order id</param>
        /// <param name="storeId">Defines store id where the order should be found (optional)</param>
        /// <param name="orderStatus">Defines new order&#39;s status (optional)</param>
        /// <param name="cancellationReason">Defines the cancellation reason when the order will be canceled (optional)</param>
        /// <param name="comment">Specifies order comment (optional)</param>
        /// <param name="adminComment">Specifies admin&#39;s order comment (optional)</param>
        /// <param name="adminPrivateComment">Specifies private admin&#39;s order comment (optional)</param>
        /// <param name="dateModified">Specifies order&#39;s  modification date (optional)</param>
        /// <param name="dateFinished">Specifies order&#39;s  finished date (optional)</param>
        /// <param name="financialStatus">Update order financial status to specified (optional)</param>
        /// <param name="fulfillmentStatus">Create order with fulfillment status (optional)</param>
        /// <param name="orderPaymentMethod">Defines order payment method.&lt;br/&gt;Setting order_payment_method on Shopify will also change financial_status field value to &#39;paid&#39; (optional)</param>
        /// <param name="sendNotifications">Send notifications to customer after order was created (optional, default to false)</param>
        /// <param name="origin">The source of the order (optional)</param>
        /// <param name="createInvoice">Determines whether an invoice should be created if it has not already been created (optional)</param>
        /// <param name="invoiceAdminComment">Specifies admin&#39;s order invoice comment (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountConfigUpdate200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<AccountConfigUpdate200Response> OrderUpdateWithHttpInfo(string orderId, string? storeId = default(string?), string? orderStatus = default(string?), string? cancellationReason = default(string?), string? comment = default(string?), string? adminComment = default(string?), string? adminPrivateComment = default(string?), string? dateModified = default(string?), string? dateFinished = default(string?), string? financialStatus = default(string?), string? fulfillmentStatus = default(string?), string? orderPaymentMethod = default(string?), bool? sendNotifications = default(bool?), string? origin = default(string?), bool? createInvoice = default(bool?), string? invoiceAdminComment = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->OrderUpdate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order_id", orderId));
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (orderStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order_status", orderStatus));
            }
            if (cancellationReason != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "cancellation_reason", cancellationReason));
            }
            if (comment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "comment", comment));
            }
            if (adminComment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "admin_comment", adminComment));
            }
            if (adminPrivateComment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "admin_private_comment", adminPrivateComment));
            }
            if (dateModified != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "date_modified", dateModified));
            }
            if (dateFinished != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "date_finished", dateFinished));
            }
            if (financialStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "financial_status", financialStatus));
            }
            if (fulfillmentStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fulfillment_status", fulfillmentStatus));
            }
            if (orderPaymentMethod != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order_payment_method", orderPaymentMethod));
            }
            if (sendNotifications != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "send_notifications", sendNotifications));
            }
            if (origin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "origin", origin));
            }
            if (createInvoice != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "create_invoice", createInvoice));
            }
            if (invoiceAdminComment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "invoice_admin_comment", invoiceAdminComment));
            }

            localVarRequestOptions.Operation = "OrderApi.OrderUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<AccountConfigUpdate200Response>("/order.update.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// order.update Update existing order.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Defines the orders specified by order id</param>
        /// <param name="storeId">Defines store id where the order should be found (optional)</param>
        /// <param name="orderStatus">Defines new order&#39;s status (optional)</param>
        /// <param name="cancellationReason">Defines the cancellation reason when the order will be canceled (optional)</param>
        /// <param name="comment">Specifies order comment (optional)</param>
        /// <param name="adminComment">Specifies admin&#39;s order comment (optional)</param>
        /// <param name="adminPrivateComment">Specifies private admin&#39;s order comment (optional)</param>
        /// <param name="dateModified">Specifies order&#39;s  modification date (optional)</param>
        /// <param name="dateFinished">Specifies order&#39;s  finished date (optional)</param>
        /// <param name="financialStatus">Update order financial status to specified (optional)</param>
        /// <param name="fulfillmentStatus">Create order with fulfillment status (optional)</param>
        /// <param name="orderPaymentMethod">Defines order payment method.&lt;br/&gt;Setting order_payment_method on Shopify will also change financial_status field value to &#39;paid&#39; (optional)</param>
        /// <param name="sendNotifications">Send notifications to customer after order was created (optional, default to false)</param>
        /// <param name="origin">The source of the order (optional)</param>
        /// <param name="createInvoice">Determines whether an invoice should be created if it has not already been created (optional)</param>
        /// <param name="invoiceAdminComment">Specifies admin&#39;s order invoice comment (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountConfigUpdate200Response</returns>
        public async System.Threading.Tasks.Task<AccountConfigUpdate200Response> OrderUpdateAsync(string orderId, string? storeId = default(string?), string? orderStatus = default(string?), string? cancellationReason = default(string?), string? comment = default(string?), string? adminComment = default(string?), string? adminPrivateComment = default(string?), string? dateModified = default(string?), string? dateFinished = default(string?), string? financialStatus = default(string?), string? fulfillmentStatus = default(string?), string? orderPaymentMethod = default(string?), bool? sendNotifications = default(bool?), string? origin = default(string?), bool? createInvoice = default(bool?), string? invoiceAdminComment = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AccountConfigUpdate200Response> localVarResponse = await OrderUpdateWithHttpInfoAsync(orderId, storeId, orderStatus, cancellationReason, comment, adminComment, adminPrivateComment, dateModified, dateFinished, financialStatus, fulfillmentStatus, orderPaymentMethod, sendNotifications, origin, createInvoice, invoiceAdminComment, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// order.update Update existing order.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Defines the orders specified by order id</param>
        /// <param name="storeId">Defines store id where the order should be found (optional)</param>
        /// <param name="orderStatus">Defines new order&#39;s status (optional)</param>
        /// <param name="cancellationReason">Defines the cancellation reason when the order will be canceled (optional)</param>
        /// <param name="comment">Specifies order comment (optional)</param>
        /// <param name="adminComment">Specifies admin&#39;s order comment (optional)</param>
        /// <param name="adminPrivateComment">Specifies private admin&#39;s order comment (optional)</param>
        /// <param name="dateModified">Specifies order&#39;s  modification date (optional)</param>
        /// <param name="dateFinished">Specifies order&#39;s  finished date (optional)</param>
        /// <param name="financialStatus">Update order financial status to specified (optional)</param>
        /// <param name="fulfillmentStatus">Create order with fulfillment status (optional)</param>
        /// <param name="orderPaymentMethod">Defines order payment method.&lt;br/&gt;Setting order_payment_method on Shopify will also change financial_status field value to &#39;paid&#39; (optional)</param>
        /// <param name="sendNotifications">Send notifications to customer after order was created (optional, default to false)</param>
        /// <param name="origin">The source of the order (optional)</param>
        /// <param name="createInvoice">Determines whether an invoice should be created if it has not already been created (optional)</param>
        /// <param name="invoiceAdminComment">Specifies admin&#39;s order invoice comment (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountConfigUpdate200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AccountConfigUpdate200Response>> OrderUpdateWithHttpInfoAsync(string orderId, string? storeId = default(string?), string? orderStatus = default(string?), string? cancellationReason = default(string?), string? comment = default(string?), string? adminComment = default(string?), string? adminPrivateComment = default(string?), string? dateModified = default(string?), string? dateFinished = default(string?), string? financialStatus = default(string?), string? fulfillmentStatus = default(string?), string? orderPaymentMethod = default(string?), bool? sendNotifications = default(bool?), string? origin = default(string?), bool? createInvoice = default(bool?), string? invoiceAdminComment = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->OrderUpdate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order_id", orderId));
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (orderStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order_status", orderStatus));
            }
            if (cancellationReason != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "cancellation_reason", cancellationReason));
            }
            if (comment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "comment", comment));
            }
            if (adminComment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "admin_comment", adminComment));
            }
            if (adminPrivateComment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "admin_private_comment", adminPrivateComment));
            }
            if (dateModified != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "date_modified", dateModified));
            }
            if (dateFinished != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "date_finished", dateFinished));
            }
            if (financialStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "financial_status", financialStatus));
            }
            if (fulfillmentStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fulfillment_status", fulfillmentStatus));
            }
            if (orderPaymentMethod != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order_payment_method", orderPaymentMethod));
            }
            if (sendNotifications != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "send_notifications", sendNotifications));
            }
            if (origin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "origin", origin));
            }
            if (createInvoice != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "create_invoice", createInvoice));
            }
            if (invoiceAdminComment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "invoice_admin_comment", invoiceAdminComment));
            }

            localVarRequestOptions.Operation = "OrderApi.OrderUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<AccountConfigUpdate200Response>("/order.update.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrderUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
