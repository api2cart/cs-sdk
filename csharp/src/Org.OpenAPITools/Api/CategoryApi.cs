/*
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICategoryApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// category.add
        /// </summary>
        /// <remarks>
        /// Add new category in store
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Defines category&#39;s name that has to be added</param>
        /// <param name="parentId">Adds categories specified by parent id (optional)</param>
        /// <param name="storesIds">Create category in the stores that is specified by comma-separated stores&#39; id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="avail">Defines category&#39;s visibility status (optional, default to true)</param>
        /// <param name="sortOrder">Sort number in the list (optional, default to 0)</param>
        /// <param name="createdTime">Entity&#39;s date creation (optional)</param>
        /// <param name="modifiedTime">Entity&#39;s date modification (optional)</param>
        /// <param name="description">Defines category&#39;s description (optional)</param>
        /// <param name="shortDescription">Defines short description (optional)</param>
        /// <param name="metaTitle">Defines unique meta title for each entity (optional)</param>
        /// <param name="metaDescription">Defines unique meta description of a entity (optional)</param>
        /// <param name="metaKeywords">Defines unique meta keywords for each entity (optional)</param>
        /// <param name="seoUrl">Defines unique category&#39;s URL for SEO (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoryAdd200Response</returns>
        CategoryAdd200Response CategoryAdd(string name, string? parentId = default(string?), string? storesIds = default(string?), string? storeId = default(string?), string? langId = default(string?), bool? avail = default(bool?), int? sortOrder = default(int?), string? createdTime = default(string?), string? modifiedTime = default(string?), string? description = default(string?), string? shortDescription = default(string?), string? metaTitle = default(string?), string? metaDescription = default(string?), string? metaKeywords = default(string?), string? seoUrl = default(string?), int operationIndex = 0);

        /// <summary>
        /// category.add
        /// </summary>
        /// <remarks>
        /// Add new category in store
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Defines category&#39;s name that has to be added</param>
        /// <param name="parentId">Adds categories specified by parent id (optional)</param>
        /// <param name="storesIds">Create category in the stores that is specified by comma-separated stores&#39; id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="avail">Defines category&#39;s visibility status (optional, default to true)</param>
        /// <param name="sortOrder">Sort number in the list (optional, default to 0)</param>
        /// <param name="createdTime">Entity&#39;s date creation (optional)</param>
        /// <param name="modifiedTime">Entity&#39;s date modification (optional)</param>
        /// <param name="description">Defines category&#39;s description (optional)</param>
        /// <param name="shortDescription">Defines short description (optional)</param>
        /// <param name="metaTitle">Defines unique meta title for each entity (optional)</param>
        /// <param name="metaDescription">Defines unique meta description of a entity (optional)</param>
        /// <param name="metaKeywords">Defines unique meta keywords for each entity (optional)</param>
        /// <param name="seoUrl">Defines unique category&#39;s URL for SEO (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoryAdd200Response</returns>
        ApiResponse<CategoryAdd200Response> CategoryAddWithHttpInfo(string name, string? parentId = default(string?), string? storesIds = default(string?), string? storeId = default(string?), string? langId = default(string?), bool? avail = default(bool?), int? sortOrder = default(int?), string? createdTime = default(string?), string? modifiedTime = default(string?), string? description = default(string?), string? shortDescription = default(string?), string? metaTitle = default(string?), string? metaDescription = default(string?), string? metaKeywords = default(string?), string? seoUrl = default(string?), int operationIndex = 0);
        /// <summary>
        /// category.add.batch
        /// </summary>
        /// <remarks>
        /// Add new categories to the store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryAddBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoryAddBatch200Response</returns>
        CategoryAddBatch200Response CategoryAddBatch(CategoryAddBatch categoryAddBatch, int operationIndex = 0);

        /// <summary>
        /// category.add.batch
        /// </summary>
        /// <remarks>
        /// Add new categories to the store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryAddBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoryAddBatch200Response</returns>
        ApiResponse<CategoryAddBatch200Response> CategoryAddBatchWithHttpInfo(CategoryAddBatch categoryAddBatch, int operationIndex = 0);
        /// <summary>
        /// category.assign
        /// </summary>
        /// <remarks>
        /// Assign category to product
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines category assign to the product, specified by product id</param>
        /// <param name="categoryId">Defines category assign, specified by category id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CartConfigUpdate200Response</returns>
        CartConfigUpdate200Response CategoryAssign(string productId, string categoryId, string? storeId = default(string?), int operationIndex = 0);

        /// <summary>
        /// category.assign
        /// </summary>
        /// <remarks>
        /// Assign category to product
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines category assign to the product, specified by product id</param>
        /// <param name="categoryId">Defines category assign, specified by category id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CartConfigUpdate200Response</returns>
        ApiResponse<CartConfigUpdate200Response> CategoryAssignWithHttpInfo(string productId, string categoryId, string? storeId = default(string?), int operationIndex = 0);
        /// <summary>
        /// category.count
        /// </summary>
        /// <remarks>
        /// Count categories in store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">Counts categories specified by parent id (optional)</param>
        /// <param name="storeId">Counts category specified by store id (optional)</param>
        /// <param name="langId">Counts category specified by language id (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="avail">Defines category&#39;s visibility status (optional, default to true)</param>
        /// <param name="productType">A categorization for the product (optional)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Counts categories that are searched specified by field (optional)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoryCount200Response</returns>
        CategoryCount200Response CategoryCount(string? parentId = default(string?), string? storeId = default(string?), string? langId = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), bool? avail = default(bool?), string? productType = default(string?), string? findValue = default(string?), string? findWhere = default(string?), string? reportRequestId = default(string?), bool? disableReportCache = default(bool?), int operationIndex = 0);

        /// <summary>
        /// category.count
        /// </summary>
        /// <remarks>
        /// Count categories in store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">Counts categories specified by parent id (optional)</param>
        /// <param name="storeId">Counts category specified by store id (optional)</param>
        /// <param name="langId">Counts category specified by language id (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="avail">Defines category&#39;s visibility status (optional, default to true)</param>
        /// <param name="productType">A categorization for the product (optional)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Counts categories that are searched specified by field (optional)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoryCount200Response</returns>
        ApiResponse<CategoryCount200Response> CategoryCountWithHttpInfo(string? parentId = default(string?), string? storeId = default(string?), string? langId = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), bool? avail = default(bool?), string? productType = default(string?), string? findValue = default(string?), string? findWhere = default(string?), string? reportRequestId = default(string?), bool? disableReportCache = default(bool?), int operationIndex = 0);
        /// <summary>
        /// category.delete
        /// </summary>
        /// <remarks>
        /// Delete category in store
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Defines category removal, specified by category id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoryDelete200Response</returns>
        CategoryDelete200Response CategoryDelete(string id, string? storeId = default(string?), int operationIndex = 0);

        /// <summary>
        /// category.delete
        /// </summary>
        /// <remarks>
        /// Delete category in store
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Defines category removal, specified by category id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoryDelete200Response</returns>
        ApiResponse<CategoryDelete200Response> CategoryDeleteWithHttpInfo(string id, string? storeId = default(string?), int operationIndex = 0);
        /// <summary>
        /// category.find
        /// </summary>
        /// <remarks>
        /// Search category in store. \&quot;Laptop\&quot; is specified here by default.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findValue">Entity search that is specified by some value</param>
        /// <param name="findWhere">Entity search that is specified by the comma-separated unique fields (optional, default to &quot;name&quot;)</param>
        /// <param name="findParams">Entity search that is specified by comma-separated parameters (optional, default to &quot;whole_words&quot;)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoryFind200Response</returns>
        CategoryFind200Response CategoryFind(string findValue, string? findWhere = default(string?), string? findParams = default(string?), string? storeId = default(string?), string? langId = default(string?), int operationIndex = 0);

        /// <summary>
        /// category.find
        /// </summary>
        /// <remarks>
        /// Search category in store. \&quot;Laptop\&quot; is specified here by default.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findValue">Entity search that is specified by some value</param>
        /// <param name="findWhere">Entity search that is specified by the comma-separated unique fields (optional, default to &quot;name&quot;)</param>
        /// <param name="findParams">Entity search that is specified by comma-separated parameters (optional, default to &quot;whole_words&quot;)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoryFind200Response</returns>
        ApiResponse<CategoryFind200Response> CategoryFindWithHttpInfo(string findValue, string? findWhere = default(string?), string? findParams = default(string?), string? storeId = default(string?), string? langId = default(string?), int operationIndex = 0);
        /// <summary>
        /// category.image.add
        /// </summary>
        /// <remarks>
        /// Add image to category
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Defines category id where the image should be added</param>
        /// <param name="imageName">Defines image&#39;s name</param>
        /// <param name="url">Defines URL of the image that has to be added</param>
        /// <param name="type">Defines image&#39;s types that are specified by comma-separated list</param>
        /// <param name="label">Defines alternative text that has to be attached to the picture (optional)</param>
        /// <param name="mime">Mime type of image http://en.wikipedia.org/wiki/Internet_media_type. (optional)</param>
        /// <param name="position">Defines image’s position in the list (optional, default to 0)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoryImageAdd200Response</returns>
        CategoryImageAdd200Response CategoryImageAdd(string categoryId, string imageName, string url, string type, string? label = default(string?), string? mime = default(string?), int? position = default(int?), string? storeId = default(string?), int operationIndex = 0);

        /// <summary>
        /// category.image.add
        /// </summary>
        /// <remarks>
        /// Add image to category
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Defines category id where the image should be added</param>
        /// <param name="imageName">Defines image&#39;s name</param>
        /// <param name="url">Defines URL of the image that has to be added</param>
        /// <param name="type">Defines image&#39;s types that are specified by comma-separated list</param>
        /// <param name="label">Defines alternative text that has to be attached to the picture (optional)</param>
        /// <param name="mime">Mime type of image http://en.wikipedia.org/wiki/Internet_media_type. (optional)</param>
        /// <param name="position">Defines image’s position in the list (optional, default to 0)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoryImageAdd200Response</returns>
        ApiResponse<CategoryImageAdd200Response> CategoryImageAddWithHttpInfo(string categoryId, string imageName, string url, string type, string? label = default(string?), string? mime = default(string?), int? position = default(int?), string? storeId = default(string?), int operationIndex = 0);
        /// <summary>
        /// category.image.delete
        /// </summary>
        /// <remarks>
        /// Delete image
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Defines category id where the image should be deleted</param>
        /// <param name="imageId">Define image id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttributeDelete200Response</returns>
        AttributeDelete200Response CategoryImageDelete(string categoryId, string imageId, string? storeId = default(string?), int operationIndex = 0);

        /// <summary>
        /// category.image.delete
        /// </summary>
        /// <remarks>
        /// Delete image
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Defines category id where the image should be deleted</param>
        /// <param name="imageId">Define image id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttributeDelete200Response</returns>
        ApiResponse<AttributeDelete200Response> CategoryImageDeleteWithHttpInfo(string categoryId, string imageId, string? storeId = default(string?), int operationIndex = 0);
        /// <summary>
        /// category.info
        /// </summary>
        /// <remarks>
        /// Get category info about category ID*** or specify other category ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Retrieves category&#39;s info specified by category id</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,parent_id,name,description&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="storeId">Retrieves category info  specified by store id (optional)</param>
        /// <param name="langId">Retrieves category info  specified by language id (optional)</param>
        /// <param name="schemaType">The name of the requirements set for the provided schema. (optional)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoryInfo200Response</returns>
        CategoryInfo200Response CategoryInfo(string id, string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? storeId = default(string?), string? langId = default(string?), string? schemaType = default(string?), string? reportRequestId = default(string?), bool? disableReportCache = default(bool?), int operationIndex = 0);

        /// <summary>
        /// category.info
        /// </summary>
        /// <remarks>
        /// Get category info about category ID*** or specify other category ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Retrieves category&#39;s info specified by category id</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,parent_id,name,description&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="storeId">Retrieves category info  specified by store id (optional)</param>
        /// <param name="langId">Retrieves category info  specified by language id (optional)</param>
        /// <param name="schemaType">The name of the requirements set for the provided schema. (optional)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoryInfo200Response</returns>
        ApiResponse<CategoryInfo200Response> CategoryInfoWithHttpInfo(string id, string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? storeId = default(string?), string? langId = default(string?), string? schemaType = default(string?), string? reportRequestId = default(string?), bool? disableReportCache = default(bool?), int operationIndex = 0);
        /// <summary>
        /// category.list
        /// </summary>
        /// <remarks>
        /// Get list of categories from store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="parentId">Retrieves categories specified by parent id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,parent_id,name,description&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="storeId">Retrieves categories specified by store id (optional)</param>
        /// <param name="langId">Retrieves categorys specified by language id (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="avail">Defines category&#39;s visibility status (optional, default to true)</param>
        /// <param name="productType">A categorization for the product (optional)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Category search that is specified by field (optional)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="disableCache">Disable cache for current request (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelResponseCategoryList</returns>
        ModelResponseCategoryList CategoryList(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? parentId = default(string?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? storeId = default(string?), string? langId = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), bool? avail = default(bool?), string? productType = default(string?), string? findValue = default(string?), string? findWhere = default(string?), string? reportRequestId = default(string?), bool? disableReportCache = default(bool?), bool? disableCache = default(bool?), int operationIndex = 0);

        /// <summary>
        /// category.list
        /// </summary>
        /// <remarks>
        /// Get list of categories from store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="parentId">Retrieves categories specified by parent id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,parent_id,name,description&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="storeId">Retrieves categories specified by store id (optional)</param>
        /// <param name="langId">Retrieves categorys specified by language id (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="avail">Defines category&#39;s visibility status (optional, default to true)</param>
        /// <param name="productType">A categorization for the product (optional)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Category search that is specified by field (optional)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="disableCache">Disable cache for current request (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelResponseCategoryList</returns>
        ApiResponse<ModelResponseCategoryList> CategoryListWithHttpInfo(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? parentId = default(string?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? storeId = default(string?), string? langId = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), bool? avail = default(bool?), string? productType = default(string?), string? findValue = default(string?), string? findWhere = default(string?), string? reportRequestId = default(string?), bool? disableReportCache = default(bool?), bool? disableCache = default(bool?), int operationIndex = 0);
        /// <summary>
        /// category.unassign
        /// </summary>
        /// <remarks>
        /// Unassign category to product
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Defines category unassign, specified by category id</param>
        /// <param name="productId">Defines category unassign to the product, specified by product id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CartConfigUpdate200Response</returns>
        CartConfigUpdate200Response CategoryUnassign(string categoryId, string productId, string? storeId = default(string?), int operationIndex = 0);

        /// <summary>
        /// category.unassign
        /// </summary>
        /// <remarks>
        /// Unassign category to product
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Defines category unassign, specified by category id</param>
        /// <param name="productId">Defines category unassign to the product, specified by product id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CartConfigUpdate200Response</returns>
        ApiResponse<CartConfigUpdate200Response> CategoryUnassignWithHttpInfo(string categoryId, string productId, string? storeId = default(string?), int operationIndex = 0);
        /// <summary>
        /// category.update
        /// </summary>
        /// <remarks>
        /// Update category in store
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Defines category update specified by category id</param>
        /// <param name="name">Defines new category’s name (optional)</param>
        /// <param name="parentId">Defines new parent category id (optional)</param>
        /// <param name="storesIds">Update category in the stores that is specified by comma-separated stores&#39; id (optional)</param>
        /// <param name="avail">Defines category&#39;s visibility status (optional)</param>
        /// <param name="sortOrder">Sort number in the list (optional)</param>
        /// <param name="modifiedTime">Entity&#39;s date modification (optional)</param>
        /// <param name="description">Defines new category&#39;s description (optional)</param>
        /// <param name="shortDescription">Defines short description (optional)</param>
        /// <param name="metaTitle">Defines unique meta title for each entity (optional)</param>
        /// <param name="metaDescription">Defines unique meta description of a entity (optional)</param>
        /// <param name="metaKeywords">Defines unique meta keywords for each entity (optional)</param>
        /// <param name="seoUrl">Defines unique category&#39;s URL for SEO (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountConfigUpdate200Response</returns>
        AccountConfigUpdate200Response CategoryUpdate(string id, string? name = default(string?), string? parentId = default(string?), string? storesIds = default(string?), bool? avail = default(bool?), int? sortOrder = default(int?), string? modifiedTime = default(string?), string? description = default(string?), string? shortDescription = default(string?), string? metaTitle = default(string?), string? metaDescription = default(string?), string? metaKeywords = default(string?), string? seoUrl = default(string?), string? langId = default(string?), string? storeId = default(string?), int operationIndex = 0);

        /// <summary>
        /// category.update
        /// </summary>
        /// <remarks>
        /// Update category in store
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Defines category update specified by category id</param>
        /// <param name="name">Defines new category’s name (optional)</param>
        /// <param name="parentId">Defines new parent category id (optional)</param>
        /// <param name="storesIds">Update category in the stores that is specified by comma-separated stores&#39; id (optional)</param>
        /// <param name="avail">Defines category&#39;s visibility status (optional)</param>
        /// <param name="sortOrder">Sort number in the list (optional)</param>
        /// <param name="modifiedTime">Entity&#39;s date modification (optional)</param>
        /// <param name="description">Defines new category&#39;s description (optional)</param>
        /// <param name="shortDescription">Defines short description (optional)</param>
        /// <param name="metaTitle">Defines unique meta title for each entity (optional)</param>
        /// <param name="metaDescription">Defines unique meta description of a entity (optional)</param>
        /// <param name="metaKeywords">Defines unique meta keywords for each entity (optional)</param>
        /// <param name="seoUrl">Defines unique category&#39;s URL for SEO (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountConfigUpdate200Response</returns>
        ApiResponse<AccountConfigUpdate200Response> CategoryUpdateWithHttpInfo(string id, string? name = default(string?), string? parentId = default(string?), string? storesIds = default(string?), bool? avail = default(bool?), int? sortOrder = default(int?), string? modifiedTime = default(string?), string? description = default(string?), string? shortDescription = default(string?), string? metaTitle = default(string?), string? metaDescription = default(string?), string? metaKeywords = default(string?), string? seoUrl = default(string?), string? langId = default(string?), string? storeId = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICategoryApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// category.add
        /// </summary>
        /// <remarks>
        /// Add new category in store
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Defines category&#39;s name that has to be added</param>
        /// <param name="parentId">Adds categories specified by parent id (optional)</param>
        /// <param name="storesIds">Create category in the stores that is specified by comma-separated stores&#39; id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="avail">Defines category&#39;s visibility status (optional, default to true)</param>
        /// <param name="sortOrder">Sort number in the list (optional, default to 0)</param>
        /// <param name="createdTime">Entity&#39;s date creation (optional)</param>
        /// <param name="modifiedTime">Entity&#39;s date modification (optional)</param>
        /// <param name="description">Defines category&#39;s description (optional)</param>
        /// <param name="shortDescription">Defines short description (optional)</param>
        /// <param name="metaTitle">Defines unique meta title for each entity (optional)</param>
        /// <param name="metaDescription">Defines unique meta description of a entity (optional)</param>
        /// <param name="metaKeywords">Defines unique meta keywords for each entity (optional)</param>
        /// <param name="seoUrl">Defines unique category&#39;s URL for SEO (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryAdd200Response</returns>
        System.Threading.Tasks.Task<CategoryAdd200Response> CategoryAddAsync(string name, string? parentId = default(string?), string? storesIds = default(string?), string? storeId = default(string?), string? langId = default(string?), bool? avail = default(bool?), int? sortOrder = default(int?), string? createdTime = default(string?), string? modifiedTime = default(string?), string? description = default(string?), string? shortDescription = default(string?), string? metaTitle = default(string?), string? metaDescription = default(string?), string? metaKeywords = default(string?), string? seoUrl = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// category.add
        /// </summary>
        /// <remarks>
        /// Add new category in store
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Defines category&#39;s name that has to be added</param>
        /// <param name="parentId">Adds categories specified by parent id (optional)</param>
        /// <param name="storesIds">Create category in the stores that is specified by comma-separated stores&#39; id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="avail">Defines category&#39;s visibility status (optional, default to true)</param>
        /// <param name="sortOrder">Sort number in the list (optional, default to 0)</param>
        /// <param name="createdTime">Entity&#39;s date creation (optional)</param>
        /// <param name="modifiedTime">Entity&#39;s date modification (optional)</param>
        /// <param name="description">Defines category&#39;s description (optional)</param>
        /// <param name="shortDescription">Defines short description (optional)</param>
        /// <param name="metaTitle">Defines unique meta title for each entity (optional)</param>
        /// <param name="metaDescription">Defines unique meta description of a entity (optional)</param>
        /// <param name="metaKeywords">Defines unique meta keywords for each entity (optional)</param>
        /// <param name="seoUrl">Defines unique category&#39;s URL for SEO (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryAdd200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CategoryAdd200Response>> CategoryAddWithHttpInfoAsync(string name, string? parentId = default(string?), string? storesIds = default(string?), string? storeId = default(string?), string? langId = default(string?), bool? avail = default(bool?), int? sortOrder = default(int?), string? createdTime = default(string?), string? modifiedTime = default(string?), string? description = default(string?), string? shortDescription = default(string?), string? metaTitle = default(string?), string? metaDescription = default(string?), string? metaKeywords = default(string?), string? seoUrl = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// category.add.batch
        /// </summary>
        /// <remarks>
        /// Add new categories to the store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryAddBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryAddBatch200Response</returns>
        System.Threading.Tasks.Task<CategoryAddBatch200Response> CategoryAddBatchAsync(CategoryAddBatch categoryAddBatch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// category.add.batch
        /// </summary>
        /// <remarks>
        /// Add new categories to the store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryAddBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryAddBatch200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CategoryAddBatch200Response>> CategoryAddBatchWithHttpInfoAsync(CategoryAddBatch categoryAddBatch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// category.assign
        /// </summary>
        /// <remarks>
        /// Assign category to product
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines category assign to the product, specified by product id</param>
        /// <param name="categoryId">Defines category assign, specified by category id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CartConfigUpdate200Response</returns>
        System.Threading.Tasks.Task<CartConfigUpdate200Response> CategoryAssignAsync(string productId, string categoryId, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// category.assign
        /// </summary>
        /// <remarks>
        /// Assign category to product
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines category assign to the product, specified by product id</param>
        /// <param name="categoryId">Defines category assign, specified by category id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CartConfigUpdate200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CartConfigUpdate200Response>> CategoryAssignWithHttpInfoAsync(string productId, string categoryId, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// category.count
        /// </summary>
        /// <remarks>
        /// Count categories in store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">Counts categories specified by parent id (optional)</param>
        /// <param name="storeId">Counts category specified by store id (optional)</param>
        /// <param name="langId">Counts category specified by language id (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="avail">Defines category&#39;s visibility status (optional, default to true)</param>
        /// <param name="productType">A categorization for the product (optional)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Counts categories that are searched specified by field (optional)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryCount200Response</returns>
        System.Threading.Tasks.Task<CategoryCount200Response> CategoryCountAsync(string? parentId = default(string?), string? storeId = default(string?), string? langId = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), bool? avail = default(bool?), string? productType = default(string?), string? findValue = default(string?), string? findWhere = default(string?), string? reportRequestId = default(string?), bool? disableReportCache = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// category.count
        /// </summary>
        /// <remarks>
        /// Count categories in store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">Counts categories specified by parent id (optional)</param>
        /// <param name="storeId">Counts category specified by store id (optional)</param>
        /// <param name="langId">Counts category specified by language id (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="avail">Defines category&#39;s visibility status (optional, default to true)</param>
        /// <param name="productType">A categorization for the product (optional)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Counts categories that are searched specified by field (optional)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryCount200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CategoryCount200Response>> CategoryCountWithHttpInfoAsync(string? parentId = default(string?), string? storeId = default(string?), string? langId = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), bool? avail = default(bool?), string? productType = default(string?), string? findValue = default(string?), string? findWhere = default(string?), string? reportRequestId = default(string?), bool? disableReportCache = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// category.delete
        /// </summary>
        /// <remarks>
        /// Delete category in store
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Defines category removal, specified by category id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryDelete200Response</returns>
        System.Threading.Tasks.Task<CategoryDelete200Response> CategoryDeleteAsync(string id, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// category.delete
        /// </summary>
        /// <remarks>
        /// Delete category in store
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Defines category removal, specified by category id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryDelete200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CategoryDelete200Response>> CategoryDeleteWithHttpInfoAsync(string id, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// category.find
        /// </summary>
        /// <remarks>
        /// Search category in store. \&quot;Laptop\&quot; is specified here by default.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findValue">Entity search that is specified by some value</param>
        /// <param name="findWhere">Entity search that is specified by the comma-separated unique fields (optional, default to &quot;name&quot;)</param>
        /// <param name="findParams">Entity search that is specified by comma-separated parameters (optional, default to &quot;whole_words&quot;)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryFind200Response</returns>
        System.Threading.Tasks.Task<CategoryFind200Response> CategoryFindAsync(string findValue, string? findWhere = default(string?), string? findParams = default(string?), string? storeId = default(string?), string? langId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// category.find
        /// </summary>
        /// <remarks>
        /// Search category in store. \&quot;Laptop\&quot; is specified here by default.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findValue">Entity search that is specified by some value</param>
        /// <param name="findWhere">Entity search that is specified by the comma-separated unique fields (optional, default to &quot;name&quot;)</param>
        /// <param name="findParams">Entity search that is specified by comma-separated parameters (optional, default to &quot;whole_words&quot;)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryFind200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CategoryFind200Response>> CategoryFindWithHttpInfoAsync(string findValue, string? findWhere = default(string?), string? findParams = default(string?), string? storeId = default(string?), string? langId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// category.image.add
        /// </summary>
        /// <remarks>
        /// Add image to category
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Defines category id where the image should be added</param>
        /// <param name="imageName">Defines image&#39;s name</param>
        /// <param name="url">Defines URL of the image that has to be added</param>
        /// <param name="type">Defines image&#39;s types that are specified by comma-separated list</param>
        /// <param name="label">Defines alternative text that has to be attached to the picture (optional)</param>
        /// <param name="mime">Mime type of image http://en.wikipedia.org/wiki/Internet_media_type. (optional)</param>
        /// <param name="position">Defines image’s position in the list (optional, default to 0)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryImageAdd200Response</returns>
        System.Threading.Tasks.Task<CategoryImageAdd200Response> CategoryImageAddAsync(string categoryId, string imageName, string url, string type, string? label = default(string?), string? mime = default(string?), int? position = default(int?), string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// category.image.add
        /// </summary>
        /// <remarks>
        /// Add image to category
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Defines category id where the image should be added</param>
        /// <param name="imageName">Defines image&#39;s name</param>
        /// <param name="url">Defines URL of the image that has to be added</param>
        /// <param name="type">Defines image&#39;s types that are specified by comma-separated list</param>
        /// <param name="label">Defines alternative text that has to be attached to the picture (optional)</param>
        /// <param name="mime">Mime type of image http://en.wikipedia.org/wiki/Internet_media_type. (optional)</param>
        /// <param name="position">Defines image’s position in the list (optional, default to 0)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryImageAdd200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CategoryImageAdd200Response>> CategoryImageAddWithHttpInfoAsync(string categoryId, string imageName, string url, string type, string? label = default(string?), string? mime = default(string?), int? position = default(int?), string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// category.image.delete
        /// </summary>
        /// <remarks>
        /// Delete image
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Defines category id where the image should be deleted</param>
        /// <param name="imageId">Define image id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttributeDelete200Response</returns>
        System.Threading.Tasks.Task<AttributeDelete200Response> CategoryImageDeleteAsync(string categoryId, string imageId, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// category.image.delete
        /// </summary>
        /// <remarks>
        /// Delete image
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Defines category id where the image should be deleted</param>
        /// <param name="imageId">Define image id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttributeDelete200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttributeDelete200Response>> CategoryImageDeleteWithHttpInfoAsync(string categoryId, string imageId, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// category.info
        /// </summary>
        /// <remarks>
        /// Get category info about category ID*** or specify other category ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Retrieves category&#39;s info specified by category id</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,parent_id,name,description&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="storeId">Retrieves category info  specified by store id (optional)</param>
        /// <param name="langId">Retrieves category info  specified by language id (optional)</param>
        /// <param name="schemaType">The name of the requirements set for the provided schema. (optional)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryInfo200Response</returns>
        System.Threading.Tasks.Task<CategoryInfo200Response> CategoryInfoAsync(string id, string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? storeId = default(string?), string? langId = default(string?), string? schemaType = default(string?), string? reportRequestId = default(string?), bool? disableReportCache = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// category.info
        /// </summary>
        /// <remarks>
        /// Get category info about category ID*** or specify other category ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Retrieves category&#39;s info specified by category id</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,parent_id,name,description&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="storeId">Retrieves category info  specified by store id (optional)</param>
        /// <param name="langId">Retrieves category info  specified by language id (optional)</param>
        /// <param name="schemaType">The name of the requirements set for the provided schema. (optional)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryInfo200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CategoryInfo200Response>> CategoryInfoWithHttpInfoAsync(string id, string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? storeId = default(string?), string? langId = default(string?), string? schemaType = default(string?), string? reportRequestId = default(string?), bool? disableReportCache = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// category.list
        /// </summary>
        /// <remarks>
        /// Get list of categories from store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="parentId">Retrieves categories specified by parent id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,parent_id,name,description&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="storeId">Retrieves categories specified by store id (optional)</param>
        /// <param name="langId">Retrieves categorys specified by language id (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="avail">Defines category&#39;s visibility status (optional, default to true)</param>
        /// <param name="productType">A categorization for the product (optional)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Category search that is specified by field (optional)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="disableCache">Disable cache for current request (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelResponseCategoryList</returns>
        System.Threading.Tasks.Task<ModelResponseCategoryList> CategoryListAsync(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? parentId = default(string?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? storeId = default(string?), string? langId = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), bool? avail = default(bool?), string? productType = default(string?), string? findValue = default(string?), string? findWhere = default(string?), string? reportRequestId = default(string?), bool? disableReportCache = default(bool?), bool? disableCache = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// category.list
        /// </summary>
        /// <remarks>
        /// Get list of categories from store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="parentId">Retrieves categories specified by parent id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,parent_id,name,description&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="storeId">Retrieves categories specified by store id (optional)</param>
        /// <param name="langId">Retrieves categorys specified by language id (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="avail">Defines category&#39;s visibility status (optional, default to true)</param>
        /// <param name="productType">A categorization for the product (optional)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Category search that is specified by field (optional)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="disableCache">Disable cache for current request (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelResponseCategoryList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelResponseCategoryList>> CategoryListWithHttpInfoAsync(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? parentId = default(string?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? storeId = default(string?), string? langId = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), bool? avail = default(bool?), string? productType = default(string?), string? findValue = default(string?), string? findWhere = default(string?), string? reportRequestId = default(string?), bool? disableReportCache = default(bool?), bool? disableCache = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// category.unassign
        /// </summary>
        /// <remarks>
        /// Unassign category to product
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Defines category unassign, specified by category id</param>
        /// <param name="productId">Defines category unassign to the product, specified by product id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CartConfigUpdate200Response</returns>
        System.Threading.Tasks.Task<CartConfigUpdate200Response> CategoryUnassignAsync(string categoryId, string productId, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// category.unassign
        /// </summary>
        /// <remarks>
        /// Unassign category to product
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Defines category unassign, specified by category id</param>
        /// <param name="productId">Defines category unassign to the product, specified by product id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CartConfigUpdate200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CartConfigUpdate200Response>> CategoryUnassignWithHttpInfoAsync(string categoryId, string productId, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// category.update
        /// </summary>
        /// <remarks>
        /// Update category in store
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Defines category update specified by category id</param>
        /// <param name="name">Defines new category’s name (optional)</param>
        /// <param name="parentId">Defines new parent category id (optional)</param>
        /// <param name="storesIds">Update category in the stores that is specified by comma-separated stores&#39; id (optional)</param>
        /// <param name="avail">Defines category&#39;s visibility status (optional)</param>
        /// <param name="sortOrder">Sort number in the list (optional)</param>
        /// <param name="modifiedTime">Entity&#39;s date modification (optional)</param>
        /// <param name="description">Defines new category&#39;s description (optional)</param>
        /// <param name="shortDescription">Defines short description (optional)</param>
        /// <param name="metaTitle">Defines unique meta title for each entity (optional)</param>
        /// <param name="metaDescription">Defines unique meta description of a entity (optional)</param>
        /// <param name="metaKeywords">Defines unique meta keywords for each entity (optional)</param>
        /// <param name="seoUrl">Defines unique category&#39;s URL for SEO (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountConfigUpdate200Response</returns>
        System.Threading.Tasks.Task<AccountConfigUpdate200Response> CategoryUpdateAsync(string id, string? name = default(string?), string? parentId = default(string?), string? storesIds = default(string?), bool? avail = default(bool?), int? sortOrder = default(int?), string? modifiedTime = default(string?), string? description = default(string?), string? shortDescription = default(string?), string? metaTitle = default(string?), string? metaDescription = default(string?), string? metaKeywords = default(string?), string? seoUrl = default(string?), string? langId = default(string?), string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// category.update
        /// </summary>
        /// <remarks>
        /// Update category in store
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Defines category update specified by category id</param>
        /// <param name="name">Defines new category’s name (optional)</param>
        /// <param name="parentId">Defines new parent category id (optional)</param>
        /// <param name="storesIds">Update category in the stores that is specified by comma-separated stores&#39; id (optional)</param>
        /// <param name="avail">Defines category&#39;s visibility status (optional)</param>
        /// <param name="sortOrder">Sort number in the list (optional)</param>
        /// <param name="modifiedTime">Entity&#39;s date modification (optional)</param>
        /// <param name="description">Defines new category&#39;s description (optional)</param>
        /// <param name="shortDescription">Defines short description (optional)</param>
        /// <param name="metaTitle">Defines unique meta title for each entity (optional)</param>
        /// <param name="metaDescription">Defines unique meta description of a entity (optional)</param>
        /// <param name="metaKeywords">Defines unique meta keywords for each entity (optional)</param>
        /// <param name="seoUrl">Defines unique category&#39;s URL for SEO (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountConfigUpdate200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountConfigUpdate200Response>> CategoryUpdateWithHttpInfoAsync(string id, string? name = default(string?), string? parentId = default(string?), string? storesIds = default(string?), bool? avail = default(bool?), int? sortOrder = default(int?), string? modifiedTime = default(string?), string? description = default(string?), string? shortDescription = default(string?), string? metaTitle = default(string?), string? metaDescription = default(string?), string? metaKeywords = default(string?), string? seoUrl = default(string?), string? langId = default(string?), string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICategoryApi : ICategoryApiSync, ICategoryApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CategoryApi : ICategoryApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CategoryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CategoryApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CategoryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CategoryApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CategoryApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CategoryApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CategoryApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CategoryApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// category.add Add new category in store
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Defines category&#39;s name that has to be added</param>
        /// <param name="parentId">Adds categories specified by parent id (optional)</param>
        /// <param name="storesIds">Create category in the stores that is specified by comma-separated stores&#39; id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="avail">Defines category&#39;s visibility status (optional, default to true)</param>
        /// <param name="sortOrder">Sort number in the list (optional, default to 0)</param>
        /// <param name="createdTime">Entity&#39;s date creation (optional)</param>
        /// <param name="modifiedTime">Entity&#39;s date modification (optional)</param>
        /// <param name="description">Defines category&#39;s description (optional)</param>
        /// <param name="shortDescription">Defines short description (optional)</param>
        /// <param name="metaTitle">Defines unique meta title for each entity (optional)</param>
        /// <param name="metaDescription">Defines unique meta description of a entity (optional)</param>
        /// <param name="metaKeywords">Defines unique meta keywords for each entity (optional)</param>
        /// <param name="seoUrl">Defines unique category&#39;s URL for SEO (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoryAdd200Response</returns>
        public CategoryAdd200Response CategoryAdd(string name, string? parentId = default(string?), string? storesIds = default(string?), string? storeId = default(string?), string? langId = default(string?), bool? avail = default(bool?), int? sortOrder = default(int?), string? createdTime = default(string?), string? modifiedTime = default(string?), string? description = default(string?), string? shortDescription = default(string?), string? metaTitle = default(string?), string? metaDescription = default(string?), string? metaKeywords = default(string?), string? seoUrl = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CategoryAdd200Response> localVarResponse = CategoryAddWithHttpInfo(name, parentId, storesIds, storeId, langId, avail, sortOrder, createdTime, modifiedTime, description, shortDescription, metaTitle, metaDescription, metaKeywords, seoUrl);
            return localVarResponse.Data;
        }

        /// <summary>
        /// category.add Add new category in store
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Defines category&#39;s name that has to be added</param>
        /// <param name="parentId">Adds categories specified by parent id (optional)</param>
        /// <param name="storesIds">Create category in the stores that is specified by comma-separated stores&#39; id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="avail">Defines category&#39;s visibility status (optional, default to true)</param>
        /// <param name="sortOrder">Sort number in the list (optional, default to 0)</param>
        /// <param name="createdTime">Entity&#39;s date creation (optional)</param>
        /// <param name="modifiedTime">Entity&#39;s date modification (optional)</param>
        /// <param name="description">Defines category&#39;s description (optional)</param>
        /// <param name="shortDescription">Defines short description (optional)</param>
        /// <param name="metaTitle">Defines unique meta title for each entity (optional)</param>
        /// <param name="metaDescription">Defines unique meta description of a entity (optional)</param>
        /// <param name="metaKeywords">Defines unique meta keywords for each entity (optional)</param>
        /// <param name="seoUrl">Defines unique category&#39;s URL for SEO (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoryAdd200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<CategoryAdd200Response> CategoryAddWithHttpInfo(string name, string? parentId = default(string?), string? storesIds = default(string?), string? storeId = default(string?), string? langId = default(string?), bool? avail = default(bool?), int? sortOrder = default(int?), string? createdTime = default(string?), string? modifiedTime = default(string?), string? description = default(string?), string? shortDescription = default(string?), string? metaTitle = default(string?), string? metaDescription = default(string?), string? metaKeywords = default(string?), string? seoUrl = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'name' when calling CategoryApi->CategoryAdd");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            if (parentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "parent_id", parentId));
            }
            if (storesIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "stores_ids", storesIds));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }
            if (avail != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "avail", avail));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sort_order", sortOrder));
            }
            if (createdTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_time", createdTime));
            }
            if (modifiedTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_time", modifiedTime));
            }
            if (description != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "description", description));
            }
            if (shortDescription != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "short_description", shortDescription));
            }
            if (metaTitle != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "meta_title", metaTitle));
            }
            if (metaDescription != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "meta_description", metaDescription));
            }
            if (metaKeywords != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "meta_keywords", metaKeywords));
            }
            if (seoUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "seo_url", seoUrl));
            }

            localVarRequestOptions.Operation = "CategoryApi.CategoryAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CategoryAdd200Response>("/category.add.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CategoryAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// category.add Add new category in store
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Defines category&#39;s name that has to be added</param>
        /// <param name="parentId">Adds categories specified by parent id (optional)</param>
        /// <param name="storesIds">Create category in the stores that is specified by comma-separated stores&#39; id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="avail">Defines category&#39;s visibility status (optional, default to true)</param>
        /// <param name="sortOrder">Sort number in the list (optional, default to 0)</param>
        /// <param name="createdTime">Entity&#39;s date creation (optional)</param>
        /// <param name="modifiedTime">Entity&#39;s date modification (optional)</param>
        /// <param name="description">Defines category&#39;s description (optional)</param>
        /// <param name="shortDescription">Defines short description (optional)</param>
        /// <param name="metaTitle">Defines unique meta title for each entity (optional)</param>
        /// <param name="metaDescription">Defines unique meta description of a entity (optional)</param>
        /// <param name="metaKeywords">Defines unique meta keywords for each entity (optional)</param>
        /// <param name="seoUrl">Defines unique category&#39;s URL for SEO (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryAdd200Response</returns>
        public async System.Threading.Tasks.Task<CategoryAdd200Response> CategoryAddAsync(string name, string? parentId = default(string?), string? storesIds = default(string?), string? storeId = default(string?), string? langId = default(string?), bool? avail = default(bool?), int? sortOrder = default(int?), string? createdTime = default(string?), string? modifiedTime = default(string?), string? description = default(string?), string? shortDescription = default(string?), string? metaTitle = default(string?), string? metaDescription = default(string?), string? metaKeywords = default(string?), string? seoUrl = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CategoryAdd200Response> localVarResponse = await CategoryAddWithHttpInfoAsync(name, parentId, storesIds, storeId, langId, avail, sortOrder, createdTime, modifiedTime, description, shortDescription, metaTitle, metaDescription, metaKeywords, seoUrl, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// category.add Add new category in store
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Defines category&#39;s name that has to be added</param>
        /// <param name="parentId">Adds categories specified by parent id (optional)</param>
        /// <param name="storesIds">Create category in the stores that is specified by comma-separated stores&#39; id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="avail">Defines category&#39;s visibility status (optional, default to true)</param>
        /// <param name="sortOrder">Sort number in the list (optional, default to 0)</param>
        /// <param name="createdTime">Entity&#39;s date creation (optional)</param>
        /// <param name="modifiedTime">Entity&#39;s date modification (optional)</param>
        /// <param name="description">Defines category&#39;s description (optional)</param>
        /// <param name="shortDescription">Defines short description (optional)</param>
        /// <param name="metaTitle">Defines unique meta title for each entity (optional)</param>
        /// <param name="metaDescription">Defines unique meta description of a entity (optional)</param>
        /// <param name="metaKeywords">Defines unique meta keywords for each entity (optional)</param>
        /// <param name="seoUrl">Defines unique category&#39;s URL for SEO (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryAdd200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CategoryAdd200Response>> CategoryAddWithHttpInfoAsync(string name, string? parentId = default(string?), string? storesIds = default(string?), string? storeId = default(string?), string? langId = default(string?), bool? avail = default(bool?), int? sortOrder = default(int?), string? createdTime = default(string?), string? modifiedTime = default(string?), string? description = default(string?), string? shortDescription = default(string?), string? metaTitle = default(string?), string? metaDescription = default(string?), string? metaKeywords = default(string?), string? seoUrl = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'name' when calling CategoryApi->CategoryAdd");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            if (parentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "parent_id", parentId));
            }
            if (storesIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "stores_ids", storesIds));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }
            if (avail != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "avail", avail));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sort_order", sortOrder));
            }
            if (createdTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_time", createdTime));
            }
            if (modifiedTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_time", modifiedTime));
            }
            if (description != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "description", description));
            }
            if (shortDescription != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "short_description", shortDescription));
            }
            if (metaTitle != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "meta_title", metaTitle));
            }
            if (metaDescription != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "meta_description", metaDescription));
            }
            if (metaKeywords != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "meta_keywords", metaKeywords));
            }
            if (seoUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "seo_url", seoUrl));
            }

            localVarRequestOptions.Operation = "CategoryApi.CategoryAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CategoryAdd200Response>("/category.add.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CategoryAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// category.add.batch Add new categories to the store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryAddBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoryAddBatch200Response</returns>
        public CategoryAddBatch200Response CategoryAddBatch(CategoryAddBatch categoryAddBatch, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CategoryAddBatch200Response> localVarResponse = CategoryAddBatchWithHttpInfo(categoryAddBatch);
            return localVarResponse.Data;
        }

        /// <summary>
        /// category.add.batch Add new categories to the store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryAddBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoryAddBatch200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<CategoryAddBatch200Response> CategoryAddBatchWithHttpInfo(CategoryAddBatch categoryAddBatch, int operationIndex = 0)
        {
            // verify the required parameter 'categoryAddBatch' is set
            if (categoryAddBatch == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'categoryAddBatch' when calling CategoryApi->CategoryAddBatch");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = categoryAddBatch;

            localVarRequestOptions.Operation = "CategoryApi.CategoryAddBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CategoryAddBatch200Response>("/category.add.batch.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CategoryAddBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// category.add.batch Add new categories to the store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryAddBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryAddBatch200Response</returns>
        public async System.Threading.Tasks.Task<CategoryAddBatch200Response> CategoryAddBatchAsync(CategoryAddBatch categoryAddBatch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CategoryAddBatch200Response> localVarResponse = await CategoryAddBatchWithHttpInfoAsync(categoryAddBatch, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// category.add.batch Add new categories to the store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryAddBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryAddBatch200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CategoryAddBatch200Response>> CategoryAddBatchWithHttpInfoAsync(CategoryAddBatch categoryAddBatch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'categoryAddBatch' is set
            if (categoryAddBatch == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'categoryAddBatch' when calling CategoryApi->CategoryAddBatch");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = categoryAddBatch;

            localVarRequestOptions.Operation = "CategoryApi.CategoryAddBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CategoryAddBatch200Response>("/category.add.batch.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CategoryAddBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// category.assign Assign category to product
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines category assign to the product, specified by product id</param>
        /// <param name="categoryId">Defines category assign, specified by category id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CartConfigUpdate200Response</returns>
        public CartConfigUpdate200Response CategoryAssign(string productId, string categoryId, string? storeId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CartConfigUpdate200Response> localVarResponse = CategoryAssignWithHttpInfo(productId, categoryId, storeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// category.assign Assign category to product
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines category assign to the product, specified by product id</param>
        /// <param name="categoryId">Defines category assign, specified by category id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CartConfigUpdate200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<CartConfigUpdate200Response> CategoryAssignWithHttpInfo(string productId, string categoryId, string? storeId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling CategoryApi->CategoryAssign");
            }

            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'categoryId' when calling CategoryApi->CategoryAssign");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_id", productId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "category_id", categoryId));
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }

            localVarRequestOptions.Operation = "CategoryApi.CategoryAssign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CartConfigUpdate200Response>("/category.assign.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CategoryAssign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// category.assign Assign category to product
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines category assign to the product, specified by product id</param>
        /// <param name="categoryId">Defines category assign, specified by category id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CartConfigUpdate200Response</returns>
        public async System.Threading.Tasks.Task<CartConfigUpdate200Response> CategoryAssignAsync(string productId, string categoryId, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CartConfigUpdate200Response> localVarResponse = await CategoryAssignWithHttpInfoAsync(productId, categoryId, storeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// category.assign Assign category to product
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines category assign to the product, specified by product id</param>
        /// <param name="categoryId">Defines category assign, specified by category id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CartConfigUpdate200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CartConfigUpdate200Response>> CategoryAssignWithHttpInfoAsync(string productId, string categoryId, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling CategoryApi->CategoryAssign");
            }

            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'categoryId' when calling CategoryApi->CategoryAssign");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_id", productId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "category_id", categoryId));
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }

            localVarRequestOptions.Operation = "CategoryApi.CategoryAssign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CartConfigUpdate200Response>("/category.assign.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CategoryAssign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// category.count Count categories in store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">Counts categories specified by parent id (optional)</param>
        /// <param name="storeId">Counts category specified by store id (optional)</param>
        /// <param name="langId">Counts category specified by language id (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="avail">Defines category&#39;s visibility status (optional, default to true)</param>
        /// <param name="productType">A categorization for the product (optional)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Counts categories that are searched specified by field (optional)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoryCount200Response</returns>
        public CategoryCount200Response CategoryCount(string? parentId = default(string?), string? storeId = default(string?), string? langId = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), bool? avail = default(bool?), string? productType = default(string?), string? findValue = default(string?), string? findWhere = default(string?), string? reportRequestId = default(string?), bool? disableReportCache = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CategoryCount200Response> localVarResponse = CategoryCountWithHttpInfo(parentId, storeId, langId, createdFrom, createdTo, modifiedFrom, modifiedTo, avail, productType, findValue, findWhere, reportRequestId, disableReportCache);
            return localVarResponse.Data;
        }

        /// <summary>
        /// category.count Count categories in store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">Counts categories specified by parent id (optional)</param>
        /// <param name="storeId">Counts category specified by store id (optional)</param>
        /// <param name="langId">Counts category specified by language id (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="avail">Defines category&#39;s visibility status (optional, default to true)</param>
        /// <param name="productType">A categorization for the product (optional)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Counts categories that are searched specified by field (optional)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoryCount200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<CategoryCount200Response> CategoryCountWithHttpInfo(string? parentId = default(string?), string? storeId = default(string?), string? langId = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), bool? avail = default(bool?), string? productType = default(string?), string? findValue = default(string?), string? findWhere = default(string?), string? reportRequestId = default(string?), bool? disableReportCache = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (parentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "parent_id", parentId));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }
            if (createdFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_from", createdFrom));
            }
            if (createdTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_to", createdTo));
            }
            if (modifiedFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_from", modifiedFrom));
            }
            if (modifiedTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_to", modifiedTo));
            }
            if (avail != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "avail", avail));
            }
            if (productType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_type", productType));
            }
            if (findValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_value", findValue));
            }
            if (findWhere != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_where", findWhere));
            }
            if (reportRequestId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "report_request_id", reportRequestId));
            }
            if (disableReportCache != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "disable_report_cache", disableReportCache));
            }

            localVarRequestOptions.Operation = "CategoryApi.CategoryCount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CategoryCount200Response>("/category.count.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CategoryCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// category.count Count categories in store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">Counts categories specified by parent id (optional)</param>
        /// <param name="storeId">Counts category specified by store id (optional)</param>
        /// <param name="langId">Counts category specified by language id (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="avail">Defines category&#39;s visibility status (optional, default to true)</param>
        /// <param name="productType">A categorization for the product (optional)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Counts categories that are searched specified by field (optional)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryCount200Response</returns>
        public async System.Threading.Tasks.Task<CategoryCount200Response> CategoryCountAsync(string? parentId = default(string?), string? storeId = default(string?), string? langId = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), bool? avail = default(bool?), string? productType = default(string?), string? findValue = default(string?), string? findWhere = default(string?), string? reportRequestId = default(string?), bool? disableReportCache = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CategoryCount200Response> localVarResponse = await CategoryCountWithHttpInfoAsync(parentId, storeId, langId, createdFrom, createdTo, modifiedFrom, modifiedTo, avail, productType, findValue, findWhere, reportRequestId, disableReportCache, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// category.count Count categories in store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">Counts categories specified by parent id (optional)</param>
        /// <param name="storeId">Counts category specified by store id (optional)</param>
        /// <param name="langId">Counts category specified by language id (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="avail">Defines category&#39;s visibility status (optional, default to true)</param>
        /// <param name="productType">A categorization for the product (optional)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Counts categories that are searched specified by field (optional)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryCount200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CategoryCount200Response>> CategoryCountWithHttpInfoAsync(string? parentId = default(string?), string? storeId = default(string?), string? langId = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), bool? avail = default(bool?), string? productType = default(string?), string? findValue = default(string?), string? findWhere = default(string?), string? reportRequestId = default(string?), bool? disableReportCache = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (parentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "parent_id", parentId));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }
            if (createdFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_from", createdFrom));
            }
            if (createdTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_to", createdTo));
            }
            if (modifiedFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_from", modifiedFrom));
            }
            if (modifiedTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_to", modifiedTo));
            }
            if (avail != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "avail", avail));
            }
            if (productType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_type", productType));
            }
            if (findValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_value", findValue));
            }
            if (findWhere != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_where", findWhere));
            }
            if (reportRequestId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "report_request_id", reportRequestId));
            }
            if (disableReportCache != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "disable_report_cache", disableReportCache));
            }

            localVarRequestOptions.Operation = "CategoryApi.CategoryCount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CategoryCount200Response>("/category.count.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CategoryCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// category.delete Delete category in store
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Defines category removal, specified by category id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoryDelete200Response</returns>
        public CategoryDelete200Response CategoryDelete(string id, string? storeId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CategoryDelete200Response> localVarResponse = CategoryDeleteWithHttpInfo(id, storeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// category.delete Delete category in store
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Defines category removal, specified by category id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoryDelete200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<CategoryDelete200Response> CategoryDeleteWithHttpInfo(string id, string? storeId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling CategoryApi->CategoryDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }

            localVarRequestOptions.Operation = "CategoryApi.CategoryDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<CategoryDelete200Response>("/category.delete.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CategoryDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// category.delete Delete category in store
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Defines category removal, specified by category id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryDelete200Response</returns>
        public async System.Threading.Tasks.Task<CategoryDelete200Response> CategoryDeleteAsync(string id, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CategoryDelete200Response> localVarResponse = await CategoryDeleteWithHttpInfoAsync(id, storeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// category.delete Delete category in store
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Defines category removal, specified by category id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryDelete200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CategoryDelete200Response>> CategoryDeleteWithHttpInfoAsync(string id, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling CategoryApi->CategoryDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }

            localVarRequestOptions.Operation = "CategoryApi.CategoryDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<CategoryDelete200Response>("/category.delete.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CategoryDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// category.find Search category in store. \&quot;Laptop\&quot; is specified here by default.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findValue">Entity search that is specified by some value</param>
        /// <param name="findWhere">Entity search that is specified by the comma-separated unique fields (optional, default to &quot;name&quot;)</param>
        /// <param name="findParams">Entity search that is specified by comma-separated parameters (optional, default to &quot;whole_words&quot;)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoryFind200Response</returns>
        public CategoryFind200Response CategoryFind(string findValue, string? findWhere = default(string?), string? findParams = default(string?), string? storeId = default(string?), string? langId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CategoryFind200Response> localVarResponse = CategoryFindWithHttpInfo(findValue, findWhere, findParams, storeId, langId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// category.find Search category in store. \&quot;Laptop\&quot; is specified here by default.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findValue">Entity search that is specified by some value</param>
        /// <param name="findWhere">Entity search that is specified by the comma-separated unique fields (optional, default to &quot;name&quot;)</param>
        /// <param name="findParams">Entity search that is specified by comma-separated parameters (optional, default to &quot;whole_words&quot;)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoryFind200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<CategoryFind200Response> CategoryFindWithHttpInfo(string findValue, string? findWhere = default(string?), string? findParams = default(string?), string? storeId = default(string?), string? langId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'findValue' is set
            if (findValue == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'findValue' when calling CategoryApi->CategoryFind");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_value", findValue));
            if (findWhere != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_where", findWhere));
            }
            if (findParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_params", findParams));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }

            localVarRequestOptions.Operation = "CategoryApi.CategoryFind";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CategoryFind200Response>("/category.find.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CategoryFind", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// category.find Search category in store. \&quot;Laptop\&quot; is specified here by default.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findValue">Entity search that is specified by some value</param>
        /// <param name="findWhere">Entity search that is specified by the comma-separated unique fields (optional, default to &quot;name&quot;)</param>
        /// <param name="findParams">Entity search that is specified by comma-separated parameters (optional, default to &quot;whole_words&quot;)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryFind200Response</returns>
        public async System.Threading.Tasks.Task<CategoryFind200Response> CategoryFindAsync(string findValue, string? findWhere = default(string?), string? findParams = default(string?), string? storeId = default(string?), string? langId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CategoryFind200Response> localVarResponse = await CategoryFindWithHttpInfoAsync(findValue, findWhere, findParams, storeId, langId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// category.find Search category in store. \&quot;Laptop\&quot; is specified here by default.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findValue">Entity search that is specified by some value</param>
        /// <param name="findWhere">Entity search that is specified by the comma-separated unique fields (optional, default to &quot;name&quot;)</param>
        /// <param name="findParams">Entity search that is specified by comma-separated parameters (optional, default to &quot;whole_words&quot;)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryFind200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CategoryFind200Response>> CategoryFindWithHttpInfoAsync(string findValue, string? findWhere = default(string?), string? findParams = default(string?), string? storeId = default(string?), string? langId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'findValue' is set
            if (findValue == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'findValue' when calling CategoryApi->CategoryFind");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_value", findValue));
            if (findWhere != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_where", findWhere));
            }
            if (findParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_params", findParams));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }

            localVarRequestOptions.Operation = "CategoryApi.CategoryFind";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CategoryFind200Response>("/category.find.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CategoryFind", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// category.image.add Add image to category
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Defines category id where the image should be added</param>
        /// <param name="imageName">Defines image&#39;s name</param>
        /// <param name="url">Defines URL of the image that has to be added</param>
        /// <param name="type">Defines image&#39;s types that are specified by comma-separated list</param>
        /// <param name="label">Defines alternative text that has to be attached to the picture (optional)</param>
        /// <param name="mime">Mime type of image http://en.wikipedia.org/wiki/Internet_media_type. (optional)</param>
        /// <param name="position">Defines image’s position in the list (optional, default to 0)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoryImageAdd200Response</returns>
        public CategoryImageAdd200Response CategoryImageAdd(string categoryId, string imageName, string url, string type, string? label = default(string?), string? mime = default(string?), int? position = default(int?), string? storeId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CategoryImageAdd200Response> localVarResponse = CategoryImageAddWithHttpInfo(categoryId, imageName, url, type, label, mime, position, storeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// category.image.add Add image to category
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Defines category id where the image should be added</param>
        /// <param name="imageName">Defines image&#39;s name</param>
        /// <param name="url">Defines URL of the image that has to be added</param>
        /// <param name="type">Defines image&#39;s types that are specified by comma-separated list</param>
        /// <param name="label">Defines alternative text that has to be attached to the picture (optional)</param>
        /// <param name="mime">Mime type of image http://en.wikipedia.org/wiki/Internet_media_type. (optional)</param>
        /// <param name="position">Defines image’s position in the list (optional, default to 0)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoryImageAdd200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<CategoryImageAdd200Response> CategoryImageAddWithHttpInfo(string categoryId, string imageName, string url, string type, string? label = default(string?), string? mime = default(string?), int? position = default(int?), string? storeId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'categoryId' when calling CategoryApi->CategoryImageAdd");
            }

            // verify the required parameter 'imageName' is set
            if (imageName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'imageName' when calling CategoryApi->CategoryImageAdd");
            }

            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'url' when calling CategoryApi->CategoryImageAdd");
            }

            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'type' when calling CategoryApi->CategoryImageAdd");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "category_id", categoryId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "image_name", imageName));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "url", url));
            if (label != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "label", label));
            }
            if (mime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "mime", mime));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            if (position != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "position", position));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }

            localVarRequestOptions.Operation = "CategoryApi.CategoryImageAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CategoryImageAdd200Response>("/category.image.add.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CategoryImageAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// category.image.add Add image to category
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Defines category id where the image should be added</param>
        /// <param name="imageName">Defines image&#39;s name</param>
        /// <param name="url">Defines URL of the image that has to be added</param>
        /// <param name="type">Defines image&#39;s types that are specified by comma-separated list</param>
        /// <param name="label">Defines alternative text that has to be attached to the picture (optional)</param>
        /// <param name="mime">Mime type of image http://en.wikipedia.org/wiki/Internet_media_type. (optional)</param>
        /// <param name="position">Defines image’s position in the list (optional, default to 0)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryImageAdd200Response</returns>
        public async System.Threading.Tasks.Task<CategoryImageAdd200Response> CategoryImageAddAsync(string categoryId, string imageName, string url, string type, string? label = default(string?), string? mime = default(string?), int? position = default(int?), string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CategoryImageAdd200Response> localVarResponse = await CategoryImageAddWithHttpInfoAsync(categoryId, imageName, url, type, label, mime, position, storeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// category.image.add Add image to category
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Defines category id where the image should be added</param>
        /// <param name="imageName">Defines image&#39;s name</param>
        /// <param name="url">Defines URL of the image that has to be added</param>
        /// <param name="type">Defines image&#39;s types that are specified by comma-separated list</param>
        /// <param name="label">Defines alternative text that has to be attached to the picture (optional)</param>
        /// <param name="mime">Mime type of image http://en.wikipedia.org/wiki/Internet_media_type. (optional)</param>
        /// <param name="position">Defines image’s position in the list (optional, default to 0)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryImageAdd200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CategoryImageAdd200Response>> CategoryImageAddWithHttpInfoAsync(string categoryId, string imageName, string url, string type, string? label = default(string?), string? mime = default(string?), int? position = default(int?), string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'categoryId' when calling CategoryApi->CategoryImageAdd");
            }

            // verify the required parameter 'imageName' is set
            if (imageName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'imageName' when calling CategoryApi->CategoryImageAdd");
            }

            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'url' when calling CategoryApi->CategoryImageAdd");
            }

            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'type' when calling CategoryApi->CategoryImageAdd");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "category_id", categoryId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "image_name", imageName));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "url", url));
            if (label != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "label", label));
            }
            if (mime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "mime", mime));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            if (position != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "position", position));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }

            localVarRequestOptions.Operation = "CategoryApi.CategoryImageAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CategoryImageAdd200Response>("/category.image.add.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CategoryImageAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// category.image.delete Delete image
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Defines category id where the image should be deleted</param>
        /// <param name="imageId">Define image id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttributeDelete200Response</returns>
        public AttributeDelete200Response CategoryImageDelete(string categoryId, string imageId, string? storeId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AttributeDelete200Response> localVarResponse = CategoryImageDeleteWithHttpInfo(categoryId, imageId, storeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// category.image.delete Delete image
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Defines category id where the image should be deleted</param>
        /// <param name="imageId">Define image id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttributeDelete200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<AttributeDelete200Response> CategoryImageDeleteWithHttpInfo(string categoryId, string imageId, string? storeId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'categoryId' when calling CategoryApi->CategoryImageDelete");
            }

            // verify the required parameter 'imageId' is set
            if (imageId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'imageId' when calling CategoryApi->CategoryImageDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "category_id", categoryId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "image_id", imageId));
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }

            localVarRequestOptions.Operation = "CategoryApi.CategoryImageDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<AttributeDelete200Response>("/category.image.delete.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CategoryImageDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// category.image.delete Delete image
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Defines category id where the image should be deleted</param>
        /// <param name="imageId">Define image id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttributeDelete200Response</returns>
        public async System.Threading.Tasks.Task<AttributeDelete200Response> CategoryImageDeleteAsync(string categoryId, string imageId, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AttributeDelete200Response> localVarResponse = await CategoryImageDeleteWithHttpInfoAsync(categoryId, imageId, storeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// category.image.delete Delete image
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Defines category id where the image should be deleted</param>
        /// <param name="imageId">Define image id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttributeDelete200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AttributeDelete200Response>> CategoryImageDeleteWithHttpInfoAsync(string categoryId, string imageId, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'categoryId' when calling CategoryApi->CategoryImageDelete");
            }

            // verify the required parameter 'imageId' is set
            if (imageId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'imageId' when calling CategoryApi->CategoryImageDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "category_id", categoryId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "image_id", imageId));
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }

            localVarRequestOptions.Operation = "CategoryApi.CategoryImageDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<AttributeDelete200Response>("/category.image.delete.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CategoryImageDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// category.info Get category info about category ID*** or specify other category ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Retrieves category&#39;s info specified by category id</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,parent_id,name,description&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="storeId">Retrieves category info  specified by store id (optional)</param>
        /// <param name="langId">Retrieves category info  specified by language id (optional)</param>
        /// <param name="schemaType">The name of the requirements set for the provided schema. (optional)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoryInfo200Response</returns>
        public CategoryInfo200Response CategoryInfo(string id, string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? storeId = default(string?), string? langId = default(string?), string? schemaType = default(string?), string? reportRequestId = default(string?), bool? disableReportCache = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CategoryInfo200Response> localVarResponse = CategoryInfoWithHttpInfo(id, varParams, responseFields, exclude, storeId, langId, schemaType, reportRequestId, disableReportCache);
            return localVarResponse.Data;
        }

        /// <summary>
        /// category.info Get category info about category ID*** or specify other category ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Retrieves category&#39;s info specified by category id</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,parent_id,name,description&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="storeId">Retrieves category info  specified by store id (optional)</param>
        /// <param name="langId">Retrieves category info  specified by language id (optional)</param>
        /// <param name="schemaType">The name of the requirements set for the provided schema. (optional)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoryInfo200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<CategoryInfo200Response> CategoryInfoWithHttpInfo(string id, string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? storeId = default(string?), string? langId = default(string?), string? schemaType = default(string?), string? reportRequestId = default(string?), bool? disableReportCache = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling CategoryApi->CategoryInfo");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }
            if (schemaType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "schema_type", schemaType));
            }
            if (reportRequestId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "report_request_id", reportRequestId));
            }
            if (disableReportCache != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "disable_report_cache", disableReportCache));
            }

            localVarRequestOptions.Operation = "CategoryApi.CategoryInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CategoryInfo200Response>("/category.info.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CategoryInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// category.info Get category info about category ID*** or specify other category ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Retrieves category&#39;s info specified by category id</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,parent_id,name,description&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="storeId">Retrieves category info  specified by store id (optional)</param>
        /// <param name="langId">Retrieves category info  specified by language id (optional)</param>
        /// <param name="schemaType">The name of the requirements set for the provided schema. (optional)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryInfo200Response</returns>
        public async System.Threading.Tasks.Task<CategoryInfo200Response> CategoryInfoAsync(string id, string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? storeId = default(string?), string? langId = default(string?), string? schemaType = default(string?), string? reportRequestId = default(string?), bool? disableReportCache = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CategoryInfo200Response> localVarResponse = await CategoryInfoWithHttpInfoAsync(id, varParams, responseFields, exclude, storeId, langId, schemaType, reportRequestId, disableReportCache, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// category.info Get category info about category ID*** or specify other category ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Retrieves category&#39;s info specified by category id</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,parent_id,name,description&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="storeId">Retrieves category info  specified by store id (optional)</param>
        /// <param name="langId">Retrieves category info  specified by language id (optional)</param>
        /// <param name="schemaType">The name of the requirements set for the provided schema. (optional)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryInfo200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CategoryInfo200Response>> CategoryInfoWithHttpInfoAsync(string id, string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? storeId = default(string?), string? langId = default(string?), string? schemaType = default(string?), string? reportRequestId = default(string?), bool? disableReportCache = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling CategoryApi->CategoryInfo");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }
            if (schemaType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "schema_type", schemaType));
            }
            if (reportRequestId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "report_request_id", reportRequestId));
            }
            if (disableReportCache != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "disable_report_cache", disableReportCache));
            }

            localVarRequestOptions.Operation = "CategoryApi.CategoryInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CategoryInfo200Response>("/category.info.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CategoryInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// category.list Get list of categories from store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="parentId">Retrieves categories specified by parent id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,parent_id,name,description&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="storeId">Retrieves categories specified by store id (optional)</param>
        /// <param name="langId">Retrieves categorys specified by language id (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="avail">Defines category&#39;s visibility status (optional, default to true)</param>
        /// <param name="productType">A categorization for the product (optional)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Category search that is specified by field (optional)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="disableCache">Disable cache for current request (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelResponseCategoryList</returns>
        public ModelResponseCategoryList CategoryList(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? parentId = default(string?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? storeId = default(string?), string? langId = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), bool? avail = default(bool?), string? productType = default(string?), string? findValue = default(string?), string? findWhere = default(string?), string? reportRequestId = default(string?), bool? disableReportCache = default(bool?), bool? disableCache = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModelResponseCategoryList> localVarResponse = CategoryListWithHttpInfo(start, count, pageCursor, parentId, varParams, responseFields, exclude, storeId, langId, createdFrom, createdTo, modifiedFrom, modifiedTo, avail, productType, findValue, findWhere, reportRequestId, disableReportCache, disableCache);
            return localVarResponse.Data;
        }

        /// <summary>
        /// category.list Get list of categories from store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="parentId">Retrieves categories specified by parent id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,parent_id,name,description&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="storeId">Retrieves categories specified by store id (optional)</param>
        /// <param name="langId">Retrieves categorys specified by language id (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="avail">Defines category&#39;s visibility status (optional, default to true)</param>
        /// <param name="productType">A categorization for the product (optional)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Category search that is specified by field (optional)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="disableCache">Disable cache for current request (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelResponseCategoryList</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModelResponseCategoryList> CategoryListWithHttpInfo(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? parentId = default(string?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? storeId = default(string?), string? langId = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), bool? avail = default(bool?), string? productType = default(string?), string? findValue = default(string?), string? findWhere = default(string?), string? reportRequestId = default(string?), bool? disableReportCache = default(bool?), bool? disableCache = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (pageCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_cursor", pageCursor));
            }
            if (parentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "parent_id", parentId));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }
            if (createdFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_from", createdFrom));
            }
            if (createdTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_to", createdTo));
            }
            if (modifiedFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_from", modifiedFrom));
            }
            if (modifiedTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_to", modifiedTo));
            }
            if (avail != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "avail", avail));
            }
            if (productType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_type", productType));
            }
            if (findValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_value", findValue));
            }
            if (findWhere != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_where", findWhere));
            }
            if (reportRequestId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "report_request_id", reportRequestId));
            }
            if (disableReportCache != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "disable_report_cache", disableReportCache));
            }
            if (disableCache != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "disable_cache", disableCache));
            }

            localVarRequestOptions.Operation = "CategoryApi.CategoryList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ModelResponseCategoryList>("/category.list.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CategoryList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// category.list Get list of categories from store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="parentId">Retrieves categories specified by parent id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,parent_id,name,description&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="storeId">Retrieves categories specified by store id (optional)</param>
        /// <param name="langId">Retrieves categorys specified by language id (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="avail">Defines category&#39;s visibility status (optional, default to true)</param>
        /// <param name="productType">A categorization for the product (optional)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Category search that is specified by field (optional)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="disableCache">Disable cache for current request (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelResponseCategoryList</returns>
        public async System.Threading.Tasks.Task<ModelResponseCategoryList> CategoryListAsync(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? parentId = default(string?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? storeId = default(string?), string? langId = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), bool? avail = default(bool?), string? productType = default(string?), string? findValue = default(string?), string? findWhere = default(string?), string? reportRequestId = default(string?), bool? disableReportCache = default(bool?), bool? disableCache = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModelResponseCategoryList> localVarResponse = await CategoryListWithHttpInfoAsync(start, count, pageCursor, parentId, varParams, responseFields, exclude, storeId, langId, createdFrom, createdTo, modifiedFrom, modifiedTo, avail, productType, findValue, findWhere, reportRequestId, disableReportCache, disableCache, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// category.list Get list of categories from store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="parentId">Retrieves categories specified by parent id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,parent_id,name,description&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="storeId">Retrieves categories specified by store id (optional)</param>
        /// <param name="langId">Retrieves categorys specified by language id (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="avail">Defines category&#39;s visibility status (optional, default to true)</param>
        /// <param name="productType">A categorization for the product (optional)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Category search that is specified by field (optional)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="disableCache">Disable cache for current request (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelResponseCategoryList)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModelResponseCategoryList>> CategoryListWithHttpInfoAsync(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? parentId = default(string?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? storeId = default(string?), string? langId = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), bool? avail = default(bool?), string? productType = default(string?), string? findValue = default(string?), string? findWhere = default(string?), string? reportRequestId = default(string?), bool? disableReportCache = default(bool?), bool? disableCache = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (pageCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_cursor", pageCursor));
            }
            if (parentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "parent_id", parentId));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }
            if (createdFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_from", createdFrom));
            }
            if (createdTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_to", createdTo));
            }
            if (modifiedFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_from", modifiedFrom));
            }
            if (modifiedTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_to", modifiedTo));
            }
            if (avail != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "avail", avail));
            }
            if (productType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_type", productType));
            }
            if (findValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_value", findValue));
            }
            if (findWhere != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_where", findWhere));
            }
            if (reportRequestId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "report_request_id", reportRequestId));
            }
            if (disableReportCache != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "disable_report_cache", disableReportCache));
            }
            if (disableCache != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "disable_cache", disableCache));
            }

            localVarRequestOptions.Operation = "CategoryApi.CategoryList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ModelResponseCategoryList>("/category.list.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CategoryList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// category.unassign Unassign category to product
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Defines category unassign, specified by category id</param>
        /// <param name="productId">Defines category unassign to the product, specified by product id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CartConfigUpdate200Response</returns>
        public CartConfigUpdate200Response CategoryUnassign(string categoryId, string productId, string? storeId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CartConfigUpdate200Response> localVarResponse = CategoryUnassignWithHttpInfo(categoryId, productId, storeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// category.unassign Unassign category to product
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Defines category unassign, specified by category id</param>
        /// <param name="productId">Defines category unassign to the product, specified by product id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CartConfigUpdate200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<CartConfigUpdate200Response> CategoryUnassignWithHttpInfo(string categoryId, string productId, string? storeId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'categoryId' when calling CategoryApi->CategoryUnassign");
            }

            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling CategoryApi->CategoryUnassign");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "category_id", categoryId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_id", productId));
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }

            localVarRequestOptions.Operation = "CategoryApi.CategoryUnassign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CartConfigUpdate200Response>("/category.unassign.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CategoryUnassign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// category.unassign Unassign category to product
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Defines category unassign, specified by category id</param>
        /// <param name="productId">Defines category unassign to the product, specified by product id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CartConfigUpdate200Response</returns>
        public async System.Threading.Tasks.Task<CartConfigUpdate200Response> CategoryUnassignAsync(string categoryId, string productId, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CartConfigUpdate200Response> localVarResponse = await CategoryUnassignWithHttpInfoAsync(categoryId, productId, storeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// category.unassign Unassign category to product
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">Defines category unassign, specified by category id</param>
        /// <param name="productId">Defines category unassign to the product, specified by product id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CartConfigUpdate200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CartConfigUpdate200Response>> CategoryUnassignWithHttpInfoAsync(string categoryId, string productId, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'categoryId' when calling CategoryApi->CategoryUnassign");
            }

            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling CategoryApi->CategoryUnassign");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "category_id", categoryId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_id", productId));
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }

            localVarRequestOptions.Operation = "CategoryApi.CategoryUnassign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CartConfigUpdate200Response>("/category.unassign.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CategoryUnassign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// category.update Update category in store
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Defines category update specified by category id</param>
        /// <param name="name">Defines new category’s name (optional)</param>
        /// <param name="parentId">Defines new parent category id (optional)</param>
        /// <param name="storesIds">Update category in the stores that is specified by comma-separated stores&#39; id (optional)</param>
        /// <param name="avail">Defines category&#39;s visibility status (optional)</param>
        /// <param name="sortOrder">Sort number in the list (optional)</param>
        /// <param name="modifiedTime">Entity&#39;s date modification (optional)</param>
        /// <param name="description">Defines new category&#39;s description (optional)</param>
        /// <param name="shortDescription">Defines short description (optional)</param>
        /// <param name="metaTitle">Defines unique meta title for each entity (optional)</param>
        /// <param name="metaDescription">Defines unique meta description of a entity (optional)</param>
        /// <param name="metaKeywords">Defines unique meta keywords for each entity (optional)</param>
        /// <param name="seoUrl">Defines unique category&#39;s URL for SEO (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountConfigUpdate200Response</returns>
        public AccountConfigUpdate200Response CategoryUpdate(string id, string? name = default(string?), string? parentId = default(string?), string? storesIds = default(string?), bool? avail = default(bool?), int? sortOrder = default(int?), string? modifiedTime = default(string?), string? description = default(string?), string? shortDescription = default(string?), string? metaTitle = default(string?), string? metaDescription = default(string?), string? metaKeywords = default(string?), string? seoUrl = default(string?), string? langId = default(string?), string? storeId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AccountConfigUpdate200Response> localVarResponse = CategoryUpdateWithHttpInfo(id, name, parentId, storesIds, avail, sortOrder, modifiedTime, description, shortDescription, metaTitle, metaDescription, metaKeywords, seoUrl, langId, storeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// category.update Update category in store
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Defines category update specified by category id</param>
        /// <param name="name">Defines new category’s name (optional)</param>
        /// <param name="parentId">Defines new parent category id (optional)</param>
        /// <param name="storesIds">Update category in the stores that is specified by comma-separated stores&#39; id (optional)</param>
        /// <param name="avail">Defines category&#39;s visibility status (optional)</param>
        /// <param name="sortOrder">Sort number in the list (optional)</param>
        /// <param name="modifiedTime">Entity&#39;s date modification (optional)</param>
        /// <param name="description">Defines new category&#39;s description (optional)</param>
        /// <param name="shortDescription">Defines short description (optional)</param>
        /// <param name="metaTitle">Defines unique meta title for each entity (optional)</param>
        /// <param name="metaDescription">Defines unique meta description of a entity (optional)</param>
        /// <param name="metaKeywords">Defines unique meta keywords for each entity (optional)</param>
        /// <param name="seoUrl">Defines unique category&#39;s URL for SEO (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountConfigUpdate200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<AccountConfigUpdate200Response> CategoryUpdateWithHttpInfo(string id, string? name = default(string?), string? parentId = default(string?), string? storesIds = default(string?), bool? avail = default(bool?), int? sortOrder = default(int?), string? modifiedTime = default(string?), string? description = default(string?), string? shortDescription = default(string?), string? metaTitle = default(string?), string? metaDescription = default(string?), string? metaKeywords = default(string?), string? seoUrl = default(string?), string? langId = default(string?), string? storeId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling CategoryApi->CategoryUpdate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (parentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "parent_id", parentId));
            }
            if (storesIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "stores_ids", storesIds));
            }
            if (avail != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "avail", avail));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sort_order", sortOrder));
            }
            if (modifiedTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_time", modifiedTime));
            }
            if (description != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "description", description));
            }
            if (shortDescription != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "short_description", shortDescription));
            }
            if (metaTitle != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "meta_title", metaTitle));
            }
            if (metaDescription != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "meta_description", metaDescription));
            }
            if (metaKeywords != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "meta_keywords", metaKeywords));
            }
            if (seoUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "seo_url", seoUrl));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }

            localVarRequestOptions.Operation = "CategoryApi.CategoryUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<AccountConfigUpdate200Response>("/category.update.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CategoryUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// category.update Update category in store
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Defines category update specified by category id</param>
        /// <param name="name">Defines new category’s name (optional)</param>
        /// <param name="parentId">Defines new parent category id (optional)</param>
        /// <param name="storesIds">Update category in the stores that is specified by comma-separated stores&#39; id (optional)</param>
        /// <param name="avail">Defines category&#39;s visibility status (optional)</param>
        /// <param name="sortOrder">Sort number in the list (optional)</param>
        /// <param name="modifiedTime">Entity&#39;s date modification (optional)</param>
        /// <param name="description">Defines new category&#39;s description (optional)</param>
        /// <param name="shortDescription">Defines short description (optional)</param>
        /// <param name="metaTitle">Defines unique meta title for each entity (optional)</param>
        /// <param name="metaDescription">Defines unique meta description of a entity (optional)</param>
        /// <param name="metaKeywords">Defines unique meta keywords for each entity (optional)</param>
        /// <param name="seoUrl">Defines unique category&#39;s URL for SEO (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountConfigUpdate200Response</returns>
        public async System.Threading.Tasks.Task<AccountConfigUpdate200Response> CategoryUpdateAsync(string id, string? name = default(string?), string? parentId = default(string?), string? storesIds = default(string?), bool? avail = default(bool?), int? sortOrder = default(int?), string? modifiedTime = default(string?), string? description = default(string?), string? shortDescription = default(string?), string? metaTitle = default(string?), string? metaDescription = default(string?), string? metaKeywords = default(string?), string? seoUrl = default(string?), string? langId = default(string?), string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AccountConfigUpdate200Response> localVarResponse = await CategoryUpdateWithHttpInfoAsync(id, name, parentId, storesIds, avail, sortOrder, modifiedTime, description, shortDescription, metaTitle, metaDescription, metaKeywords, seoUrl, langId, storeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// category.update Update category in store
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Defines category update specified by category id</param>
        /// <param name="name">Defines new category’s name (optional)</param>
        /// <param name="parentId">Defines new parent category id (optional)</param>
        /// <param name="storesIds">Update category in the stores that is specified by comma-separated stores&#39; id (optional)</param>
        /// <param name="avail">Defines category&#39;s visibility status (optional)</param>
        /// <param name="sortOrder">Sort number in the list (optional)</param>
        /// <param name="modifiedTime">Entity&#39;s date modification (optional)</param>
        /// <param name="description">Defines new category&#39;s description (optional)</param>
        /// <param name="shortDescription">Defines short description (optional)</param>
        /// <param name="metaTitle">Defines unique meta title for each entity (optional)</param>
        /// <param name="metaDescription">Defines unique meta description of a entity (optional)</param>
        /// <param name="metaKeywords">Defines unique meta keywords for each entity (optional)</param>
        /// <param name="seoUrl">Defines unique category&#39;s URL for SEO (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountConfigUpdate200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AccountConfigUpdate200Response>> CategoryUpdateWithHttpInfoAsync(string id, string? name = default(string?), string? parentId = default(string?), string? storesIds = default(string?), bool? avail = default(bool?), int? sortOrder = default(int?), string? modifiedTime = default(string?), string? description = default(string?), string? shortDescription = default(string?), string? metaTitle = default(string?), string? metaDescription = default(string?), string? metaKeywords = default(string?), string? seoUrl = default(string?), string? langId = default(string?), string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling CategoryApi->CategoryUpdate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (parentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "parent_id", parentId));
            }
            if (storesIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "stores_ids", storesIds));
            }
            if (avail != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "avail", avail));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sort_order", sortOrder));
            }
            if (modifiedTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_time", modifiedTime));
            }
            if (description != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "description", description));
            }
            if (shortDescription != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "short_description", shortDescription));
            }
            if (metaTitle != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "meta_title", metaTitle));
            }
            if (metaDescription != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "meta_description", metaDescription));
            }
            if (metaKeywords != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "meta_keywords", metaKeywords));
            }
            if (seoUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "seo_url", seoUrl));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }

            localVarRequestOptions.Operation = "CategoryApi.CategoryUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<AccountConfigUpdate200Response>("/category.update.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CategoryUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
