/*
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CategoryAddBatchPayloadInner
    /// </summary>
    [DataContract(Name = "CategoryAddBatch_payload_inner")]
    public partial class CategoryAddBatchPayloadInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CategoryAddBatchPayloadInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CategoryAddBatchPayloadInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CategoryAddBatchPayloadInner" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="avail">avail.</param>
        /// <param name="description">description.</param>
        /// <param name="metaTitle">metaTitle.</param>
        /// <param name="metaDescription">metaDescription.</param>
        /// <param name="metaKeywords">metaKeywords.</param>
        /// <param name="parentId">parentId.</param>
        /// <param name="sortOrder">sortOrder.</param>
        /// <param name="seoUrl">seoUrl.</param>
        /// <param name="storeId">storeId.</param>
        /// <param name="images">images.</param>
        /// <param name="storesIds">storesIds.</param>
        public CategoryAddBatchPayloadInner(string name = default(string), bool avail = default(bool), string description = default(string), string metaTitle = default(string), string metaDescription = default(string), List<string> metaKeywords = default(List<string>), string parentId = default(string), int sortOrder = default(int), string seoUrl = default(string), string storeId = default(string), List<CategoryAddBatchPayloadInnerImagesInner> images = default(List<CategoryAddBatchPayloadInnerImagesInner>), List<string> storesIds = default(List<string>))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CategoryAddBatchPayloadInner and cannot be null");
            }
            this.Name = name;
            this.Avail = avail;
            this.Description = description;
            this.MetaTitle = metaTitle;
            this.MetaDescription = metaDescription;
            this.MetaKeywords = metaKeywords;
            this.ParentId = parentId;
            this.SortOrder = sortOrder;
            this.SeoUrl = seoUrl;
            this.StoreId = storeId;
            this.Images = images;
            this.StoresIds = storesIds;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Avail
        /// </summary>
        [DataMember(Name = "avail", EmitDefaultValue = true)]
        public bool Avail { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets MetaTitle
        /// </summary>
        [DataMember(Name = "meta_title", EmitDefaultValue = false)]
        public string MetaTitle { get; set; }

        /// <summary>
        /// Gets or Sets MetaDescription
        /// </summary>
        [DataMember(Name = "meta_description", EmitDefaultValue = false)]
        public string MetaDescription { get; set; }

        /// <summary>
        /// Gets or Sets MetaKeywords
        /// </summary>
        [DataMember(Name = "meta_keywords", EmitDefaultValue = false)]
        public List<string> MetaKeywords { get; set; }

        /// <summary>
        /// Gets or Sets ParentId
        /// </summary>
        [DataMember(Name = "parent_id", EmitDefaultValue = false)]
        public string ParentId { get; set; }

        /// <summary>
        /// Gets or Sets SortOrder
        /// </summary>
        [DataMember(Name = "sort_order", EmitDefaultValue = false)]
        public int SortOrder { get; set; }

        /// <summary>
        /// Gets or Sets SeoUrl
        /// </summary>
        [DataMember(Name = "seo_url", EmitDefaultValue = false)]
        public string SeoUrl { get; set; }

        /// <summary>
        /// Gets or Sets StoreId
        /// </summary>
        [DataMember(Name = "store_id", EmitDefaultValue = false)]
        public string StoreId { get; set; }

        /// <summary>
        /// Gets or Sets Images
        /// </summary>
        [DataMember(Name = "images", EmitDefaultValue = false)]
        public List<CategoryAddBatchPayloadInnerImagesInner> Images { get; set; }

        /// <summary>
        /// Gets or Sets StoresIds
        /// </summary>
        [DataMember(Name = "stores_ids", EmitDefaultValue = false)]
        public List<string> StoresIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CategoryAddBatchPayloadInner {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Avail: ").Append(Avail).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  MetaTitle: ").Append(MetaTitle).Append("\n");
            sb.Append("  MetaDescription: ").Append(MetaDescription).Append("\n");
            sb.Append("  MetaKeywords: ").Append(MetaKeywords).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  SortOrder: ").Append(SortOrder).Append("\n");
            sb.Append("  SeoUrl: ").Append(SeoUrl).Append("\n");
            sb.Append("  StoreId: ").Append(StoreId).Append("\n");
            sb.Append("  Images: ").Append(Images).Append("\n");
            sb.Append("  StoresIds: ").Append(StoresIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
