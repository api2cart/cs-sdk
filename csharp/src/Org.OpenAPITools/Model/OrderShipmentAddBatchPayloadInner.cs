/*
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OrderShipmentAddBatchPayloadInner
    /// </summary>
    [DataContract(Name = "OrderShipmentAddBatch_payload_inner")]
    public partial class OrderShipmentAddBatchPayloadInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderShipmentAddBatchPayloadInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderShipmentAddBatchPayloadInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderShipmentAddBatchPayloadInner" /> class.
        /// </summary>
        /// <param name="orderId">orderId (required).</param>
        /// <param name="storeId">storeId.</param>
        /// <param name="warehouseId">warehouseId.</param>
        /// <param name="carrierId">carrierId.</param>
        /// <param name="carrierName">carrierName.</param>
        /// <param name="trackingNumber">trackingNumber (required).</param>
        /// <param name="trackingLink">trackingLink.</param>
        /// <param name="shipmentProvider">shipmentProvider.</param>
        /// <param name="items">items.</param>
        /// <param name="sendNotifications">sendNotifications.</param>
        public OrderShipmentAddBatchPayloadInner(string orderId = default(string), string storeId = default(string), string warehouseId = default(string), string carrierId = default(string), string carrierName = default(string), string trackingNumber = default(string), string trackingLink = default(string), string shipmentProvider = default(string), List<OrderShipmentAddBatchPayloadInnerItemsInner> items = default(List<OrderShipmentAddBatchPayloadInnerItemsInner>), bool sendNotifications = default(bool))
        {
            // to ensure "orderId" is required (not null)
            if (orderId == null)
            {
                throw new ArgumentNullException("orderId is a required property for OrderShipmentAddBatchPayloadInner and cannot be null");
            }
            this.OrderId = orderId;
            // to ensure "trackingNumber" is required (not null)
            if (trackingNumber == null)
            {
                throw new ArgumentNullException("trackingNumber is a required property for OrderShipmentAddBatchPayloadInner and cannot be null");
            }
            this.TrackingNumber = trackingNumber;
            this.StoreId = storeId;
            this.WarehouseId = warehouseId;
            this.CarrierId = carrierId;
            this.CarrierName = carrierName;
            this.TrackingLink = trackingLink;
            this.ShipmentProvider = shipmentProvider;
            this.Items = items;
            this.SendNotifications = sendNotifications;
        }

        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [DataMember(Name = "order_id", IsRequired = true, EmitDefaultValue = true)]
        public string OrderId { get; set; }

        /// <summary>
        /// Gets or Sets StoreId
        /// </summary>
        [DataMember(Name = "store_id", EmitDefaultValue = false)]
        public string StoreId { get; set; }

        /// <summary>
        /// Gets or Sets WarehouseId
        /// </summary>
        [DataMember(Name = "warehouse_id", EmitDefaultValue = false)]
        public string WarehouseId { get; set; }

        /// <summary>
        /// Gets or Sets CarrierId
        /// </summary>
        [DataMember(Name = "carrier_id", EmitDefaultValue = false)]
        public string CarrierId { get; set; }

        /// <summary>
        /// Gets or Sets CarrierName
        /// </summary>
        [DataMember(Name = "carrier_name", EmitDefaultValue = false)]
        public string CarrierName { get; set; }

        /// <summary>
        /// Gets or Sets TrackingNumber
        /// </summary>
        [DataMember(Name = "tracking_number", IsRequired = true, EmitDefaultValue = true)]
        public string TrackingNumber { get; set; }

        /// <summary>
        /// Gets or Sets TrackingLink
        /// </summary>
        [DataMember(Name = "tracking_link", EmitDefaultValue = false)]
        public string TrackingLink { get; set; }

        /// <summary>
        /// Gets or Sets ShipmentProvider
        /// </summary>
        [DataMember(Name = "shipment_provider", EmitDefaultValue = false)]
        public string ShipmentProvider { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name = "items", EmitDefaultValue = false)]
        public List<OrderShipmentAddBatchPayloadInnerItemsInner> Items { get; set; }

        /// <summary>
        /// Gets or Sets SendNotifications
        /// </summary>
        [DataMember(Name = "send_notifications", EmitDefaultValue = true)]
        public bool SendNotifications { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderShipmentAddBatchPayloadInner {\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  StoreId: ").Append(StoreId).Append("\n");
            sb.Append("  WarehouseId: ").Append(WarehouseId).Append("\n");
            sb.Append("  CarrierId: ").Append(CarrierId).Append("\n");
            sb.Append("  CarrierName: ").Append(CarrierName).Append("\n");
            sb.Append("  TrackingNumber: ").Append(TrackingNumber).Append("\n");
            sb.Append("  TrackingLink: ").Append(TrackingLink).Append("\n");
            sb.Append("  ShipmentProvider: ").Append(ShipmentProvider).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  SendNotifications: ").Append(SendNotifications).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
