/*
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Manufacturer information.
    /// </summary>
    [DataContract(Name = "ProductAdd_manufacturer_info")]
    public partial class ProductAddManufacturerInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductAddManufacturerInfo" /> class.
        /// </summary>
        /// <param name="name">Defines manufacturer&#x60;s name.</param>
        /// <param name="address">Defines manufacturer&#x60;s address.</param>
        /// <param name="phone">Defines manufacturer&#x60;s phone.</param>
        /// <param name="email">Defines manufacturer&#x60;s email.</param>
        public ProductAddManufacturerInfo(string name = default(string), string address = default(string), string phone = default(string), string email = default(string))
        {
            this.Name = name;
            this.Address = address;
            this.Phone = phone;
            this.Email = email;
        }

        /// <summary>
        /// Defines manufacturer&#x60;s name
        /// </summary>
        /// <value>Defines manufacturer&#x60;s name</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Defines manufacturer&#x60;s address
        /// </summary>
        /// <value>Defines manufacturer&#x60;s address</value>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public string Address { get; set; }

        /// <summary>
        /// Defines manufacturer&#x60;s phone
        /// </summary>
        /// <value>Defines manufacturer&#x60;s phone</value>
        [DataMember(Name = "phone", EmitDefaultValue = false)]
        public string Phone { get; set; }

        /// <summary>
        /// Defines manufacturer&#x60;s email
        /// </summary>
        /// <value>Defines manufacturer&#x60;s email</value>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProductAddManufacturerInfo {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            // Address (string) minLength
            if (this.Address != null && this.Address.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Address, length must be greater than 1.", new [] { "Address" });
            }

            // Phone (string) minLength
            if (this.Phone != null && this.Phone.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Phone, length must be greater than 1.", new [] { "Phone" });
            }

            // Email (string) minLength
            if (this.Email != null && this.Email.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Email, length must be greater than 1.", new [] { "Email" });
            }

            yield break;
        }
    }

}
