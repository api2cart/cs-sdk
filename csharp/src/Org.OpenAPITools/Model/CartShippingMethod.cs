/*
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CartShippingMethod
    /// </summary>
    [DataContract(Name = "Cart_ShippingMethod")]
    public partial class CartShippingMethod : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CartShippingMethod" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="handlingFee">handlingFee.</param>
        /// <param name="handlingEnabled">handlingEnabled.</param>
        /// <param name="handlingType">handlingType.</param>
        /// <param name="defaultPrice">defaultPrice.</param>
        /// <param name="defaultPriceType">defaultPriceType.</param>
        /// <param name="type">type.</param>
        /// <param name="enabled">enabled.</param>
        /// <param name="minOrderAmount">minOrderAmount.</param>
        /// <param name="rates">rates.</param>
        /// <param name="additionalFields">additionalFields.</param>
        /// <param name="customFields">customFields.</param>
        public CartShippingMethod(string name = default(string), string handlingFee = default(string), string handlingEnabled = default(string), string handlingType = default(string), string defaultPrice = default(string), string defaultPriceType = default(string), string type = default(string), string enabled = default(string), string minOrderAmount = default(string), List<CartShippingMethodRate> rates = default(List<CartShippingMethodRate>), Object additionalFields = default(Object), Object customFields = default(Object))
        {
            this.Name = name;
            this.HandlingFee = handlingFee;
            this.HandlingEnabled = handlingEnabled;
            this.HandlingType = handlingType;
            this.DefaultPrice = defaultPrice;
            this.DefaultPriceType = defaultPriceType;
            this.Type = type;
            this.Enabled = enabled;
            this.MinOrderAmount = minOrderAmount;
            this.Rates = rates;
            this.AdditionalFields = additionalFields;
            this.CustomFields = customFields;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets HandlingFee
        /// </summary>
        [DataMember(Name = "handling_fee", EmitDefaultValue = false)]
        public string HandlingFee { get; set; }

        /// <summary>
        /// Gets or Sets HandlingEnabled
        /// </summary>
        [DataMember(Name = "handling_enabled", EmitDefaultValue = false)]
        public string HandlingEnabled { get; set; }

        /// <summary>
        /// Gets or Sets HandlingType
        /// </summary>
        [DataMember(Name = "handling_type", EmitDefaultValue = false)]
        public string HandlingType { get; set; }

        /// <summary>
        /// Gets or Sets DefaultPrice
        /// </summary>
        [DataMember(Name = "default_price", EmitDefaultValue = false)]
        public string DefaultPrice { get; set; }

        /// <summary>
        /// Gets or Sets DefaultPriceType
        /// </summary>
        [DataMember(Name = "default_price_type", EmitDefaultValue = false)]
        public string DefaultPriceType { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name = "enabled", EmitDefaultValue = false)]
        public string Enabled { get; set; }

        /// <summary>
        /// Gets or Sets MinOrderAmount
        /// </summary>
        [DataMember(Name = "min_order_amount", EmitDefaultValue = false)]
        public string MinOrderAmount { get; set; }

        /// <summary>
        /// Gets or Sets Rates
        /// </summary>
        [DataMember(Name = "rates", EmitDefaultValue = false)]
        public List<CartShippingMethodRate> Rates { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalFields
        /// </summary>
        [DataMember(Name = "additional_fields", EmitDefaultValue = false)]
        public Object AdditionalFields { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name = "custom_fields", EmitDefaultValue = false)]
        public Object CustomFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CartShippingMethod {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  HandlingFee: ").Append(HandlingFee).Append("\n");
            sb.Append("  HandlingEnabled: ").Append(HandlingEnabled).Append("\n");
            sb.Append("  HandlingType: ").Append(HandlingType).Append("\n");
            sb.Append("  DefaultPrice: ").Append(DefaultPrice).Append("\n");
            sb.Append("  DefaultPriceType: ").Append(DefaultPriceType).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  MinOrderAmount: ").Append(MinOrderAmount).Append("\n");
            sb.Append("  Rates: ").Append(Rates).Append("\n");
            sb.Append("  AdditionalFields: ").Append(AdditionalFields).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
