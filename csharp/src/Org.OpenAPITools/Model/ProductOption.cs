/*
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ProductOption
    /// </summary>
    [DataContract(Name = "Product_Option")]
    public partial class ProductOption : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductOption" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="productOptionId">productOptionId.</param>
        /// <param name="name">name.</param>
        /// <param name="description">description.</param>
        /// <param name="sortOrder">sortOrder.</param>
        /// <param name="type">type.</param>
        /// <param name="required">required.</param>
        /// <param name="available">available.</param>
        /// <param name="usedInCombination">usedInCombination.</param>
        /// <param name="optionItems">optionItems.</param>
        /// <param name="additionalFields">additionalFields.</param>
        /// <param name="customFields">customFields.</param>
        public ProductOption(string id = default(string), string productOptionId = default(string), string name = default(string), string description = default(string), int sortOrder = default(int), string type = default(string), bool required = default(bool), bool available = default(bool), bool usedInCombination = default(bool), List<ProductOptionItem> optionItems = default(List<ProductOptionItem>), Object additionalFields = default(Object), Object customFields = default(Object))
        {
            this.Id = id;
            this.ProductOptionId = productOptionId;
            this.Name = name;
            this.Description = description;
            this.SortOrder = sortOrder;
            this.Type = type;
            this.Required = required;
            this.Available = available;
            this.UsedInCombination = usedInCombination;
            this.OptionItems = optionItems;
            this.AdditionalFields = additionalFields;
            this.CustomFields = customFields;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ProductOptionId
        /// </summary>
        [DataMember(Name = "product_option_id", EmitDefaultValue = false)]
        public string ProductOptionId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets SortOrder
        /// </summary>
        [DataMember(Name = "sort_order", EmitDefaultValue = false)]
        public int SortOrder { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Required
        /// </summary>
        [DataMember(Name = "required", EmitDefaultValue = true)]
        public bool Required { get; set; }

        /// <summary>
        /// Gets or Sets Available
        /// </summary>
        [DataMember(Name = "available", EmitDefaultValue = true)]
        public bool Available { get; set; }

        /// <summary>
        /// Gets or Sets UsedInCombination
        /// </summary>
        [DataMember(Name = "used_in_combination", EmitDefaultValue = true)]
        public bool UsedInCombination { get; set; }

        /// <summary>
        /// Gets or Sets OptionItems
        /// </summary>
        [DataMember(Name = "option_items", EmitDefaultValue = false)]
        public List<ProductOptionItem> OptionItems { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalFields
        /// </summary>
        [DataMember(Name = "additional_fields", EmitDefaultValue = false)]
        public Object AdditionalFields { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name = "custom_fields", EmitDefaultValue = false)]
        public Object CustomFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProductOption {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProductOptionId: ").Append(ProductOptionId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  SortOrder: ").Append(SortOrder).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  Available: ").Append(Available).Append("\n");
            sb.Append("  UsedInCombination: ").Append(UsedInCombination).Append("\n");
            sb.Append("  OptionItems: ").Append(OptionItems).Append("\n");
            sb.Append("  AdditionalFields: ").Append(AdditionalFields).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
