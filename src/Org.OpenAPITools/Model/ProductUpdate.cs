/*
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ProductUpdate
    /// </summary>
    [DataContract(Name = "ProductUpdate")]
    public partial class ProductUpdate : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductUpdate" /> class.
        /// </summary>
        /// <param name="id">Defines product id that has to be updated.</param>
        /// <param name="model">Defines product model that has to be updated.</param>
        /// <param name="oldPrice">Defines product&#39;s old price.</param>
        /// <param name="price">Defines new product&#39;s price.</param>
        /// <param name="specialPrice">Defines new product&#39;s special price.</param>
        /// <param name="spriceCreate">Defines the date of special price creation.</param>
        /// <param name="spriceExpire">Defines the term of special price offer duration.</param>
        /// <param name="costPrice">Defines new product&#39;s cost price.</param>
        /// <param name="fixedCostShippingPrice">Specifies product&#39;s fixed cost shipping price.</param>
        /// <param name="retailPrice">Defines new product&#39;s retail price.</param>
        /// <param name="quantity">Defines new product&#39;s quantity.</param>
        /// <param name="availableForView">Specifies the set of visible/invisible products for users.</param>
        /// <param name="weight">Weight.</param>
        /// <param name="weightUnit">Weight Unit.</param>
        /// <param name="dimensionsUnit">Weight Unit.</param>
        /// <param name="increaseQuantity">Defines the incremental changes in product quantity.</param>
        /// <param name="reduceQuantity">Defines the decrement changes in product quantity.</param>
        /// <param name="warehouseId">This parameter is used for selecting a warehouse where you need to set/modify a product quantity..</param>
        /// <param name="reserveQuantity">This parameter allows to reserve/unreserve product quantity..</param>
        /// <param name="manageStock">Defines inventory tracking for product.</param>
        /// <param name="backorderStatus">Set backorder status.</param>
        /// <param name="name">Defines product&#39;s name that has to be updated.</param>
        /// <param name="sku">Defines new product&#39;s sku.</param>
        /// <param name="visible">Set visibility status.</param>
        /// <param name="manufacturer">Defines product&#39;s manufacturer.</param>
        /// <param name="manufacturerId">Defines product&#39;s manufacturer by manufacturer_id.</param>
        /// <param name="categoriesIds">Defines product add that is specified by comma-separated categories id.</param>
        /// <param name="relatedProductsIds">Defines product related products ids that has to be updated.</param>
        /// <param name="upSellProductsIds">Defines product up-sell products ids that has to be updated.</param>
        /// <param name="crossSellProductsIds">Defines product cross-sells products ids that has to be updated.</param>
        /// <param name="description">Defines new product&#39;s description.</param>
        /// <param name="shortDescription">Defines short description.</param>
        /// <param name="metaTitle">Defines unique meta title for each entity.</param>
        /// <param name="metaKeywords">Defines unique meta keywords for each entity.</param>
        /// <param name="metaDescription">Defines unique meta description of a entity.</param>
        /// <param name="storeId">Defines store id where the product should be found.</param>
        /// <param name="langId">Language id.</param>
        /// <param name="inStock">Set stock status.</param>
        /// <param name="status">Defines product&#39;s status.</param>
        /// <param name="seoUrl">Defines unique URL for SEO.</param>
        /// <param name="reportRequestId">Report request id.</param>
        /// <param name="disableReportCache">Disable report cache for current request (default to false).</param>
        /// <param name="reindex">Is reindex required (default to true).</param>
        /// <param name="tags">Product tags.</param>
        /// <param name="clearCache">Is cache clear required (default to true).</param>
        /// <param name="gtin">Global Trade Item Number. An GTIN is an identifier for trade items..</param>
        /// <param name="upc">Universal Product Code. A UPC (UPC-A) is a commonly used identifer for many different products..</param>
        /// <param name="mpn">Manufacturer Part Number. A MPN is an identifier of a particular part design or material used..</param>
        /// <param name="ean">European Article Number. An EAN is a unique 8 or 13-digit identifier that many industries (such as book publishers) use to identify products..</param>
        /// <param name="isbn">International Standard Book Number. An ISBN is a unique identifier for books..</param>
        /// <param name="taxable">Specifies whether a tax is charged (default to true).</param>
        /// <param name="productClass">A categorization for the product.</param>
        /// <param name="height">Defines product&#39;s height.</param>
        /// <param name="length">Defines product&#39;s length.</param>
        /// <param name="width">Defines product&#39;s width.</param>
        /// <param name="harmonizedSystemCode">Harmonized System Code. An HSC is a 6-digit identifier that allows participating countries to classify traded goods on a common basis for customs purposes.</param>
        /// <param name="countryOfOrigin">The country where the inventory item was made.</param>
        /// <param name="searchKeywords">Defines unique search keywords.</param>
        /// <param name="barcode">A barcode is a unique code composed of numbers used as a product identifier..</param>
        /// <param name="isVirtual">Defines whether the product is virtual (default to false).</param>
        /// <param name="isFreeShipping">Specifies product free shipping flag that has to be updated.</param>
        /// <param name="reservePrice">Defines reserve price value.</param>
        /// <param name="buyitnowPrice">Defines buy it now value.</param>
        /// <param name="availFrom">Allows to schedule a time in the future that the item becomes available. The value should be greater than the current date and time..</param>
        /// <param name="taxClassId">Defines tax classes where entity has to be added.</param>
        /// <param name="type">Defines product&#39;s type.</param>
        /// <param name="avail">Defines category&#39;s visibility status (default to true).</param>
        /// <param name="deliveryCode">The delivery promise that applies to offer.</param>
        /// <param name="checkProcessStatus">Disable or enable check process status. Please note that the response will be slower due to additional requests to the store. (default to false).</param>
        /// <param name="packageDetails">packageDetails.</param>
        /// <param name="storesIds">Assign product to the stores that is specified by comma-separated stores&#39; id.</param>
        /// <param name="manufacturerInfo">manufacturerInfo.</param>
        /// <param name="productionPartnerIds">Defines product production partner ids that has to be updated.</param>
        /// <param name="shippingTemplateId">The numeric ID of the shipping template associated with the products in Etsy. You can find possible values in the \&quot;cart.info\&quot; API method response, in the field shipping_zones[]-&gt;id. (default to 0).</param>
        /// <param name="whenMade">An enumerated string for the era in which the maker made the product. (default to &quot;made_to_order&quot;).</param>
        /// <param name="isSupply">If true, it indicates the product as a supply, otherwise it indicates that it is a finished product. (default to true).</param>
        /// <param name="downloadable">Defines whether the product is downloadable (default to false).</param>
        /// <param name="materials">A list of material strings for materials used in the product..</param>
        /// <param name="autoRenew">When true, automatically renews a listing upon its expiration. (default to false).</param>
        /// <param name="onSale">Set whether the product on sale (default to false).</param>
        public ProductUpdate(string id = default(string), string model = default(string), decimal oldPrice = default(decimal), decimal price = default(decimal), decimal specialPrice = default(decimal), string spriceCreate = default(string), string spriceExpire = default(string), decimal costPrice = default(decimal), decimal fixedCostShippingPrice = default(decimal), decimal retailPrice = default(decimal), decimal quantity = default(decimal), bool availableForView = default(bool), decimal weight = default(decimal), string weightUnit = default(string), string dimensionsUnit = default(string), decimal increaseQuantity = default(decimal), decimal reduceQuantity = default(decimal), string warehouseId = default(string), decimal reserveQuantity = default(decimal), bool manageStock = default(bool), string backorderStatus = default(string), string name = default(string), string sku = default(string), string visible = default(string), string manufacturer = default(string), string manufacturerId = default(string), string categoriesIds = default(string), string relatedProductsIds = default(string), string upSellProductsIds = default(string), string crossSellProductsIds = default(string), string description = default(string), string shortDescription = default(string), string metaTitle = default(string), string metaKeywords = default(string), string metaDescription = default(string), string storeId = default(string), string langId = default(string), bool inStock = default(bool), string status = default(string), string seoUrl = default(string), string reportRequestId = default(string), bool disableReportCache = false, bool reindex = true, string tags = default(string), bool clearCache = true, string gtin = default(string), string upc = default(string), string mpn = default(string), string ean = default(string), string isbn = default(string), bool taxable = true, string productClass = default(string), decimal height = default(decimal), decimal length = default(decimal), decimal width = default(decimal), string harmonizedSystemCode = default(string), string countryOfOrigin = default(string), string searchKeywords = default(string), string barcode = default(string), bool isVirtual = false, bool isFreeShipping = default(bool), decimal reservePrice = default(decimal), decimal buyitnowPrice = default(decimal), string availFrom = default(string), string taxClassId = default(string), string type = default(string), bool avail = true, string deliveryCode = default(string), bool checkProcessStatus = false, ProductAddPackageDetails packageDetails = default(ProductAddPackageDetails), string storesIds = default(string), ProductAddManufacturerInfo manufacturerInfo = default(ProductAddManufacturerInfo), string productionPartnerIds = default(string), int shippingTemplateId = 0, string whenMade = @"made_to_order", bool isSupply = true, bool downloadable = false, List<string> materials = default(List<string>), bool autoRenew = false, bool onSale = false)
        {
            this.Id = id;
            this.Model = model;
            this.OldPrice = oldPrice;
            this.Price = price;
            this.SpecialPrice = specialPrice;
            this.SpriceCreate = spriceCreate;
            this.SpriceExpire = spriceExpire;
            this.CostPrice = costPrice;
            this.FixedCostShippingPrice = fixedCostShippingPrice;
            this.RetailPrice = retailPrice;
            this.Quantity = quantity;
            this.AvailableForView = availableForView;
            this.Weight = weight;
            this.WeightUnit = weightUnit;
            this.DimensionsUnit = dimensionsUnit;
            this.IncreaseQuantity = increaseQuantity;
            this.ReduceQuantity = reduceQuantity;
            this.WarehouseId = warehouseId;
            this.ReserveQuantity = reserveQuantity;
            this.ManageStock = manageStock;
            this.BackorderStatus = backorderStatus;
            this.Name = name;
            this.Sku = sku;
            this.Visible = visible;
            this.Manufacturer = manufacturer;
            this.ManufacturerId = manufacturerId;
            this.CategoriesIds = categoriesIds;
            this.RelatedProductsIds = relatedProductsIds;
            this.UpSellProductsIds = upSellProductsIds;
            this.CrossSellProductsIds = crossSellProductsIds;
            this.Description = description;
            this.ShortDescription = shortDescription;
            this.MetaTitle = metaTitle;
            this.MetaKeywords = metaKeywords;
            this.MetaDescription = metaDescription;
            this.StoreId = storeId;
            this.LangId = langId;
            this.InStock = inStock;
            this.Status = status;
            this.SeoUrl = seoUrl;
            this.ReportRequestId = reportRequestId;
            this.DisableReportCache = disableReportCache;
            this.Reindex = reindex;
            this.Tags = tags;
            this.ClearCache = clearCache;
            this.Gtin = gtin;
            this.Upc = upc;
            this.Mpn = mpn;
            this.Ean = ean;
            this.Isbn = isbn;
            this.Taxable = taxable;
            this.ProductClass = productClass;
            this.Height = height;
            this.Length = length;
            this.Width = width;
            this.HarmonizedSystemCode = harmonizedSystemCode;
            this.CountryOfOrigin = countryOfOrigin;
            this.SearchKeywords = searchKeywords;
            this.Barcode = barcode;
            this.IsVirtual = isVirtual;
            this.IsFreeShipping = isFreeShipping;
            this.ReservePrice = reservePrice;
            this.BuyitnowPrice = buyitnowPrice;
            this.AvailFrom = availFrom;
            this.TaxClassId = taxClassId;
            this.Type = type;
            this.Avail = avail;
            this.DeliveryCode = deliveryCode;
            this.CheckProcessStatus = checkProcessStatus;
            this.PackageDetails = packageDetails;
            this.StoresIds = storesIds;
            this.ManufacturerInfo = manufacturerInfo;
            this.ProductionPartnerIds = productionPartnerIds;
            this.ShippingTemplateId = shippingTemplateId;
            // use default value if no "whenMade" provided
            this.WhenMade = whenMade ?? @"made_to_order";
            this.IsSupply = isSupply;
            this.Downloadable = downloadable;
            this.Materials = materials;
            this.AutoRenew = autoRenew;
            this.OnSale = onSale;
        }

        /// <summary>
        /// Defines product id that has to be updated
        /// </summary>
        /// <value>Defines product id that has to be updated</value>
        /*
        <example>10</example>
        */
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Defines product model that has to be updated
        /// </summary>
        /// <value>Defines product model that has to be updated</value>
        /*
        <example>bag_01</example>
        */
        [DataMember(Name = "model", EmitDefaultValue = false)]
        public string Model { get; set; }

        /// <summary>
        /// Defines product&#39;s old price
        /// </summary>
        /// <value>Defines product&#39;s old price</value>
        /*
        <example>99.9</example>
        */
        [DataMember(Name = "old_price", EmitDefaultValue = false)]
        public decimal OldPrice { get; set; }

        /// <summary>
        /// Defines new product&#39;s price
        /// </summary>
        /// <value>Defines new product&#39;s price</value>
        /*
        <example>99.9</example>
        */
        [DataMember(Name = "price", EmitDefaultValue = false)]
        public decimal Price { get; set; }

        /// <summary>
        /// Defines new product&#39;s special price
        /// </summary>
        /// <value>Defines new product&#39;s special price</value>
        /*
        <example>56.9</example>
        */
        [DataMember(Name = "special_price", EmitDefaultValue = false)]
        public decimal SpecialPrice { get; set; }

        /// <summary>
        /// Defines the date of special price creation
        /// </summary>
        /// <value>Defines the date of special price creation</value>
        /*
        <example>2018-08-25 23:56:12</example>
        */
        [DataMember(Name = "sprice_create", EmitDefaultValue = false)]
        public string SpriceCreate { get; set; }

        /// <summary>
        /// Defines the term of special price offer duration
        /// </summary>
        /// <value>Defines the term of special price offer duration</value>
        /*
        <example>2018-08-25 23:56:12</example>
        */
        [DataMember(Name = "sprice_expire", EmitDefaultValue = false)]
        public string SpriceExpire { get; set; }

        /// <summary>
        /// Defines new product&#39;s cost price
        /// </summary>
        /// <value>Defines new product&#39;s cost price</value>
        /*
        <example>65.9</example>
        */
        [DataMember(Name = "cost_price", EmitDefaultValue = false)]
        public decimal CostPrice { get; set; }

        /// <summary>
        /// Specifies product&#39;s fixed cost shipping price
        /// </summary>
        /// <value>Specifies product&#39;s fixed cost shipping price</value>
        /*
        <example>5.5</example>
        */
        [DataMember(Name = "fixed_cost_shipping_price", EmitDefaultValue = false)]
        public decimal FixedCostShippingPrice { get; set; }

        /// <summary>
        /// Defines new product&#39;s retail price
        /// </summary>
        /// <value>Defines new product&#39;s retail price</value>
        /*
        <example>6.9</example>
        */
        [DataMember(Name = "retail_price", EmitDefaultValue = false)]
        public decimal RetailPrice { get; set; }

        /// <summary>
        /// Defines new product&#39;s quantity
        /// </summary>
        /// <value>Defines new product&#39;s quantity</value>
        /*
        <example>6</example>
        */
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public decimal Quantity { get; set; }

        /// <summary>
        /// Specifies the set of visible/invisible products for users
        /// </summary>
        /// <value>Specifies the set of visible/invisible products for users</value>
        /*
        <example>false</example>
        */
        [DataMember(Name = "available_for_view", EmitDefaultValue = true)]
        public bool AvailableForView { get; set; }

        /// <summary>
        /// Weight
        /// </summary>
        /// <value>Weight</value>
        /*
        <example>23.69</example>
        */
        [DataMember(Name = "weight", EmitDefaultValue = false)]
        public decimal Weight { get; set; }

        /// <summary>
        /// Weight Unit
        /// </summary>
        /// <value>Weight Unit</value>
        /*
        <example>lb</example>
        */
        [DataMember(Name = "weight_unit", EmitDefaultValue = false)]
        public string WeightUnit { get; set; }

        /// <summary>
        /// Weight Unit
        /// </summary>
        /// <value>Weight Unit</value>
        /*
        <example>cm</example>
        */
        [DataMember(Name = "dimensions_unit", EmitDefaultValue = false)]
        public string DimensionsUnit { get; set; }

        /// <summary>
        /// Defines the incremental changes in product quantity
        /// </summary>
        /// <value>Defines the incremental changes in product quantity</value>
        /*
        <example>4</example>
        */
        [DataMember(Name = "increase_quantity", EmitDefaultValue = false)]
        public decimal IncreaseQuantity { get; set; }

        /// <summary>
        /// Defines the decrement changes in product quantity
        /// </summary>
        /// <value>Defines the decrement changes in product quantity</value>
        /*
        <example>4</example>
        */
        [DataMember(Name = "reduce_quantity", EmitDefaultValue = false)]
        public decimal ReduceQuantity { get; set; }

        /// <summary>
        /// This parameter is used for selecting a warehouse where you need to set/modify a product quantity.
        /// </summary>
        /// <value>This parameter is used for selecting a warehouse where you need to set/modify a product quantity.</value>
        /*
        <example>1</example>
        */
        [DataMember(Name = "warehouse_id", EmitDefaultValue = false)]
        public string WarehouseId { get; set; }

        /// <summary>
        /// This parameter allows to reserve/unreserve product quantity.
        /// </summary>
        /// <value>This parameter allows to reserve/unreserve product quantity.</value>
        /*
        <example>1</example>
        */
        [DataMember(Name = "reserve_quantity", EmitDefaultValue = false)]
        public decimal ReserveQuantity { get; set; }

        /// <summary>
        /// Defines inventory tracking for product
        /// </summary>
        /// <value>Defines inventory tracking for product</value>
        /*
        <example>false</example>
        */
        [DataMember(Name = "manage_stock", EmitDefaultValue = true)]
        public bool ManageStock { get; set; }

        /// <summary>
        /// Set backorder status
        /// </summary>
        /// <value>Set backorder status</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "backorder_status", EmitDefaultValue = false)]
        public string BackorderStatus { get; set; }

        /// <summary>
        /// Defines product&#39;s name that has to be updated
        /// </summary>
        /// <value>Defines product&#39;s name that has to be updated</value>
        /*
        <example>Pancil</example>
        */
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Defines new product&#39;s sku
        /// </summary>
        /// <value>Defines new product&#39;s sku</value>
        /*
        <example>bag_01</example>
        */
        [DataMember(Name = "sku", EmitDefaultValue = false)]
        public string Sku { get; set; }

        /// <summary>
        /// Set visibility status
        /// </summary>
        /// <value>Set visibility status</value>
        /*
        <example>search</example>
        */
        [DataMember(Name = "visible", EmitDefaultValue = false)]
        public string Visible { get; set; }

        /// <summary>
        /// Defines product&#39;s manufacturer
        /// </summary>
        /// <value>Defines product&#39;s manufacturer</value>
        /*
        <example>Samsung</example>
        */
        [DataMember(Name = "manufacturer", EmitDefaultValue = false)]
        public string Manufacturer { get; set; }

        /// <summary>
        /// Defines product&#39;s manufacturer by manufacturer_id
        /// </summary>
        /// <value>Defines product&#39;s manufacturer by manufacturer_id</value>
        /*
        <example>1</example>
        */
        [DataMember(Name = "manufacturer_id", EmitDefaultValue = false)]
        public string ManufacturerId { get; set; }

        /// <summary>
        /// Defines product add that is specified by comma-separated categories id
        /// </summary>
        /// <value>Defines product add that is specified by comma-separated categories id</value>
        /*
        <example>23,56</example>
        */
        [DataMember(Name = "categories_ids", EmitDefaultValue = false)]
        public string CategoriesIds { get; set; }

        /// <summary>
        /// Defines product related products ids that has to be updated
        /// </summary>
        /// <value>Defines product related products ids that has to be updated</value>
        /*
        <example>4,5</example>
        */
        [DataMember(Name = "related_products_ids", EmitDefaultValue = false)]
        public string RelatedProductsIds { get; set; }

        /// <summary>
        /// Defines product up-sell products ids that has to be updated
        /// </summary>
        /// <value>Defines product up-sell products ids that has to be updated</value>
        /*
        <example>4,5</example>
        */
        [DataMember(Name = "up_sell_products_ids", EmitDefaultValue = false)]
        public string UpSellProductsIds { get; set; }

        /// <summary>
        /// Defines product cross-sells products ids that has to be updated
        /// </summary>
        /// <value>Defines product cross-sells products ids that has to be updated</value>
        /*
        <example>4,5</example>
        */
        [DataMember(Name = "cross_sell_products_ids", EmitDefaultValue = false)]
        public string CrossSellProductsIds { get; set; }

        /// <summary>
        /// Defines new product&#39;s description
        /// </summary>
        /// <value>Defines new product&#39;s description</value>
        /*
        <example>New product description</example>
        */
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Defines short description
        /// </summary>
        /// <value>Defines short description</value>
        /*
        <example>Short description. This is very short description</example>
        */
        [DataMember(Name = "short_description", EmitDefaultValue = false)]
        public string ShortDescription { get; set; }

        /// <summary>
        /// Defines unique meta title for each entity
        /// </summary>
        /// <value>Defines unique meta title for each entity</value>
        /*
        <example>category,test</example>
        */
        [DataMember(Name = "meta_title", EmitDefaultValue = false)]
        public string MetaTitle { get; set; }

        /// <summary>
        /// Defines unique meta keywords for each entity
        /// </summary>
        /// <value>Defines unique meta keywords for each entity</value>
        /*
        <example>category,test</example>
        */
        [DataMember(Name = "meta_keywords", EmitDefaultValue = false)]
        public string MetaKeywords { get; set; }

        /// <summary>
        /// Defines unique meta description of a entity
        /// </summary>
        /// <value>Defines unique meta description of a entity</value>
        /*
        <example>category,test</example>
        */
        [DataMember(Name = "meta_description", EmitDefaultValue = false)]
        public string MetaDescription { get; set; }

        /// <summary>
        /// Defines store id where the product should be found
        /// </summary>
        /// <value>Defines store id where the product should be found</value>
        /*
        <example>1</example>
        */
        [DataMember(Name = "store_id", EmitDefaultValue = false)]
        public string StoreId { get; set; }

        /// <summary>
        /// Language id
        /// </summary>
        /// <value>Language id</value>
        /*
        <example>3</example>
        */
        [DataMember(Name = "lang_id", EmitDefaultValue = false)]
        public string LangId { get; set; }

        /// <summary>
        /// Set stock status
        /// </summary>
        /// <value>Set stock status</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "in_stock", EmitDefaultValue = true)]
        public bool InStock { get; set; }

        /// <summary>
        /// Defines product&#39;s status
        /// </summary>
        /// <value>Defines product&#39;s status</value>
        /*
        <example>disabled</example>
        */
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Defines unique URL for SEO
        /// </summary>
        /// <value>Defines unique URL for SEO</value>
        /*
        <example>some seo url</example>
        */
        [DataMember(Name = "seo_url", EmitDefaultValue = false)]
        public string SeoUrl { get; set; }

        /// <summary>
        /// Report request id
        /// </summary>
        /// <value>Report request id</value>
        /*
        <example>105245017661</example>
        */
        [DataMember(Name = "report_request_id", EmitDefaultValue = false)]
        public string ReportRequestId { get; set; }

        /// <summary>
        /// Disable report cache for current request
        /// </summary>
        /// <value>Disable report cache for current request</value>
        /*
        <example>false</example>
        */
        [DataMember(Name = "disable_report_cache", EmitDefaultValue = true)]
        public bool DisableReportCache { get; set; }

        /// <summary>
        /// Is reindex required
        /// </summary>
        /// <value>Is reindex required</value>
        /*
        <example>false</example>
        */
        [DataMember(Name = "reindex", EmitDefaultValue = true)]
        public bool Reindex { get; set; }

        /// <summary>
        /// Product tags
        /// </summary>
        /// <value>Product tags</value>
        /*
        <example>tag1,tag2</example>
        */
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public string Tags { get; set; }

        /// <summary>
        /// Is cache clear required
        /// </summary>
        /// <value>Is cache clear required</value>
        /*
        <example>false</example>
        */
        [DataMember(Name = "clear_cache", EmitDefaultValue = true)]
        public bool ClearCache { get; set; }

        /// <summary>
        /// Global Trade Item Number. An GTIN is an identifier for trade items.
        /// </summary>
        /// <value>Global Trade Item Number. An GTIN is an identifier for trade items.</value>
        /*
        <example>12345678912345</example>
        */
        [DataMember(Name = "gtin", EmitDefaultValue = false)]
        public string Gtin { get; set; }

        /// <summary>
        /// Universal Product Code. A UPC (UPC-A) is a commonly used identifer for many different products.
        /// </summary>
        /// <value>Universal Product Code. A UPC (UPC-A) is a commonly used identifer for many different products.</value>
        /*
        <example>9770317847001</example>
        */
        [DataMember(Name = "upc", EmitDefaultValue = false)]
        public string Upc { get; set; }

        /// <summary>
        /// Manufacturer Part Number. A MPN is an identifier of a particular part design or material used.
        /// </summary>
        /// <value>Manufacturer Part Number. A MPN is an identifier of a particular part design or material used.</value>
        /*
        <example>9770317847001</example>
        */
        [DataMember(Name = "mpn", EmitDefaultValue = false)]
        public string Mpn { get; set; }

        /// <summary>
        /// European Article Number. An EAN is a unique 8 or 13-digit identifier that many industries (such as book publishers) use to identify products.
        /// </summary>
        /// <value>European Article Number. An EAN is a unique 8 or 13-digit identifier that many industries (such as book publishers) use to identify products.</value>
        /*
        <example>5901234123457</example>
        */
        [DataMember(Name = "ean", EmitDefaultValue = false)]
        public string Ean { get; set; }

        /// <summary>
        /// International Standard Book Number. An ISBN is a unique identifier for books.
        /// </summary>
        /// <value>International Standard Book Number. An ISBN is a unique identifier for books.</value>
        /*
        <example>9783161484100</example>
        */
        [DataMember(Name = "isbn", EmitDefaultValue = false)]
        public string Isbn { get; set; }

        /// <summary>
        /// Specifies whether a tax is charged
        /// </summary>
        /// <value>Specifies whether a tax is charged</value>
        /*
        <example>false</example>
        */
        [DataMember(Name = "taxable", EmitDefaultValue = true)]
        public bool Taxable { get; set; }

        /// <summary>
        /// A categorization for the product
        /// </summary>
        /// <value>A categorization for the product</value>
        /*
        <example>Shirts</example>
        */
        [DataMember(Name = "product_class", EmitDefaultValue = false)]
        public string ProductClass { get; set; }

        /// <summary>
        /// Defines product&#39;s height
        /// </summary>
        /// <value>Defines product&#39;s height</value>
        /*
        <example>56.12</example>
        */
        [DataMember(Name = "height", EmitDefaultValue = false)]
        public decimal Height { get; set; }

        /// <summary>
        /// Defines product&#39;s length
        /// </summary>
        /// <value>Defines product&#39;s length</value>
        /*
        <example>56.12</example>
        */
        [DataMember(Name = "length", EmitDefaultValue = false)]
        public decimal Length { get; set; }

        /// <summary>
        /// Defines product&#39;s width
        /// </summary>
        /// <value>Defines product&#39;s width</value>
        /*
        <example>56.12</example>
        */
        [DataMember(Name = "width", EmitDefaultValue = false)]
        public decimal Width { get; set; }

        /// <summary>
        /// Harmonized System Code. An HSC is a 6-digit identifier that allows participating countries to classify traded goods on a common basis for customs purposes
        /// </summary>
        /// <value>Harmonized System Code. An HSC is a 6-digit identifier that allows participating countries to classify traded goods on a common basis for customs purposes</value>
        /*
        <example>123456</example>
        */
        [DataMember(Name = "harmonized_system_code", EmitDefaultValue = false)]
        public string HarmonizedSystemCode { get; set; }

        /// <summary>
        /// The country where the inventory item was made
        /// </summary>
        /// <value>The country where the inventory item was made</value>
        /*
        <example>123456</example>
        */
        [DataMember(Name = "country_of_origin", EmitDefaultValue = false)]
        public string CountryOfOrigin { get; set; }

        /// <summary>
        /// Defines unique search keywords
        /// </summary>
        /// <value>Defines unique search keywords</value>
        /*
        <example>key1,key2,key3</example>
        */
        [DataMember(Name = "search_keywords", EmitDefaultValue = false)]
        public string SearchKeywords { get; set; }

        /// <summary>
        /// A barcode is a unique code composed of numbers used as a product identifier.
        /// </summary>
        /// <value>A barcode is a unique code composed of numbers used as a product identifier.</value>
        /*
        <example>9770317847001</example>
        */
        [DataMember(Name = "barcode", EmitDefaultValue = false)]
        public string Barcode { get; set; }

        /// <summary>
        /// Defines whether the product is virtual
        /// </summary>
        /// <value>Defines whether the product is virtual</value>
        /*
        <example>false</example>
        */
        [DataMember(Name = "is_virtual", EmitDefaultValue = true)]
        public bool IsVirtual { get; set; }

        /// <summary>
        /// Specifies product free shipping flag that has to be updated
        /// </summary>
        /// <value>Specifies product free shipping flag that has to be updated</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "is_free_shipping", EmitDefaultValue = true)]
        public bool IsFreeShipping { get; set; }

        /// <summary>
        /// Defines reserve price value
        /// </summary>
        /// <value>Defines reserve price value</value>
        /*
        <example>65.9</example>
        */
        [DataMember(Name = "reserve_price", EmitDefaultValue = false)]
        public decimal ReservePrice { get; set; }

        /// <summary>
        /// Defines buy it now value
        /// </summary>
        /// <value>Defines buy it now value</value>
        /*
        <example>65.9</example>
        */
        [DataMember(Name = "buyitnow_price", EmitDefaultValue = false)]
        public decimal BuyitnowPrice { get; set; }

        /// <summary>
        /// Allows to schedule a time in the future that the item becomes available. The value should be greater than the current date and time.
        /// </summary>
        /// <value>Allows to schedule a time in the future that the item becomes available. The value should be greater than the current date and time.</value>
        /*
        <example>avail_from&#x3D;2029-10-25T15:54:37-0500</example>
        */
        [DataMember(Name = "avail_from", EmitDefaultValue = false)]
        public string AvailFrom { get; set; }

        /// <summary>
        /// Defines tax classes where entity has to be added
        /// </summary>
        /// <value>Defines tax classes where entity has to be added</value>
        /*
        <example>9</example>
        */
        [DataMember(Name = "tax_class_id", EmitDefaultValue = false)]
        public string TaxClassId { get; set; }

        /// <summary>
        /// Defines product&#39;s type
        /// </summary>
        /// <value>Defines product&#39;s type</value>
        /*
        <example>simple</example>
        */
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Defines category&#39;s visibility status
        /// </summary>
        /// <value>Defines category&#39;s visibility status</value>
        /*
        <example>false</example>
        */
        [DataMember(Name = "avail", EmitDefaultValue = true)]
        public bool Avail { get; set; }

        /// <summary>
        /// The delivery promise that applies to offer
        /// </summary>
        /// <value>The delivery promise that applies to offer</value>
        /*
        <example>24uurs-23</example>
        */
        [DataMember(Name = "delivery_code", EmitDefaultValue = false)]
        public string DeliveryCode { get; set; }

        /// <summary>
        /// Disable or enable check process status. Please note that the response will be slower due to additional requests to the store.
        /// </summary>
        /// <value>Disable or enable check process status. Please note that the response will be slower due to additional requests to the store.</value>
        /*
        <example>false</example>
        */
        [DataMember(Name = "check_process_status", EmitDefaultValue = true)]
        public bool CheckProcessStatus { get; set; }

        /// <summary>
        /// Gets or Sets PackageDetails
        /// </summary>
        [DataMember(Name = "package_details", EmitDefaultValue = false)]
        public ProductAddPackageDetails PackageDetails { get; set; }

        /// <summary>
        /// Assign product to the stores that is specified by comma-separated stores&#39; id
        /// </summary>
        /// <value>Assign product to the stores that is specified by comma-separated stores&#39; id</value>
        /*
        <example>1,2</example>
        */
        [DataMember(Name = "stores_ids", EmitDefaultValue = false)]
        public string StoresIds { get; set; }

        /// <summary>
        /// Gets or Sets ManufacturerInfo
        /// </summary>
        [DataMember(Name = "manufacturer_info", EmitDefaultValue = false)]
        public ProductAddManufacturerInfo ManufacturerInfo { get; set; }

        /// <summary>
        /// Defines product production partner ids that has to be updated
        /// </summary>
        /// <value>Defines product production partner ids that has to be updated</value>
        /*
        <example>4,5</example>
        */
        [DataMember(Name = "production_partner_ids", EmitDefaultValue = false)]
        public string ProductionPartnerIds { get; set; }

        /// <summary>
        /// The numeric ID of the shipping template associated with the products in Etsy. You can find possible values in the \&quot;cart.info\&quot; API method response, in the field shipping_zones[]-&gt;id.
        /// </summary>
        /// <value>The numeric ID of the shipping template associated with the products in Etsy. You can find possible values in the \&quot;cart.info\&quot; API method response, in the field shipping_zones[]-&gt;id.</value>
        /*
        <example>40256592690</example>
        */
        [DataMember(Name = "shipping_template_id", EmitDefaultValue = false)]
        public int ShippingTemplateId { get; set; }

        /// <summary>
        /// An enumerated string for the era in which the maker made the product.
        /// </summary>
        /// <value>An enumerated string for the era in which the maker made the product.</value>
        /*
        <example>2020_2025</example>
        */
        [DataMember(Name = "when_made", EmitDefaultValue = false)]
        public string WhenMade { get; set; }

        /// <summary>
        /// If true, it indicates the product as a supply, otherwise it indicates that it is a finished product.
        /// </summary>
        /// <value>If true, it indicates the product as a supply, otherwise it indicates that it is a finished product.</value>
        /*
        <example>false</example>
        */
        [DataMember(Name = "is_supply", EmitDefaultValue = true)]
        public bool IsSupply { get; set; }

        /// <summary>
        /// Defines whether the product is downloadable
        /// </summary>
        /// <value>Defines whether the product is downloadable</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "downloadable", EmitDefaultValue = true)]
        public bool Downloadable { get; set; }

        /// <summary>
        /// A list of material strings for materials used in the product.
        /// </summary>
        /// <value>A list of material strings for materials used in the product.</value>
        /*
        <example>materials[0]&#x3D;Aluminum&amp;materials[1]&#x3D;Brass</example>
        */
        [DataMember(Name = "materials", EmitDefaultValue = false)]
        public List<string> Materials { get; set; }

        /// <summary>
        /// When true, automatically renews a listing upon its expiration.
        /// </summary>
        /// <value>When true, automatically renews a listing upon its expiration.</value>
        /*
        <example>false</example>
        */
        [DataMember(Name = "auto_renew", EmitDefaultValue = true)]
        public bool AutoRenew { get; set; }

        /// <summary>
        /// Set whether the product on sale
        /// </summary>
        /// <value>Set whether the product on sale</value>
        /*
        <example>false</example>
        */
        [DataMember(Name = "on_sale", EmitDefaultValue = true)]
        public bool OnSale { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProductUpdate {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  OldPrice: ").Append(OldPrice).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  SpecialPrice: ").Append(SpecialPrice).Append("\n");
            sb.Append("  SpriceCreate: ").Append(SpriceCreate).Append("\n");
            sb.Append("  SpriceExpire: ").Append(SpriceExpire).Append("\n");
            sb.Append("  CostPrice: ").Append(CostPrice).Append("\n");
            sb.Append("  FixedCostShippingPrice: ").Append(FixedCostShippingPrice).Append("\n");
            sb.Append("  RetailPrice: ").Append(RetailPrice).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  AvailableForView: ").Append(AvailableForView).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  WeightUnit: ").Append(WeightUnit).Append("\n");
            sb.Append("  DimensionsUnit: ").Append(DimensionsUnit).Append("\n");
            sb.Append("  IncreaseQuantity: ").Append(IncreaseQuantity).Append("\n");
            sb.Append("  ReduceQuantity: ").Append(ReduceQuantity).Append("\n");
            sb.Append("  WarehouseId: ").Append(WarehouseId).Append("\n");
            sb.Append("  ReserveQuantity: ").Append(ReserveQuantity).Append("\n");
            sb.Append("  ManageStock: ").Append(ManageStock).Append("\n");
            sb.Append("  BackorderStatus: ").Append(BackorderStatus).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  Visible: ").Append(Visible).Append("\n");
            sb.Append("  Manufacturer: ").Append(Manufacturer).Append("\n");
            sb.Append("  ManufacturerId: ").Append(ManufacturerId).Append("\n");
            sb.Append("  CategoriesIds: ").Append(CategoriesIds).Append("\n");
            sb.Append("  RelatedProductsIds: ").Append(RelatedProductsIds).Append("\n");
            sb.Append("  UpSellProductsIds: ").Append(UpSellProductsIds).Append("\n");
            sb.Append("  CrossSellProductsIds: ").Append(CrossSellProductsIds).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ShortDescription: ").Append(ShortDescription).Append("\n");
            sb.Append("  MetaTitle: ").Append(MetaTitle).Append("\n");
            sb.Append("  MetaKeywords: ").Append(MetaKeywords).Append("\n");
            sb.Append("  MetaDescription: ").Append(MetaDescription).Append("\n");
            sb.Append("  StoreId: ").Append(StoreId).Append("\n");
            sb.Append("  LangId: ").Append(LangId).Append("\n");
            sb.Append("  InStock: ").Append(InStock).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SeoUrl: ").Append(SeoUrl).Append("\n");
            sb.Append("  ReportRequestId: ").Append(ReportRequestId).Append("\n");
            sb.Append("  DisableReportCache: ").Append(DisableReportCache).Append("\n");
            sb.Append("  Reindex: ").Append(Reindex).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  ClearCache: ").Append(ClearCache).Append("\n");
            sb.Append("  Gtin: ").Append(Gtin).Append("\n");
            sb.Append("  Upc: ").Append(Upc).Append("\n");
            sb.Append("  Mpn: ").Append(Mpn).Append("\n");
            sb.Append("  Ean: ").Append(Ean).Append("\n");
            sb.Append("  Isbn: ").Append(Isbn).Append("\n");
            sb.Append("  Taxable: ").Append(Taxable).Append("\n");
            sb.Append("  ProductClass: ").Append(ProductClass).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  HarmonizedSystemCode: ").Append(HarmonizedSystemCode).Append("\n");
            sb.Append("  CountryOfOrigin: ").Append(CountryOfOrigin).Append("\n");
            sb.Append("  SearchKeywords: ").Append(SearchKeywords).Append("\n");
            sb.Append("  Barcode: ").Append(Barcode).Append("\n");
            sb.Append("  IsVirtual: ").Append(IsVirtual).Append("\n");
            sb.Append("  IsFreeShipping: ").Append(IsFreeShipping).Append("\n");
            sb.Append("  ReservePrice: ").Append(ReservePrice).Append("\n");
            sb.Append("  BuyitnowPrice: ").Append(BuyitnowPrice).Append("\n");
            sb.Append("  AvailFrom: ").Append(AvailFrom).Append("\n");
            sb.Append("  TaxClassId: ").Append(TaxClassId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Avail: ").Append(Avail).Append("\n");
            sb.Append("  DeliveryCode: ").Append(DeliveryCode).Append("\n");
            sb.Append("  CheckProcessStatus: ").Append(CheckProcessStatus).Append("\n");
            sb.Append("  PackageDetails: ").Append(PackageDetails).Append("\n");
            sb.Append("  StoresIds: ").Append(StoresIds).Append("\n");
            sb.Append("  ManufacturerInfo: ").Append(ManufacturerInfo).Append("\n");
            sb.Append("  ProductionPartnerIds: ").Append(ProductionPartnerIds).Append("\n");
            sb.Append("  ShippingTemplateId: ").Append(ShippingTemplateId).Append("\n");
            sb.Append("  WhenMade: ").Append(WhenMade).Append("\n");
            sb.Append("  IsSupply: ").Append(IsSupply).Append("\n");
            sb.Append("  Downloadable: ").Append(Downloadable).Append("\n");
            sb.Append("  Materials: ").Append(Materials).Append("\n");
            sb.Append("  AutoRenew: ").Append(AutoRenew).Append("\n");
            sb.Append("  OnSale: ").Append(OnSale).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
