/*
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ProductOptionAddValuesInner
    /// </summary>
    [DataContract(Name = "ProductOptionAdd_values_inner")]
    public partial class ProductOptionAddValuesInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductOptionAddValuesInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProductOptionAddValuesInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductOptionAddValuesInner" /> class.
        /// </summary>
        /// <param name="value">value (required).</param>
        /// <param name="displayValue">displayValue.</param>
        /// <param name="isDefault">isDefault (default to false).</param>
        public ProductOptionAddValuesInner(string value = default(string), string displayValue = default(string), bool isDefault = false)
        {
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new ArgumentNullException("value is a required property for ProductOptionAddValuesInner and cannot be null");
            }
            this.Value = value;
            this.DisplayValue = displayValue;
            this.IsDefault = isDefault;
        }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = true)]
        public string Value { get; set; }

        /// <summary>
        /// Gets or Sets DisplayValue
        /// </summary>
        [DataMember(Name = "display_value", EmitDefaultValue = false)]
        public string DisplayValue { get; set; }

        /// <summary>
        /// Gets or Sets IsDefault
        /// </summary>
        [DataMember(Name = "is_default", EmitDefaultValue = true)]
        public bool IsDefault { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProductOptionAddValuesInner {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  DisplayValue: ").Append(DisplayValue).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Value (string) minLength
            if (this.Value != null && this.Value.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Value, length must be greater than 1.", new [] { "Value" });
            }

            // DisplayValue (string) minLength
            if (this.DisplayValue != null && this.DisplayValue.Length < 1)
            {
                yield return new ValidationResult("Invalid value for DisplayValue, length must be greater than 1.", new [] { "DisplayValue" });
            }

            yield break;
        }
    }

}
