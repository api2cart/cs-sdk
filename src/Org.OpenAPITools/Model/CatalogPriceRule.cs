/*
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CatalogPriceRule
    /// </summary>
    [DataContract(Name = "CatalogPriceRule")]
    public partial class CatalogPriceRule : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogPriceRule" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="gid">gid.</param>
        /// <param name="type">type.</param>
        /// <param name="name">name.</param>
        /// <param name="description">description.</param>
        /// <param name="shortDescription">shortDescription.</param>
        /// <param name="avail">avail.</param>
        /// <param name="actions">actions.</param>
        /// <param name="createdTime">createdTime.</param>
        /// <param name="dateStart">dateStart.</param>
        /// <param name="dateEnd">dateEnd.</param>
        /// <param name="usageCount">usageCount.</param>
        /// <param name="conditions">conditions.</param>
        /// <param name="usesPerOrderLimit">usesPerOrderLimit.</param>
        /// <param name="additionalFields">additionalFields.</param>
        /// <param name="customFields">customFields.</param>
        public CatalogPriceRule(string id = default(string), string gid = default(string), string type = default(string), string name = default(string), string description = default(string), string shortDescription = default(string), bool? avail = default(bool?), List<CatalogPriceRuleAction> actions = default(List<CatalogPriceRuleAction>), A2CDateTime createdTime = default(A2CDateTime), A2CDateTime dateStart = default(A2CDateTime), A2CDateTime dateEnd = default(A2CDateTime), decimal? usageCount = default(decimal?), List<CouponCondition> conditions = default(List<CouponCondition>), int? usesPerOrderLimit = default(int?), Object additionalFields = default(Object), Object customFields = default(Object))
        {
            this.Id = id;
            this.Gid = gid;
            this.Type = type;
            this.Name = name;
            this.Description = description;
            this.ShortDescription = shortDescription;
            this.Avail = avail;
            this.Actions = actions;
            this.CreatedTime = createdTime;
            this.DateStart = dateStart;
            this.DateEnd = dateEnd;
            this.UsageCount = usageCount;
            this.Conditions = conditions;
            this.UsesPerOrderLimit = usesPerOrderLimit;
            this.AdditionalFields = additionalFields;
            this.CustomFields = customFields;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Gid
        /// </summary>
        [DataMember(Name = "gid", EmitDefaultValue = true)]
        public string Gid { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets ShortDescription
        /// </summary>
        [DataMember(Name = "short_description", EmitDefaultValue = true)]
        public string ShortDescription { get; set; }

        /// <summary>
        /// Gets or Sets Avail
        /// </summary>
        [DataMember(Name = "avail", EmitDefaultValue = true)]
        public bool? Avail { get; set; }

        /// <summary>
        /// Gets or Sets Actions
        /// </summary>
        [DataMember(Name = "actions", EmitDefaultValue = false)]
        public List<CatalogPriceRuleAction> Actions { get; set; }

        /// <summary>
        /// Gets or Sets CreatedTime
        /// </summary>
        [DataMember(Name = "created_time", EmitDefaultValue = true)]
        public A2CDateTime CreatedTime { get; set; }

        /// <summary>
        /// Gets or Sets DateStart
        /// </summary>
        [DataMember(Name = "date_start", EmitDefaultValue = true)]
        public A2CDateTime DateStart { get; set; }

        /// <summary>
        /// Gets or Sets DateEnd
        /// </summary>
        [DataMember(Name = "date_end", EmitDefaultValue = true)]
        public A2CDateTime DateEnd { get; set; }

        /// <summary>
        /// Gets or Sets UsageCount
        /// </summary>
        [DataMember(Name = "usage_count", EmitDefaultValue = true)]
        public decimal? UsageCount { get; set; }

        /// <summary>
        /// Gets or Sets Conditions
        /// </summary>
        [DataMember(Name = "conditions", EmitDefaultValue = false)]
        public List<CouponCondition> Conditions { get; set; }

        /// <summary>
        /// Gets or Sets UsesPerOrderLimit
        /// </summary>
        [DataMember(Name = "uses_per_order_limit", EmitDefaultValue = true)]
        public int? UsesPerOrderLimit { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalFields
        /// </summary>
        [DataMember(Name = "additional_fields", EmitDefaultValue = true)]
        public Object AdditionalFields { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name = "custom_fields", EmitDefaultValue = true)]
        public Object CustomFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CatalogPriceRule {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Gid: ").Append(Gid).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ShortDescription: ").Append(ShortDescription).Append("\n");
            sb.Append("  Avail: ").Append(Avail).Append("\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("  DateStart: ").Append(DateStart).Append("\n");
            sb.Append("  DateEnd: ").Append(DateEnd).Append("\n");
            sb.Append("  UsageCount: ").Append(UsageCount).Append("\n");
            sb.Append("  Conditions: ").Append(Conditions).Append("\n");
            sb.Append("  UsesPerOrderLimit: ").Append(UsesPerOrderLimit).Append("\n");
            sb.Append("  AdditionalFields: ").Append(AdditionalFields).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
