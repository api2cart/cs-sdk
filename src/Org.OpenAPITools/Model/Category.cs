/*
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Category
    /// </summary>
    [DataContract(Name = "Category")]
    public partial class Category : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Category" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="parentId">parentId.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="modifiedAt">modifiedAt.</param>
        /// <param name="name">name.</param>
        /// <param name="shortDescription">shortDescription.</param>
        /// <param name="description">description.</param>
        /// <param name="storesIds">storesIds.</param>
        /// <param name="keywords">keywords.</param>
        /// <param name="metaDescription">metaDescription.</param>
        /// <param name="metaTitle">metaTitle.</param>
        /// <param name="avail">avail.</param>
        /// <param name="path">path.</param>
        /// <param name="seoUrl">seoUrl.</param>
        /// <param name="sortOrder">sortOrder.</param>
        /// <param name="images">images.</param>
        /// <param name="additionalFields">additionalFields.</param>
        /// <param name="customFields">customFields.</param>
        public Category(string id = default(string), string parentId = default(string), A2CDateTime createdAt = default(A2CDateTime), A2CDateTime modifiedAt = default(A2CDateTime), string name = default(string), string shortDescription = default(string), string description = default(string), List<string> storesIds = default(List<string>), string keywords = default(string), string metaDescription = default(string), string metaTitle = default(string), bool avail = default(bool), string path = default(string), string seoUrl = default(string), int? sortOrder = default(int?), List<Image> images = default(List<Image>), Object additionalFields = default(Object), Object customFields = default(Object))
        {
            this.Id = id;
            this.ParentId = parentId;
            this.CreatedAt = createdAt;
            this.ModifiedAt = modifiedAt;
            this.Name = name;
            this.ShortDescription = shortDescription;
            this.Description = description;
            this.StoresIds = storesIds;
            this.Keywords = keywords;
            this.MetaDescription = metaDescription;
            this.MetaTitle = metaTitle;
            this.Avail = avail;
            this.Path = path;
            this.SeoUrl = seoUrl;
            this.SortOrder = sortOrder;
            this.Images = images;
            this.AdditionalFields = additionalFields;
            this.CustomFields = customFields;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ParentId
        /// </summary>
        [DataMember(Name = "parent_id", EmitDefaultValue = true)]
        public string ParentId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public A2CDateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedAt
        /// </summary>
        [DataMember(Name = "modified_at", EmitDefaultValue = true)]
        public A2CDateTime ModifiedAt { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ShortDescription
        /// </summary>
        [DataMember(Name = "short_description", EmitDefaultValue = true)]
        public string ShortDescription { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets StoresIds
        /// </summary>
        [DataMember(Name = "stores_ids", EmitDefaultValue = false)]
        public List<string> StoresIds { get; set; }

        /// <summary>
        /// Gets or Sets Keywords
        /// </summary>
        [DataMember(Name = "keywords", EmitDefaultValue = true)]
        public string Keywords { get; set; }

        /// <summary>
        /// Gets or Sets MetaDescription
        /// </summary>
        [DataMember(Name = "meta_description", EmitDefaultValue = true)]
        public string MetaDescription { get; set; }

        /// <summary>
        /// Gets or Sets MetaTitle
        /// </summary>
        [DataMember(Name = "meta_title", EmitDefaultValue = true)]
        public string MetaTitle { get; set; }

        /// <summary>
        /// Gets or Sets Avail
        /// </summary>
        [DataMember(Name = "avail", EmitDefaultValue = true)]
        public bool Avail { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name = "path", EmitDefaultValue = true)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets SeoUrl
        /// </summary>
        [DataMember(Name = "seo_url", EmitDefaultValue = true)]
        public string SeoUrl { get; set; }

        /// <summary>
        /// Gets or Sets SortOrder
        /// </summary>
        [DataMember(Name = "sort_order", EmitDefaultValue = true)]
        public int? SortOrder { get; set; }

        /// <summary>
        /// Gets or Sets Images
        /// </summary>
        [DataMember(Name = "images", EmitDefaultValue = false)]
        public List<Image> Images { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalFields
        /// </summary>
        [DataMember(Name = "additional_fields", EmitDefaultValue = true)]
        public Object AdditionalFields { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name = "custom_fields", EmitDefaultValue = true)]
        public Object CustomFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Category {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ModifiedAt: ").Append(ModifiedAt).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ShortDescription: ").Append(ShortDescription).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  StoresIds: ").Append(StoresIds).Append("\n");
            sb.Append("  Keywords: ").Append(Keywords).Append("\n");
            sb.Append("  MetaDescription: ").Append(MetaDescription).Append("\n");
            sb.Append("  MetaTitle: ").Append(MetaTitle).Append("\n");
            sb.Append("  Avail: ").Append(Avail).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  SeoUrl: ").Append(SeoUrl).Append("\n");
            sb.Append("  SortOrder: ").Append(SortOrder).Append("\n");
            sb.Append("  Images: ").Append(Images).Append("\n");
            sb.Append("  AdditionalFields: ").Append(AdditionalFields).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
