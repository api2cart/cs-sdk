/*
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OrderAddOrderItemInner
    /// </summary>
    [DataContract(Name = "OrderAdd_order_item_inner")]
    public partial class OrderAddOrderItemInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderAddOrderItemInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderAddOrderItemInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderAddOrderItemInner" /> class.
        /// </summary>
        /// <param name="orderItemId">Defines orders specified by order item id (required).</param>
        /// <param name="orderItemName">Defines orders specified by order item name (required).</param>
        /// <param name="orderItemModel">Defines orders specified by order item model.</param>
        /// <param name="orderItemPrice">Defines orders specified by order item price (required).</param>
        /// <param name="orderItemQuantity">Defines orders specified by order item quantity (required).</param>
        /// <param name="orderItemWeight">Defines orders specified by order item weight.</param>
        /// <param name="orderItemVariantId">Ordered product variant. Where x is order item ID.</param>
        /// <param name="orderItemTax">Percentage of tax for product order (default to 0M).</param>
        /// <param name="orderItemTaxClass">Id of the tax class of product..</param>
        /// <param name="orderItemPriceIncludesTax">Defines if item price includes tax (default to false).</param>
        /// <param name="orderItemParent">Index of the parent grouped/bundle product.</param>
        /// <param name="orderItemParentOptionName">Option name of the parent grouped/bundle product.</param>
        /// <param name="orderItemAllowRefundItemsSeparately">Indicates whether subitems of the grouped/bundle product can be refunded separately.</param>
        /// <param name="orderItemAllowShipItemsSeparately">Indicates whether subitems of the grouped/bundle product can be shipped separately.</param>
        /// <param name="orderItemOption">orderItemOption.</param>
        /// <param name="orderItemProperty">orderItemProperty.</param>
        public OrderAddOrderItemInner(string orderItemId = default(string), string orderItemName = default(string), string orderItemModel = default(string), decimal orderItemPrice = default(decimal), int orderItemQuantity = default(int), decimal orderItemWeight = default(decimal), string orderItemVariantId = default(string), decimal orderItemTax = 0M, string orderItemTaxClass = default(string), bool orderItemPriceIncludesTax = false, int orderItemParent = default(int), string orderItemParentOptionName = default(string), bool orderItemAllowRefundItemsSeparately = default(bool), bool orderItemAllowShipItemsSeparately = default(bool), List<OrderAddOrderItemInnerOrderItemOptionInner> orderItemOption = default(List<OrderAddOrderItemInnerOrderItemOptionInner>), List<OrderAddOrderItemInnerOrderItemPropertyInner> orderItemProperty = default(List<OrderAddOrderItemInnerOrderItemPropertyInner>))
        {
            // to ensure "orderItemId" is required (not null)
            if (orderItemId == null)
            {
                throw new ArgumentNullException("orderItemId is a required property for OrderAddOrderItemInner and cannot be null");
            }
            this.OrderItemId = orderItemId;
            // to ensure "orderItemName" is required (not null)
            if (orderItemName == null)
            {
                throw new ArgumentNullException("orderItemName is a required property for OrderAddOrderItemInner and cannot be null");
            }
            this.OrderItemName = orderItemName;
            this.OrderItemPrice = orderItemPrice;
            this.OrderItemQuantity = orderItemQuantity;
            this.OrderItemModel = orderItemModel;
            this.OrderItemWeight = orderItemWeight;
            this.OrderItemVariantId = orderItemVariantId;
            this.OrderItemTax = orderItemTax;
            this.OrderItemTaxClass = orderItemTaxClass;
            this.OrderItemPriceIncludesTax = orderItemPriceIncludesTax;
            this.OrderItemParent = orderItemParent;
            this.OrderItemParentOptionName = orderItemParentOptionName;
            this.OrderItemAllowRefundItemsSeparately = orderItemAllowRefundItemsSeparately;
            this.OrderItemAllowShipItemsSeparately = orderItemAllowShipItemsSeparately;
            this.OrderItemOption = orderItemOption;
            this.OrderItemProperty = orderItemProperty;
        }

        /// <summary>
        /// Defines orders specified by order item id
        /// </summary>
        /// <value>Defines orders specified by order item id</value>
        /*
        <example>125, where {x} - 1,2,3,... etc</example>
        */
        [DataMember(Name = "order_item_id", IsRequired = true, EmitDefaultValue = true)]
        public string OrderItemId { get; set; }

        /// <summary>
        /// Defines orders specified by order item name
        /// </summary>
        /// <value>Defines orders specified by order item name</value>
        /*
        <example>Product 1, where {x} - 1,2,3,... etc</example>
        */
        [DataMember(Name = "order_item_name", IsRequired = true, EmitDefaultValue = true)]
        public string OrderItemName { get; set; }

        /// <summary>
        /// Defines orders specified by order item model
        /// </summary>
        /// <value>Defines orders specified by order item model</value>
        /*
        <example>sku_1, where {x} - 1,2,3,... etc</example>
        */
        [DataMember(Name = "order_item_model", EmitDefaultValue = false)]
        public string OrderItemModel { get; set; }

        /// <summary>
        /// Defines orders specified by order item price
        /// </summary>
        /// <value>Defines orders specified by order item price</value>
        /*
        <example>1.32, where {x} - 1,2,3,... etc</example>
        */
        [DataMember(Name = "order_item_price", IsRequired = true, EmitDefaultValue = true)]
        public decimal OrderItemPrice { get; set; }

        /// <summary>
        /// Defines orders specified by order item quantity
        /// </summary>
        /// <value>Defines orders specified by order item quantity</value>
        /*
        <example>5, where {x} - 1,2,3,... etc</example>
        */
        [DataMember(Name = "order_item_quantity", IsRequired = true, EmitDefaultValue = true)]
        public int OrderItemQuantity { get; set; }

        /// <summary>
        /// Defines orders specified by order item weight
        /// </summary>
        /// <value>Defines orders specified by order item weight</value>
        /*
        <example>5, where {x} - 1,2,3,... etc</example>
        */
        [DataMember(Name = "order_item_weight", EmitDefaultValue = false)]
        public decimal OrderItemWeight { get; set; }

        /// <summary>
        /// Ordered product variant. Where x is order item ID
        /// </summary>
        /// <value>Ordered product variant. Where x is order item ID</value>
        /*
        <example>52</example>
        */
        [DataMember(Name = "order_item_variant_id", EmitDefaultValue = false)]
        public string OrderItemVariantId { get; set; }

        /// <summary>
        /// Percentage of tax for product order
        /// </summary>
        /// <value>Percentage of tax for product order</value>
        /*
        <example>5.5</example>
        */
        [DataMember(Name = "order_item_tax", EmitDefaultValue = false)]
        public decimal OrderItemTax { get; set; }

        /// <summary>
        /// Id of the tax class of product.
        /// </summary>
        /// <value>Id of the tax class of product.</value>
        /*
        <example>standard</example>
        */
        [DataMember(Name = "order_item_tax_class", EmitDefaultValue = false)]
        public string OrderItemTaxClass { get; set; }

        /// <summary>
        /// Defines if item price includes tax
        /// </summary>
        /// <value>Defines if item price includes tax</value>
        [DataMember(Name = "order_item_price_includes_tax", EmitDefaultValue = true)]
        public bool OrderItemPriceIncludesTax { get; set; }

        /// <summary>
        /// Index of the parent grouped/bundle product
        /// </summary>
        /// <value>Index of the parent grouped/bundle product</value>
        /*
        <example>2</example>
        */
        [DataMember(Name = "order_item_parent", EmitDefaultValue = false)]
        public int OrderItemParent { get; set; }

        /// <summary>
        /// Option name of the parent grouped/bundle product
        /// </summary>
        /// <value>Option name of the parent grouped/bundle product</value>
        /*
        <example>Internal Memory Storage</example>
        */
        [DataMember(Name = "order_item_parent_option_name", EmitDefaultValue = false)]
        public string OrderItemParentOptionName { get; set; }

        /// <summary>
        /// Indicates whether subitems of the grouped/bundle product can be refunded separately
        /// </summary>
        /// <value>Indicates whether subitems of the grouped/bundle product can be refunded separately</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "order_item_allow_refund_items_separately", EmitDefaultValue = true)]
        public bool OrderItemAllowRefundItemsSeparately { get; set; }

        /// <summary>
        /// Indicates whether subitems of the grouped/bundle product can be shipped separately
        /// </summary>
        /// <value>Indicates whether subitems of the grouped/bundle product can be shipped separately</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "order_item_allow_ship_items_separately", EmitDefaultValue = true)]
        public bool OrderItemAllowShipItemsSeparately { get; set; }

        /// <summary>
        /// Gets or Sets OrderItemOption
        /// </summary>
        [DataMember(Name = "order_item_option", EmitDefaultValue = false)]
        public List<OrderAddOrderItemInnerOrderItemOptionInner> OrderItemOption { get; set; }

        /// <summary>
        /// Gets or Sets OrderItemProperty
        /// </summary>
        [DataMember(Name = "order_item_property", EmitDefaultValue = false)]
        public List<OrderAddOrderItemInnerOrderItemPropertyInner> OrderItemProperty { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderAddOrderItemInner {\n");
            sb.Append("  OrderItemId: ").Append(OrderItemId).Append("\n");
            sb.Append("  OrderItemName: ").Append(OrderItemName).Append("\n");
            sb.Append("  OrderItemModel: ").Append(OrderItemModel).Append("\n");
            sb.Append("  OrderItemPrice: ").Append(OrderItemPrice).Append("\n");
            sb.Append("  OrderItemQuantity: ").Append(OrderItemQuantity).Append("\n");
            sb.Append("  OrderItemWeight: ").Append(OrderItemWeight).Append("\n");
            sb.Append("  OrderItemVariantId: ").Append(OrderItemVariantId).Append("\n");
            sb.Append("  OrderItemTax: ").Append(OrderItemTax).Append("\n");
            sb.Append("  OrderItemTaxClass: ").Append(OrderItemTaxClass).Append("\n");
            sb.Append("  OrderItemPriceIncludesTax: ").Append(OrderItemPriceIncludesTax).Append("\n");
            sb.Append("  OrderItemParent: ").Append(OrderItemParent).Append("\n");
            sb.Append("  OrderItemParentOptionName: ").Append(OrderItemParentOptionName).Append("\n");
            sb.Append("  OrderItemAllowRefundItemsSeparately: ").Append(OrderItemAllowRefundItemsSeparately).Append("\n");
            sb.Append("  OrderItemAllowShipItemsSeparately: ").Append(OrderItemAllowShipItemsSeparately).Append("\n");
            sb.Append("  OrderItemOption: ").Append(OrderItemOption).Append("\n");
            sb.Append("  OrderItemProperty: ").Append(OrderItemProperty).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
