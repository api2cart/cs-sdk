/*
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Defines personalization settings for the listing. To enable personalization, is_personalizable must be set to true. When enabled, additional fields may be used to configure the personalization experience, including whether it is required (personalization_is_required), the maximum character limit (personalization_char_count_max), and buyer instructions (personalization_instructions). All related fields are only applicable if personalization is enabled.
    /// </summary>
    [DataContract(Name = "ProductAdd_personalization_details")]
    public partial class ProductAddPersonalizationDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductAddPersonalizationDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProductAddPersonalizationDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductAddPersonalizationDetails" /> class.
        /// </summary>
        /// <param name="isPersonalizable">isPersonalizable (required).</param>
        /// <param name="personalizationIsRequired">personalizationIsRequired.</param>
        /// <param name="personalizationCharCountMax">personalizationCharCountMax.</param>
        /// <param name="personalizationInstructions">personalizationInstructions.</param>
        public ProductAddPersonalizationDetails(bool isPersonalizable = default(bool), bool personalizationIsRequired = default(bool), int personalizationCharCountMax = default(int), string personalizationInstructions = default(string))
        {
            this.IsPersonalizable = isPersonalizable;
            this.PersonalizationIsRequired = personalizationIsRequired;
            this.PersonalizationCharCountMax = personalizationCharCountMax;
            this.PersonalizationInstructions = personalizationInstructions;
        }

        /// <summary>
        /// Gets or Sets IsPersonalizable
        /// </summary>
        [DataMember(Name = "is_personalizable", IsRequired = true, EmitDefaultValue = true)]
        public bool IsPersonalizable { get; set; }

        /// <summary>
        /// Gets or Sets PersonalizationIsRequired
        /// </summary>
        [DataMember(Name = "personalization_is_required", EmitDefaultValue = true)]
        public bool PersonalizationIsRequired { get; set; }

        /// <summary>
        /// Gets or Sets PersonalizationCharCountMax
        /// </summary>
        [DataMember(Name = "personalization_char_count_max", EmitDefaultValue = false)]
        public int PersonalizationCharCountMax { get; set; }

        /// <summary>
        /// Gets or Sets PersonalizationInstructions
        /// </summary>
        [DataMember(Name = "personalization_instructions", EmitDefaultValue = false)]
        public string PersonalizationInstructions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProductAddPersonalizationDetails {\n");
            sb.Append("  IsPersonalizable: ").Append(IsPersonalizable).Append("\n");
            sb.Append("  PersonalizationIsRequired: ").Append(PersonalizationIsRequired).Append("\n");
            sb.Append("  PersonalizationCharCountMax: ").Append(PersonalizationCharCountMax).Append("\n");
            sb.Append("  PersonalizationInstructions: ").Append(PersonalizationInstructions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
