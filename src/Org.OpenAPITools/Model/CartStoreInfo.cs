/*
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CartStoreInfo
    /// </summary>
    [DataContract(Name = "Cart_StoreInfo")]
    public partial class CartStoreInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CartStoreInfo" /> class.
        /// </summary>
        /// <param name="storeId">storeId.</param>
        /// <param name="name">name.</param>
        /// <param name="language">language.</param>
        /// <param name="storeLanguages">storeLanguages.</param>
        /// <param name="currency">currency.</param>
        /// <param name="storeCurrencies">storeCurrencies.</param>
        /// <param name="timezone">timezone.</param>
        /// <param name="country">country.</param>
        /// <param name="rootCategoryId">rootCategoryId.</param>
        /// <param name="multiStoreUrl">multiStoreUrl.</param>
        /// <param name="active">active.</param>
        /// <param name="weightUnit">weightUnit.</param>
        /// <param name="dimensionUnit">dimensionUnit.</param>
        /// <param name="pricesIncludeTax">pricesIncludeTax.</param>
        /// <param name="carrierInfo">carrierInfo.</param>
        /// <param name="storeOwnerInfo">storeOwnerInfo.</param>
        /// <param name="defaultWarehouseId">defaultWarehouseId.</param>
        /// <param name="channels">channels.</param>
        /// <param name="additionalFields">additionalFields.</param>
        /// <param name="customFields">customFields.</param>
        public CartStoreInfo(string storeId = default(string), string name = default(string), string language = default(string), List<Language> storeLanguages = default(List<Language>), Currency currency = default(Currency), List<Currency> storeCurrencies = default(List<Currency>), string timezone = default(string), string country = default(string), string rootCategoryId = default(string), string multiStoreUrl = default(string), bool active = default(bool), string weightUnit = default(string), string dimensionUnit = default(string), bool pricesIncludeTax = default(bool), List<Carrier> carrierInfo = default(List<Carrier>), Info storeOwnerInfo = default(Info), string defaultWarehouseId = default(string), List<CartChannel> channels = default(List<CartChannel>), Object additionalFields = default(Object), Object customFields = default(Object))
        {
            this.StoreId = storeId;
            this.Name = name;
            this.Language = language;
            this.StoreLanguages = storeLanguages;
            this.Currency = currency;
            this.StoreCurrencies = storeCurrencies;
            this.Timezone = timezone;
            this.Country = country;
            this.RootCategoryId = rootCategoryId;
            this.MultiStoreUrl = multiStoreUrl;
            this.Active = active;
            this.WeightUnit = weightUnit;
            this.DimensionUnit = dimensionUnit;
            this.PricesIncludeTax = pricesIncludeTax;
            this.CarrierInfo = carrierInfo;
            this.StoreOwnerInfo = storeOwnerInfo;
            this.DefaultWarehouseId = defaultWarehouseId;
            this.Channels = channels;
            this.AdditionalFields = additionalFields;
            this.CustomFields = customFields;
        }

        /// <summary>
        /// Gets or Sets StoreId
        /// </summary>
        [DataMember(Name = "store_id", EmitDefaultValue = false)]
        public string StoreId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        public string Language { get; set; }

        /// <summary>
        /// Gets or Sets StoreLanguages
        /// </summary>
        [DataMember(Name = "store_languages", EmitDefaultValue = false)]
        public List<Language> StoreLanguages { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public Currency Currency { get; set; }

        /// <summary>
        /// Gets or Sets StoreCurrencies
        /// </summary>
        [DataMember(Name = "store_currencies", EmitDefaultValue = false)]
        public List<Currency> StoreCurrencies { get; set; }

        /// <summary>
        /// Gets or Sets Timezone
        /// </summary>
        [DataMember(Name = "timezone", EmitDefaultValue = false)]
        public string Timezone { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// Gets or Sets RootCategoryId
        /// </summary>
        [DataMember(Name = "root_category_id", EmitDefaultValue = false)]
        public string RootCategoryId { get; set; }

        /// <summary>
        /// Gets or Sets MultiStoreUrl
        /// </summary>
        [DataMember(Name = "multi_store_url", EmitDefaultValue = false)]
        public string MultiStoreUrl { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// Gets or Sets WeightUnit
        /// </summary>
        [DataMember(Name = "weight_unit", EmitDefaultValue = false)]
        public string WeightUnit { get; set; }

        /// <summary>
        /// Gets or Sets DimensionUnit
        /// </summary>
        [DataMember(Name = "dimension_unit", EmitDefaultValue = false)]
        public string DimensionUnit { get; set; }

        /// <summary>
        /// Gets or Sets PricesIncludeTax
        /// </summary>
        [DataMember(Name = "prices_include_tax", EmitDefaultValue = true)]
        public bool PricesIncludeTax { get; set; }

        /// <summary>
        /// Gets or Sets CarrierInfo
        /// </summary>
        [DataMember(Name = "carrier_info", EmitDefaultValue = false)]
        public List<Carrier> CarrierInfo { get; set; }

        /// <summary>
        /// Gets or Sets StoreOwnerInfo
        /// </summary>
        [DataMember(Name = "store_owner_info", EmitDefaultValue = false)]
        public Info StoreOwnerInfo { get; set; }

        /// <summary>
        /// Gets or Sets DefaultWarehouseId
        /// </summary>
        [DataMember(Name = "default_warehouse_id", EmitDefaultValue = false)]
        public string DefaultWarehouseId { get; set; }

        /// <summary>
        /// Gets or Sets Channels
        /// </summary>
        [DataMember(Name = "channels", EmitDefaultValue = false)]
        public List<CartChannel> Channels { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalFields
        /// </summary>
        [DataMember(Name = "additional_fields", EmitDefaultValue = false)]
        public Object AdditionalFields { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name = "custom_fields", EmitDefaultValue = false)]
        public Object CustomFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CartStoreInfo {\n");
            sb.Append("  StoreId: ").Append(StoreId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  StoreLanguages: ").Append(StoreLanguages).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  StoreCurrencies: ").Append(StoreCurrencies).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  RootCategoryId: ").Append(RootCategoryId).Append("\n");
            sb.Append("  MultiStoreUrl: ").Append(MultiStoreUrl).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  WeightUnit: ").Append(WeightUnit).Append("\n");
            sb.Append("  DimensionUnit: ").Append(DimensionUnit).Append("\n");
            sb.Append("  PricesIncludeTax: ").Append(PricesIncludeTax).Append("\n");
            sb.Append("  CarrierInfo: ").Append(CarrierInfo).Append("\n");
            sb.Append("  StoreOwnerInfo: ").Append(StoreOwnerInfo).Append("\n");
            sb.Append("  DefaultWarehouseId: ").Append(DefaultWarehouseId).Append("\n");
            sb.Append("  Channels: ").Append(Channels).Append("\n");
            sb.Append("  AdditionalFields: ").Append(AdditionalFields).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
