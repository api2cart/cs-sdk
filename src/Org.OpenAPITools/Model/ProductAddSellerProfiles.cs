/*
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// If the seller is subscribed to \&quot;Business Policies\&quot;, use the seller_profiles instead of the shipping_details, payment_methods and return_accepted params.&lt;hr&gt;&lt;div style&#x3D;\&quot;font-style:normal\&quot;&gt;Param structure:&lt;div style&#x3D;\&quot;margin-left: 2%;\&quot;&gt;&lt;code style&#x3D;\&quot;padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;\&quot;&gt;seller_profiles[&lt;b&gt;shipping_profile_id&lt;/b&gt;] &#x3D; string&lt;/br&gt;seller_profiles[&lt;b&gt;payment_profile_id&lt;/b&gt;] &#x3D; string&lt;/br&gt;seller_profiles[&lt;b&gt;return_profile_id&lt;/b&gt;] &#x3D; string&lt;/br&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;
    /// </summary>
    [DataContract(Name = "ProductAdd_seller_profiles")]
    public partial class ProductAddSellerProfiles : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductAddSellerProfiles" /> class.
        /// </summary>
        /// <param name="shippingProfileId">shippingProfileId.</param>
        /// <param name="paymentProfileId">paymentProfileId.</param>
        /// <param name="returnProfileId">returnProfileId.</param>
        public ProductAddSellerProfiles(string shippingProfileId = default(string), string paymentProfileId = default(string), string returnProfileId = default(string))
        {
            this.ShippingProfileId = shippingProfileId;
            this.PaymentProfileId = paymentProfileId;
            this.ReturnProfileId = returnProfileId;
        }

        /// <summary>
        /// Gets or Sets ShippingProfileId
        /// </summary>
        [DataMember(Name = "shipping_profile_id", EmitDefaultValue = false)]
        public string ShippingProfileId { get; set; }

        /// <summary>
        /// Gets or Sets PaymentProfileId
        /// </summary>
        [DataMember(Name = "payment_profile_id", EmitDefaultValue = false)]
        public string PaymentProfileId { get; set; }

        /// <summary>
        /// Gets or Sets ReturnProfileId
        /// </summary>
        [DataMember(Name = "return_profile_id", EmitDefaultValue = false)]
        public string ReturnProfileId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProductAddSellerProfiles {\n");
            sb.Append("  ShippingProfileId: ").Append(ShippingProfileId).Append("\n");
            sb.Append("  PaymentProfileId: ").Append(PaymentProfileId).Append("\n");
            sb.Append("  ReturnProfileId: ").Append(ReturnProfileId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
