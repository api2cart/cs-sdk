/*
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ProductVariantPriceUpdate
    /// </summary>
    [DataContract(Name = "ProductVariantPriceUpdate")]
    public partial class ProductVariantPriceUpdate : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductVariantPriceUpdate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProductVariantPriceUpdate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductVariantPriceUpdate" /> class.
        /// </summary>
        /// <param name="id">Defines the variant where the price has to be updated.</param>
        /// <param name="productId">Product id.</param>
        /// <param name="groupPrices">Defines variants&#39;s group prices (required).</param>
        public ProductVariantPriceUpdate(string id = default(string), string productId = default(string), List<ProductPriceUpdateGroupPricesInner> groupPrices = default(List<ProductPriceUpdateGroupPricesInner>))
        {
            // to ensure "groupPrices" is required (not null)
            if (groupPrices == null)
            {
                throw new ArgumentNullException("groupPrices is a required property for ProductVariantPriceUpdate and cannot be null");
            }
            this.GroupPrices = groupPrices;
            this.Id = id;
            this.ProductId = productId;
        }

        /// <summary>
        /// Defines the variant where the price has to be updated
        /// </summary>
        /// <value>Defines the variant where the price has to be updated</value>
        /*
        <example>10</example>
        */
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Product id
        /// </summary>
        /// <value>Product id</value>
        /*
        <example>10</example>
        */
        [DataMember(Name = "product_id", EmitDefaultValue = false)]
        public string ProductId { get; set; }

        /// <summary>
        /// Defines variants&#39;s group prices
        /// </summary>
        /// <value>Defines variants&#39;s group prices</value>
        [DataMember(Name = "group_prices", IsRequired = true, EmitDefaultValue = true)]
        public List<ProductPriceUpdateGroupPricesInner> GroupPrices { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProductVariantPriceUpdate {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  GroupPrices: ").Append(GroupPrices).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
