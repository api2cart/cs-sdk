/*
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CustomerAdd
    /// </summary>
    [DataContract(Name = "CustomerAdd")]
    public partial class CustomerAdd : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerAdd" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomerAdd() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerAdd" /> class.
        /// </summary>
        /// <param name="email">Defines customer&#39;s email (required).</param>
        /// <param name="firstName">Defines customer&#39;s first name.</param>
        /// <param name="lastName">Defines customer&#39;s last name.</param>
        /// <param name="password">Defines customer&#39;s unique password.</param>
        /// <param name="group">Defines the group where the customer.</param>
        /// <param name="groupIds">Groups that will be assigned to a customer.</param>
        /// <param name="status">Defines customer&#39;s status (default to &quot;enabled&quot;).</param>
        /// <param name="createdTime">Entity&#39;s date creation.</param>
        /// <param name="modifiedTime">Entity&#39;s date modification.</param>
        /// <param name="login">Specifies customer&#39;s login name.</param>
        /// <param name="lastLogin">Defines customer&#39;s last login time.</param>
        /// <param name="birthDay">Defines customer&#39;s birthday.</param>
        /// <param name="newsLetterSubscription">Defines whether the newsletter subscription is available for the user.</param>
        /// <param name="consents">Defines consents to notifications.</param>
        /// <param name="gender">Defines customer&#39;s gender.</param>
        /// <param name="website">Link to customer website.</param>
        /// <param name="fax">Defines customer&#39;s fax.</param>
        /// <param name="company">Defines customer&#39;s company.</param>
        /// <param name="phone">Defines customer&#39;s phone number.</param>
        /// <param name="note">The customer note..</param>
        /// <param name="country">Specifies ISO code or name of country.</param>
        /// <param name="storeId">Store Id.</param>
        /// <param name="address">address.</param>
        public CustomerAdd(string email = default(string), string firstName = default(string), string lastName = default(string), string password = default(string), string group = default(string), string groupIds = default(string), string status = @"enabled", string createdTime = default(string), string modifiedTime = default(string), string login = default(string), string lastLogin = default(string), string birthDay = default(string), bool newsLetterSubscription = default(bool), List<CustomerAddConsentsInner> consents = default(List<CustomerAddConsentsInner>), string gender = default(string), string website = default(string), string fax = default(string), string company = default(string), string phone = default(string), string note = default(string), string country = default(string), string storeId = default(string), List<CustomerAddAddressInner> address = default(List<CustomerAddAddressInner>))
        {
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new ArgumentNullException("email is a required property for CustomerAdd and cannot be null");
            }
            this.Email = email;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.Password = password;
            this.Group = group;
            this.GroupIds = groupIds;
            // use default value if no "status" provided
            this.Status = status ?? @"enabled";
            this.CreatedTime = createdTime;
            this.ModifiedTime = modifiedTime;
            this.Login = login;
            this.LastLogin = lastLogin;
            this.BirthDay = birthDay;
            this.NewsLetterSubscription = newsLetterSubscription;
            this.Consents = consents;
            this.Gender = gender;
            this.Website = website;
            this.Fax = fax;
            this.Company = company;
            this.Phone = phone;
            this.Note = note;
            this.Country = country;
            this.StoreId = storeId;
            this.Address = address;
        }

        /// <summary>
        /// Defines customer&#39;s email
        /// </summary>
        /// <value>Defines customer&#39;s email</value>
        /*
        <example>mail@example.com</example>
        */
        [DataMember(Name = "email", IsRequired = true, EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// Defines customer&#39;s first name
        /// </summary>
        /// <value>Defines customer&#39;s first name</value>
        /*
        <example>John</example>
        */
        [DataMember(Name = "first_name", EmitDefaultValue = false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Defines customer&#39;s last name
        /// </summary>
        /// <value>Defines customer&#39;s last name</value>
        /*
        <example>Smith</example>
        */
        [DataMember(Name = "last_name", EmitDefaultValue = false)]
        public string LastName { get; set; }

        /// <summary>
        /// Defines customer&#39;s unique password
        /// </summary>
        /// <value>Defines customer&#39;s unique password</value>
        /*
        <example>fd5gfd5g75fd</example>
        */
        [DataMember(Name = "password", EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// Defines the group where the customer
        /// </summary>
        /// <value>Defines the group where the customer</value>
        /*
        <example>Register</example>
        */
        [DataMember(Name = "group", EmitDefaultValue = false)]
        public string Group { get; set; }

        /// <summary>
        /// Groups that will be assigned to a customer
        /// </summary>
        /// <value>Groups that will be assigned to a customer</value>
        /*
        <example>1,2,3</example>
        */
        [DataMember(Name = "group_ids", EmitDefaultValue = false)]
        public string GroupIds { get; set; }

        /// <summary>
        /// Defines customer&#39;s status
        /// </summary>
        /// <value>Defines customer&#39;s status</value>
        /*
        <example>disabled</example>
        */
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Entity&#39;s date creation
        /// </summary>
        /// <value>Entity&#39;s date creation</value>
        /*
        <example>2014-01-30 15:58:41</example>
        */
        [DataMember(Name = "created_time", EmitDefaultValue = false)]
        public string CreatedTime { get; set; }

        /// <summary>
        /// Entity&#39;s date modification
        /// </summary>
        /// <value>Entity&#39;s date modification</value>
        /*
        <example>2014-07-30 15:58:41</example>
        */
        [DataMember(Name = "modified_time", EmitDefaultValue = false)]
        public string ModifiedTime { get; set; }

        /// <summary>
        /// Specifies customer&#39;s login name
        /// </summary>
        /// <value>Specifies customer&#39;s login name</value>
        /*
        <example>makaka</example>
        */
        [DataMember(Name = "login", EmitDefaultValue = false)]
        public string Login { get; set; }

        /// <summary>
        /// Defines customer&#39;s last login time
        /// </summary>
        /// <value>Defines customer&#39;s last login time</value>
        /*
        <example>2013-02-26 15:00:00</example>
        */
        [DataMember(Name = "last_login", EmitDefaultValue = false)]
        public string LastLogin { get; set; }

        /// <summary>
        /// Defines customer&#39;s birthday
        /// </summary>
        /// <value>Defines customer&#39;s birthday</value>
        /*
        <example>2013-02-26 15:00:00</example>
        */
        [DataMember(Name = "birth_day", EmitDefaultValue = false)]
        public string BirthDay { get; set; }

        /// <summary>
        /// Defines whether the newsletter subscription is available for the user
        /// </summary>
        /// <value>Defines whether the newsletter subscription is available for the user</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "news_letter_subscription", EmitDefaultValue = true)]
        public bool NewsLetterSubscription { get; set; }

        /// <summary>
        /// Defines consents to notifications
        /// </summary>
        /// <value>Defines consents to notifications</value>
        [DataMember(Name = "consents", EmitDefaultValue = false)]
        public List<CustomerAddConsentsInner> Consents { get; set; }

        /// <summary>
        /// Defines customer&#39;s gender
        /// </summary>
        /// <value>Defines customer&#39;s gender</value>
        /*
        <example>male</example>
        */
        [DataMember(Name = "gender", EmitDefaultValue = false)]
        public string Gender { get; set; }

        /// <summary>
        /// Link to customer website
        /// </summary>
        /// <value>Link to customer website</value>
        /*
        <example>http://api2cart.com</example>
        */
        [DataMember(Name = "website", EmitDefaultValue = false)]
        public string Website { get; set; }

        /// <summary>
        /// Defines customer&#39;s fax
        /// </summary>
        /// <value>Defines customer&#39;s fax</value>
        /*
        <example>54545787</example>
        */
        [DataMember(Name = "fax", EmitDefaultValue = false)]
        public string Fax { get; set; }

        /// <summary>
        /// Defines customer&#39;s company
        /// </summary>
        /// <value>Defines customer&#39;s company</value>
        /*
        <example>Apple</example>
        */
        [DataMember(Name = "company", EmitDefaultValue = false)]
        public string Company { get; set; }

        /// <summary>
        /// Defines customer&#39;s phone number
        /// </summary>
        /// <value>Defines customer&#39;s phone number</value>
        /*
        <example>56686868654</example>
        */
        [DataMember(Name = "phone", EmitDefaultValue = false)]
        public string Phone { get; set; }

        /// <summary>
        /// The customer note.
        /// </summary>
        /// <value>The customer note.</value>
        /*
        <example>Customer note</example>
        */
        [DataMember(Name = "note", EmitDefaultValue = false)]
        public string Note { get; set; }

        /// <summary>
        /// Specifies ISO code or name of country
        /// </summary>
        /// <value>Specifies ISO code or name of country</value>
        /*
        <example>US</example>
        */
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// Store Id
        /// </summary>
        /// <value>Store Id</value>
        /*
        <example>1</example>
        */
        [DataMember(Name = "store_id", EmitDefaultValue = false)]
        public string StoreId { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public List<CustomerAddAddressInner> Address { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomerAdd {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  GroupIds: ").Append(GroupIds).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("  ModifiedTime: ").Append(ModifiedTime).Append("\n");
            sb.Append("  Login: ").Append(Login).Append("\n");
            sb.Append("  LastLogin: ").Append(LastLogin).Append("\n");
            sb.Append("  BirthDay: ").Append(BirthDay).Append("\n");
            sb.Append("  NewsLetterSubscription: ").Append(NewsLetterSubscription).Append("\n");
            sb.Append("  Consents: ").Append(Consents).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("  Fax: ").Append(Fax).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  StoreId: ").Append(StoreId).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
