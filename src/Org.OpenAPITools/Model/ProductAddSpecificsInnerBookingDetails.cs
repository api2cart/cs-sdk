/*
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ProductAddSpecificsInnerBookingDetails
    /// </summary>
    [DataContract(Name = "ProductAdd_specifics_inner_booking_details")]
    public partial class ProductAddSpecificsInnerBookingDetails : IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Date for value: date
            /// </summary>
            [EnumMember(Value = "date")]
            Date = 1,

            /// <summary>
            /// Enum DateTime for value: date_time
            /// </summary>
            [EnumMember(Value = "date_time")]
            DateTime = 2
        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Defines TimeStrictType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TimeStrictTypeEnum
        {
            /// <summary>
            /// Enum Days for value: days
            /// </summary>
            [EnumMember(Value = "days")]
            Days = 1,

            /// <summary>
            /// Enum Hours for value: hours
            /// </summary>
            [EnumMember(Value = "hours")]
            Hours = 2,

            /// <summary>
            /// Enum Minutes for value: minutes
            /// </summary>
            [EnumMember(Value = "minutes")]
            Minutes = 3
        }


        /// <summary>
        /// Gets or Sets TimeStrictType
        /// </summary>
        [DataMember(Name = "time_strict_type", IsRequired = true, EmitDefaultValue = true)]
        public TimeStrictTypeEnum TimeStrictType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductAddSpecificsInnerBookingDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProductAddSpecificsInnerBookingDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductAddSpecificsInnerBookingDetails" /> class.
        /// </summary>
        /// <param name="location">location (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="sessionDuration">sessionDuration.</param>
        /// <param name="sessionGap">sessionGap.</param>
        /// <param name="sessionsCount">sessionsCount (required).</param>
        /// <param name="timeStrictValue">timeStrictValue (required).</param>
        /// <param name="timeStrictType">timeStrictType (required) (default to TimeStrictTypeEnum.Days).</param>
        /// <param name="availabilities">availabilities (required).</param>
        /// <param name="overrides">overrides.</param>
        public ProductAddSpecificsInnerBookingDetails(string location = default(string), TypeEnum type = default(TypeEnum), int sessionDuration = default(int), int sessionGap = default(int), int sessionsCount = default(int), decimal timeStrictValue = default(decimal), TimeStrictTypeEnum timeStrictType = TimeStrictTypeEnum.Days, List<ProductAddSpecificsInnerBookingDetailsAvailabilitiesInner> availabilities = default(List<ProductAddSpecificsInnerBookingDetailsAvailabilitiesInner>), List<ProductAddSpecificsInnerBookingDetailsOverridesInner> overrides = default(List<ProductAddSpecificsInnerBookingDetailsOverridesInner>))
        {
            // to ensure "location" is required (not null)
            if (location == null)
            {
                throw new ArgumentNullException("location is a required property for ProductAddSpecificsInnerBookingDetails and cannot be null");
            }
            this.Location = location;
            this.Type = type;
            this.SessionsCount = sessionsCount;
            this.TimeStrictValue = timeStrictValue;
            this.TimeStrictType = timeStrictType;
            // to ensure "availabilities" is required (not null)
            if (availabilities == null)
            {
                throw new ArgumentNullException("availabilities is a required property for ProductAddSpecificsInnerBookingDetails and cannot be null");
            }
            this.Availabilities = availabilities;
            this.SessionDuration = sessionDuration;
            this.SessionGap = sessionGap;
            this.Overrides = overrides;
        }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name = "location", IsRequired = true, EmitDefaultValue = true)]
        public string Location { get; set; }

        /// <summary>
        /// Gets or Sets SessionDuration
        /// </summary>
        [DataMember(Name = "session_duration", EmitDefaultValue = false)]
        public int SessionDuration { get; set; }

        /// <summary>
        /// Gets or Sets SessionGap
        /// </summary>
        [DataMember(Name = "session_gap", EmitDefaultValue = false)]
        public int SessionGap { get; set; }

        /// <summary>
        /// Gets or Sets SessionsCount
        /// </summary>
        [DataMember(Name = "sessions_count", IsRequired = true, EmitDefaultValue = true)]
        public int SessionsCount { get; set; }

        /// <summary>
        /// Gets or Sets TimeStrictValue
        /// </summary>
        [DataMember(Name = "time_strict_value", IsRequired = true, EmitDefaultValue = true)]
        public decimal TimeStrictValue { get; set; }

        /// <summary>
        /// Gets or Sets Availabilities
        /// </summary>
        [DataMember(Name = "availabilities", IsRequired = true, EmitDefaultValue = true)]
        public List<ProductAddSpecificsInnerBookingDetailsAvailabilitiesInner> Availabilities { get; set; }

        /// <summary>
        /// Gets or Sets Overrides
        /// </summary>
        [DataMember(Name = "overrides", EmitDefaultValue = false)]
        public List<ProductAddSpecificsInnerBookingDetailsOverridesInner> Overrides { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProductAddSpecificsInnerBookingDetails {\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SessionDuration: ").Append(SessionDuration).Append("\n");
            sb.Append("  SessionGap: ").Append(SessionGap).Append("\n");
            sb.Append("  SessionsCount: ").Append(SessionsCount).Append("\n");
            sb.Append("  TimeStrictValue: ").Append(TimeStrictValue).Append("\n");
            sb.Append("  TimeStrictType: ").Append(TimeStrictType).Append("\n");
            sb.Append("  Availabilities: ").Append(Availabilities).Append("\n");
            sb.Append("  Overrides: ").Append(Overrides).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Location (string) minLength
            if (this.Location != null && this.Location.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Location, length must be greater than 1.", new [] { "Location" });
            }

            yield break;
        }
    }

}
