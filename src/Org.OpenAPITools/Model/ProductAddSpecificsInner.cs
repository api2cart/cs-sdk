/*
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ProductAddSpecificsInner
    /// </summary>
    [DataContract(Name = "ProductAdd_specifics_inner")]
    public partial class ProductAddSpecificsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductAddSpecificsInner" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="value">value.</param>
        /// <param name="values">values.</param>
        /// <param name="usedForVariations">usedForVariations (default to false).</param>
        /// <param name="scaleId">scaleId.</param>
        /// <param name="inputValue">inputValue.</param>
        /// <param name="foodDetails">foodDetails.</param>
        /// <param name="groupProductsDetails">groupProductsDetails.</param>
        /// <param name="bookingDetails">bookingDetails.</param>
        public ProductAddSpecificsInner(string name = default(string), string value = default(string), List<string> values = default(List<string>), bool usedForVariations = false, int? scaleId = default(int?), string inputValue = default(string), ProductAddSpecificsInnerFoodDetails foodDetails = default(ProductAddSpecificsInnerFoodDetails), List<ProductAddSpecificsInnerGroupProductsDetailsInner> groupProductsDetails = default(List<ProductAddSpecificsInnerGroupProductsDetailsInner>), ProductAddSpecificsInnerBookingDetails bookingDetails = default(ProductAddSpecificsInnerBookingDetails))
        {
            this.Name = name;
            this.Value = value;
            this.Values = values;
            this.UsedForVariations = usedForVariations;
            this.ScaleId = scaleId;
            this.InputValue = inputValue;
            this.FoodDetails = foodDetails;
            this.GroupProductsDetails = groupProductsDetails;
            this.BookingDetails = bookingDetails;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public string Value { get; set; }

        /// <summary>
        /// Gets or Sets Values
        /// </summary>
        [DataMember(Name = "values", EmitDefaultValue = false)]
        public List<string> Values { get; set; }

        /// <summary>
        /// Gets or Sets UsedForVariations
        /// </summary>
        [DataMember(Name = "used_for_variations", EmitDefaultValue = true)]
        public bool UsedForVariations { get; set; }

        /// <summary>
        /// Gets or Sets ScaleId
        /// </summary>
        [DataMember(Name = "scale_id", EmitDefaultValue = true)]
        public int? ScaleId { get; set; }

        /// <summary>
        /// Gets or Sets InputValue
        /// </summary>
        [DataMember(Name = "input_value", EmitDefaultValue = true)]
        public string InputValue { get; set; }

        /// <summary>
        /// Gets or Sets FoodDetails
        /// </summary>
        [DataMember(Name = "food_details", EmitDefaultValue = false)]
        public ProductAddSpecificsInnerFoodDetails FoodDetails { get; set; }

        /// <summary>
        /// Gets or Sets GroupProductsDetails
        /// </summary>
        [DataMember(Name = "group_products_details", EmitDefaultValue = false)]
        public List<ProductAddSpecificsInnerGroupProductsDetailsInner> GroupProductsDetails { get; set; }

        /// <summary>
        /// Gets or Sets BookingDetails
        /// </summary>
        [DataMember(Name = "booking_details", EmitDefaultValue = false)]
        public ProductAddSpecificsInnerBookingDetails BookingDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProductAddSpecificsInner {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("  UsedForVariations: ").Append(UsedForVariations).Append("\n");
            sb.Append("  ScaleId: ").Append(ScaleId).Append("\n");
            sb.Append("  InputValue: ").Append(InputValue).Append("\n");
            sb.Append("  FoodDetails: ").Append(FoodDetails).Append("\n");
            sb.Append("  GroupProductsDetails: ").Append(GroupProductsDetails).Append("\n");
            sb.Append("  BookingDetails: ").Append(BookingDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
