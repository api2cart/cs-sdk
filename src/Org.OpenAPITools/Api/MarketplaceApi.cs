/*
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMarketplaceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// marketplace.product.find
        /// </summary>
        /// <remarks>
        /// Search product in global catalog.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="keyword">Defines search keyword (optional)</param>
        /// <param name="categoriesIds">Defines product add that is specified by comma-separated categories id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="asin">Amazon Standard Identification Number. (optional)</param>
        /// <param name="ean">European Article Number. An EAN is a unique 8 or 13-digit identifier that many industries (such as book publishers) use to identify products. (optional)</param>
        /// <param name="gtin">Global Trade Item Number. An GTIN is an identifier for trade items. (optional)</param>
        /// <param name="upc">Universal Product Code. A UPC (UPC-A) is a commonly used identifer for many different products. (optional)</param>
        /// <param name="mpn">Manufacturer Part Number. A MPN is an identifier of a particular part design or material used. (optional)</param>
        /// <param name="isbn">International Standard Book Number. An ISBN is a unique identifier for books. (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelResponseMarketplaceProductFind</returns>
        ModelResponseMarketplaceProductFind MarketplaceProductFind(int? count = default(int?), string? pageCursor = default(string?), string? keyword = default(string?), string? categoriesIds = default(string?), string? storeId = default(string?), string? asin = default(string?), string? ean = default(string?), string? gtin = default(string?), string? upc = default(string?), string? mpn = default(string?), string? isbn = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0);

        /// <summary>
        /// marketplace.product.find
        /// </summary>
        /// <remarks>
        /// Search product in global catalog.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="keyword">Defines search keyword (optional)</param>
        /// <param name="categoriesIds">Defines product add that is specified by comma-separated categories id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="asin">Amazon Standard Identification Number. (optional)</param>
        /// <param name="ean">European Article Number. An EAN is a unique 8 or 13-digit identifier that many industries (such as book publishers) use to identify products. (optional)</param>
        /// <param name="gtin">Global Trade Item Number. An GTIN is an identifier for trade items. (optional)</param>
        /// <param name="upc">Universal Product Code. A UPC (UPC-A) is a commonly used identifer for many different products. (optional)</param>
        /// <param name="mpn">Manufacturer Part Number. A MPN is an identifier of a particular part design or material used. (optional)</param>
        /// <param name="isbn">International Standard Book Number. An ISBN is a unique identifier for books. (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelResponseMarketplaceProductFind</returns>
        ApiResponse<ModelResponseMarketplaceProductFind> MarketplaceProductFindWithHttpInfo(int? count = default(int?), string? pageCursor = default(string?), string? keyword = default(string?), string? categoriesIds = default(string?), string? storeId = default(string?), string? asin = default(string?), string? ean = default(string?), string? gtin = default(string?), string? upc = default(string?), string? mpn = default(string?), string? isbn = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMarketplaceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// marketplace.product.find
        /// </summary>
        /// <remarks>
        /// Search product in global catalog.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="keyword">Defines search keyword (optional)</param>
        /// <param name="categoriesIds">Defines product add that is specified by comma-separated categories id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="asin">Amazon Standard Identification Number. (optional)</param>
        /// <param name="ean">European Article Number. An EAN is a unique 8 or 13-digit identifier that many industries (such as book publishers) use to identify products. (optional)</param>
        /// <param name="gtin">Global Trade Item Number. An GTIN is an identifier for trade items. (optional)</param>
        /// <param name="upc">Universal Product Code. A UPC (UPC-A) is a commonly used identifer for many different products. (optional)</param>
        /// <param name="mpn">Manufacturer Part Number. A MPN is an identifier of a particular part design or material used. (optional)</param>
        /// <param name="isbn">International Standard Book Number. An ISBN is a unique identifier for books. (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelResponseMarketplaceProductFind</returns>
        System.Threading.Tasks.Task<ModelResponseMarketplaceProductFind> MarketplaceProductFindAsync(int? count = default(int?), string? pageCursor = default(string?), string? keyword = default(string?), string? categoriesIds = default(string?), string? storeId = default(string?), string? asin = default(string?), string? ean = default(string?), string? gtin = default(string?), string? upc = default(string?), string? mpn = default(string?), string? isbn = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// marketplace.product.find
        /// </summary>
        /// <remarks>
        /// Search product in global catalog.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="keyword">Defines search keyword (optional)</param>
        /// <param name="categoriesIds">Defines product add that is specified by comma-separated categories id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="asin">Amazon Standard Identification Number. (optional)</param>
        /// <param name="ean">European Article Number. An EAN is a unique 8 or 13-digit identifier that many industries (such as book publishers) use to identify products. (optional)</param>
        /// <param name="gtin">Global Trade Item Number. An GTIN is an identifier for trade items. (optional)</param>
        /// <param name="upc">Universal Product Code. A UPC (UPC-A) is a commonly used identifer for many different products. (optional)</param>
        /// <param name="mpn">Manufacturer Part Number. A MPN is an identifier of a particular part design or material used. (optional)</param>
        /// <param name="isbn">International Standard Book Number. An ISBN is a unique identifier for books. (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelResponseMarketplaceProductFind)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelResponseMarketplaceProductFind>> MarketplaceProductFindWithHttpInfoAsync(int? count = default(int?), string? pageCursor = default(string?), string? keyword = default(string?), string? categoriesIds = default(string?), string? storeId = default(string?), string? asin = default(string?), string? ean = default(string?), string? gtin = default(string?), string? upc = default(string?), string? mpn = default(string?), string? isbn = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMarketplaceApi : IMarketplaceApiSync, IMarketplaceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MarketplaceApi : IMarketplaceApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketplaceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MarketplaceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketplaceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MarketplaceApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketplaceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MarketplaceApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketplaceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MarketplaceApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// marketplace.product.find Search product in global catalog.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="keyword">Defines search keyword (optional)</param>
        /// <param name="categoriesIds">Defines product add that is specified by comma-separated categories id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="asin">Amazon Standard Identification Number. (optional)</param>
        /// <param name="ean">European Article Number. An EAN is a unique 8 or 13-digit identifier that many industries (such as book publishers) use to identify products. (optional)</param>
        /// <param name="gtin">Global Trade Item Number. An GTIN is an identifier for trade items. (optional)</param>
        /// <param name="upc">Universal Product Code. A UPC (UPC-A) is a commonly used identifer for many different products. (optional)</param>
        /// <param name="mpn">Manufacturer Part Number. A MPN is an identifier of a particular part design or material used. (optional)</param>
        /// <param name="isbn">International Standard Book Number. An ISBN is a unique identifier for books. (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelResponseMarketplaceProductFind</returns>
        public ModelResponseMarketplaceProductFind MarketplaceProductFind(int? count = default(int?), string? pageCursor = default(string?), string? keyword = default(string?), string? categoriesIds = default(string?), string? storeId = default(string?), string? asin = default(string?), string? ean = default(string?), string? gtin = default(string?), string? upc = default(string?), string? mpn = default(string?), string? isbn = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModelResponseMarketplaceProductFind> localVarResponse = MarketplaceProductFindWithHttpInfo(count, pageCursor, keyword, categoriesIds, storeId, asin, ean, gtin, upc, mpn, isbn, responseFields, varParams, exclude);
            return localVarResponse.Data;
        }

        /// <summary>
        /// marketplace.product.find Search product in global catalog.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="keyword">Defines search keyword (optional)</param>
        /// <param name="categoriesIds">Defines product add that is specified by comma-separated categories id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="asin">Amazon Standard Identification Number. (optional)</param>
        /// <param name="ean">European Article Number. An EAN is a unique 8 or 13-digit identifier that many industries (such as book publishers) use to identify products. (optional)</param>
        /// <param name="gtin">Global Trade Item Number. An GTIN is an identifier for trade items. (optional)</param>
        /// <param name="upc">Universal Product Code. A UPC (UPC-A) is a commonly used identifer for many different products. (optional)</param>
        /// <param name="mpn">Manufacturer Part Number. A MPN is an identifier of a particular part design or material used. (optional)</param>
        /// <param name="isbn">International Standard Book Number. An ISBN is a unique identifier for books. (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelResponseMarketplaceProductFind</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModelResponseMarketplaceProductFind> MarketplaceProductFindWithHttpInfo(int? count = default(int?), string? pageCursor = default(string?), string? keyword = default(string?), string? categoriesIds = default(string?), string? storeId = default(string?), string? asin = default(string?), string? ean = default(string?), string? gtin = default(string?), string? upc = default(string?), string? mpn = default(string?), string? isbn = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (pageCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_cursor", pageCursor));
            }
            if (keyword != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "keyword", keyword));
            }
            if (categoriesIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "categories_ids", categoriesIds));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (asin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "asin", asin));
            }
            if (ean != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ean", ean));
            }
            if (gtin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "gtin", gtin));
            }
            if (upc != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "upc", upc));
            }
            if (mpn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "mpn", mpn));
            }
            if (isbn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "isbn", isbn));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }

            localVarRequestOptions.Operation = "MarketplaceApi.MarketplaceProductFind";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ModelResponseMarketplaceProductFind>("/marketplace.product.find.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MarketplaceProductFind", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// marketplace.product.find Search product in global catalog.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="keyword">Defines search keyword (optional)</param>
        /// <param name="categoriesIds">Defines product add that is specified by comma-separated categories id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="asin">Amazon Standard Identification Number. (optional)</param>
        /// <param name="ean">European Article Number. An EAN is a unique 8 or 13-digit identifier that many industries (such as book publishers) use to identify products. (optional)</param>
        /// <param name="gtin">Global Trade Item Number. An GTIN is an identifier for trade items. (optional)</param>
        /// <param name="upc">Universal Product Code. A UPC (UPC-A) is a commonly used identifer for many different products. (optional)</param>
        /// <param name="mpn">Manufacturer Part Number. A MPN is an identifier of a particular part design or material used. (optional)</param>
        /// <param name="isbn">International Standard Book Number. An ISBN is a unique identifier for books. (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelResponseMarketplaceProductFind</returns>
        public async System.Threading.Tasks.Task<ModelResponseMarketplaceProductFind> MarketplaceProductFindAsync(int? count = default(int?), string? pageCursor = default(string?), string? keyword = default(string?), string? categoriesIds = default(string?), string? storeId = default(string?), string? asin = default(string?), string? ean = default(string?), string? gtin = default(string?), string? upc = default(string?), string? mpn = default(string?), string? isbn = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModelResponseMarketplaceProductFind> localVarResponse = await MarketplaceProductFindWithHttpInfoAsync(count, pageCursor, keyword, categoriesIds, storeId, asin, ean, gtin, upc, mpn, isbn, responseFields, varParams, exclude, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// marketplace.product.find Search product in global catalog.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="keyword">Defines search keyword (optional)</param>
        /// <param name="categoriesIds">Defines product add that is specified by comma-separated categories id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="asin">Amazon Standard Identification Number. (optional)</param>
        /// <param name="ean">European Article Number. An EAN is a unique 8 or 13-digit identifier that many industries (such as book publishers) use to identify products. (optional)</param>
        /// <param name="gtin">Global Trade Item Number. An GTIN is an identifier for trade items. (optional)</param>
        /// <param name="upc">Universal Product Code. A UPC (UPC-A) is a commonly used identifer for many different products. (optional)</param>
        /// <param name="mpn">Manufacturer Part Number. A MPN is an identifier of a particular part design or material used. (optional)</param>
        /// <param name="isbn">International Standard Book Number. An ISBN is a unique identifier for books. (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelResponseMarketplaceProductFind)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModelResponseMarketplaceProductFind>> MarketplaceProductFindWithHttpInfoAsync(int? count = default(int?), string? pageCursor = default(string?), string? keyword = default(string?), string? categoriesIds = default(string?), string? storeId = default(string?), string? asin = default(string?), string? ean = default(string?), string? gtin = default(string?), string? upc = default(string?), string? mpn = default(string?), string? isbn = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (pageCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_cursor", pageCursor));
            }
            if (keyword != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "keyword", keyword));
            }
            if (categoriesIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "categories_ids", categoriesIds));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (asin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "asin", asin));
            }
            if (ean != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ean", ean));
            }
            if (gtin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "gtin", gtin));
            }
            if (upc != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "upc", upc));
            }
            if (mpn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "mpn", mpn));
            }
            if (isbn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "isbn", isbn));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }

            localVarRequestOptions.Operation = "MarketplaceApi.MarketplaceProductFind";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ModelResponseMarketplaceProductFind>("/marketplace.product.find.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MarketplaceProductFind", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
