/*
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// account.cart.add
        /// </summary>
        /// <remarks>
        /// Use this method to automate the process of connecting stores to API2Cart. The list of parameters will vary depending on the platform. To get a list of parameters that are specific to a particular shopping platform, you need to execute the account.supported_platforms.json method.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountCartAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountCartAdd200Response</returns>
        AccountCartAdd200Response AccountCartAdd(AccountCartAdd accountCartAdd, int operationIndex = 0);

        /// <summary>
        /// account.cart.add
        /// </summary>
        /// <remarks>
        /// Use this method to automate the process of connecting stores to API2Cart. The list of parameters will vary depending on the platform. To get a list of parameters that are specific to a particular shopping platform, you need to execute the account.supported_platforms.json method.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountCartAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountCartAdd200Response</returns>
        ApiResponse<AccountCartAdd200Response> AccountCartAddWithHttpInfo(AccountCartAdd accountCartAdd, int operationIndex = 0);
        /// <summary>
        /// account.cart.list
        /// </summary>
        /// <remarks>
        /// This method lets you get a list of online stores connected to your API2Cart account. You can get the number of API requests to each store if you specify a period using parameters (request_from_date, request_to_date). The total_calls field is displayed only if there are parameters (request_from_date, request_to_date).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeUrl">A web address of a store (optional)</param>
        /// <param name="storeKey">Find store by store key (optional)</param>
        /// <param name="requestFromDate">Retrieve entities from their creation date (optional)</param>
        /// <param name="requestToDate">Retrieve entities to their creation date (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountCartList200Response</returns>
        AccountCartList200Response AccountCartList(string? storeUrl = default(string?), string? storeKey = default(string?), string? requestFromDate = default(string?), string? requestToDate = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0);

        /// <summary>
        /// account.cart.list
        /// </summary>
        /// <remarks>
        /// This method lets you get a list of online stores connected to your API2Cart account. You can get the number of API requests to each store if you specify a period using parameters (request_from_date, request_to_date). The total_calls field is displayed only if there are parameters (request_from_date, request_to_date).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeUrl">A web address of a store (optional)</param>
        /// <param name="storeKey">Find store by store key (optional)</param>
        /// <param name="requestFromDate">Retrieve entities from their creation date (optional)</param>
        /// <param name="requestToDate">Retrieve entities to their creation date (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountCartList200Response</returns>
        ApiResponse<AccountCartList200Response> AccountCartListWithHttpInfo(string? storeUrl = default(string?), string? storeKey = default(string?), string? requestFromDate = default(string?), string? requestToDate = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0);
        /// <summary>
        /// account.config.update
        /// </summary>
        /// <remarks>
        /// Use this method to automate the change of credentials used to connect online stores. The list of supported parameters differs depending on the platform.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replaceParameters">Identifies if there is a necessity to replace parameters (optional)</param>
        /// <param name="newStoreUrl">The web address of the store you want to update to connect to API2Cart (optional)</param>
        /// <param name="newStoreKey">Update store key (optional)</param>
        /// <param name="bridgeUrl">This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store) (optional)</param>
        /// <param name="storeRoot">Absolute path to the store root directory (used with \&quot;bridge_url\&quot; parameter) (optional)</param>
        /// <param name="dbTablesPrefix">DB tables prefix (optional)</param>
        /// <param name="userAgent">This parameter allows you to set your custom user agent, which will be used in requests to the store. Please use it cautiously, as the store&#39;s firewall may block specific values. (optional)</param>
        /// <param name="var3dcartPrivateKey">3DCart Private Key (optional)</param>
        /// <param name="var3dcartAccessToken">3DCart Token (optional)</param>
        /// <param name="var3dcartapiApiKey">3DCart API Key (optional)</param>
        /// <param name="amazonSpClientId">Amazon SP API app client id (optional)</param>
        /// <param name="amazonSpClientSecret">Amazon SP API app client secret (optional)</param>
        /// <param name="amazonSpRefreshToken">Amazon SP API OAuth refresh token (optional)</param>
        /// <param name="amazonSpAwsRegion">Amazon AWS Region (optional)</param>
        /// <param name="amazonSpApiEnvironment">Amazon SP API environment (optional, default to &quot;production&quot;)</param>
        /// <param name="amazonSellerId">Amazon Seller ID (Merchant token) (optional)</param>
        /// <param name="aspdotnetstorefrontApiUser">It&#39;s a AspDotNetStorefront account for which API is available (optional)</param>
        /// <param name="aspdotnetstorefrontApiPass">AspDotNetStorefront API Password (optional)</param>
        /// <param name="bigcommerceapiAdminAccount">It&#39;s a BigCommerce account for which API is enabled (optional)</param>
        /// <param name="bigcommerceapiApiPath">BigCommerce API URL (optional)</param>
        /// <param name="bigcommerceapiApiKey">Bigcommerce API Key (optional)</param>
        /// <param name="bigcommerceapiClientId">Client ID of the requesting app (optional)</param>
        /// <param name="bigcommerceapiAccessToken">Access token authorizing the app to access resources on behalf of a user (optional)</param>
        /// <param name="bigcommerceapiContext">API Path section unique to the store (optional)</param>
        /// <param name="bolApiKey">Bol API Key (optional)</param>
        /// <param name="bolApiSecret">Bol API Secret (optional)</param>
        /// <param name="bolRetailerId">Bol Retailer ID (optional)</param>
        /// <param name="demandwareClientId">Demandware client id (optional)</param>
        /// <param name="demandwareApiPassword">Demandware api password (optional)</param>
        /// <param name="demandwareUserName">Demandware user name (optional)</param>
        /// <param name="demandwareUserPassword">Demandware user password (optional)</param>
        /// <param name="ebayClientId">Application ID (AppID). (optional)</param>
        /// <param name="ebayClientSecret">Shared Secret from eBay application (optional)</param>
        /// <param name="ebayRuname">The RuName value that eBay assigns to your application. (optional)</param>
        /// <param name="ebayAccessToken">Used to authenticate API requests. (optional)</param>
        /// <param name="ebayRefreshToken">Used to renew the access token. (optional)</param>
        /// <param name="ebayEnvironment">eBay environment (optional)</param>
        /// <param name="ebaySiteId">eBay global ID (optional, default to 0)</param>
        /// <param name="ecwidAcessToken">Access token authorizing the app to access resources on behalf of a user (optional)</param>
        /// <param name="ecwidStoreId">Store Id (optional)</param>
        /// <param name="lazadaAppId">Lazada App ID (optional)</param>
        /// <param name="lazadaAppSecret">Lazada App Secret (optional)</param>
        /// <param name="lazadaRefreshToken">Lazada Refresh Token (optional)</param>
        /// <param name="lazadaRegion">Lazada API endpoint Region (optional)</param>
        /// <param name="etsyKeystring">Etsy keystring (optional)</param>
        /// <param name="etsySharedSecret">Etsy shared secret (optional)</param>
        /// <param name="etsyAccessToken">Access token authorizing the app to access resources on behalf of a user (optional)</param>
        /// <param name="etsyTokenSecret">Secret token authorizing the app to access resources on behalf of a user (optional)</param>
        /// <param name="etsyClientId">Etsy Client Id (optional)</param>
        /// <param name="etsyRefreshToken">Etsy Refresh token (optional)</param>
        /// <param name="facebookAppId">Facebook App ID (optional)</param>
        /// <param name="facebookAppSecret">Facebook App Secret (optional)</param>
        /// <param name="facebookAccessToken">Facebook Access Token (optional)</param>
        /// <param name="facebookBusinessId">Facebook Business ID (optional)</param>
        /// <param name="netoApiKey">Neto API Key (optional)</param>
        /// <param name="netoApiUsername">Neto User Name (optional)</param>
        /// <param name="shoplineAccessToken">Shopline APP Key (optional)</param>
        /// <param name="shoplineAppKey">Shopline APP Key (optional)</param>
        /// <param name="shoplineAppSecret">Shopline App Secret (optional)</param>
        /// <param name="shoplineSharedSecret">Shopline Shared Secret (optional)</param>
        /// <param name="shopifyAccessToken">Access token authorizing the app to access resources on behalf of a user (optional)</param>
        /// <param name="shopifyApiKey">Shopify API Key (optional)</param>
        /// <param name="shopifyApiPassword">Shopify API Password (optional)</param>
        /// <param name="shopifySharedSecret">Shared secret (optional)</param>
        /// <param name="shoplazzaAccessToken">Access token authorizing the app to access resources on behalf of a user (optional)</param>
        /// <param name="shoplazzaSharedSecret">Shared secret (optional)</param>
        /// <param name="mivaAccessToken">Miva access token (optional)</param>
        /// <param name="mivaSignature">Miva signature (optional)</param>
        /// <param name="shopwareAccessKey">Shopware access key (optional)</param>
        /// <param name="shopwareApiKey">Shopware api key (optional)</param>
        /// <param name="shopwareApiSecret">Shopware client secret access key (optional)</param>
        /// <param name="bigcartelUserName">Subdomain of store (optional)</param>
        /// <param name="bigcartelPassword">BigCartel account password (optional)</param>
        /// <param name="volusionLogin">It&#39;s a Volusion account for which API is enabled (optional)</param>
        /// <param name="volusionPassword">Volusion API Password (optional)</param>
        /// <param name="walmartClientId">Walmart client ID. For the region &#39;ca&#39; use Consumer ID (optional)</param>
        /// <param name="walmartClientSecret">Walmart client secret. For the region &#39;ca&#39; use Private Key (optional)</param>
        /// <param name="walmartEnvironment">Walmart environment (optional, default to &quot;production&quot;)</param>
        /// <param name="walmartChannelType">Walmart WM_CONSUMER.CHANNEL.TYPE header (optional)</param>
        /// <param name="walmartRegion">Walmart region (optional, default to &quot;us&quot;)</param>
        /// <param name="squareClientId">Square (Weebly) Client ID (optional)</param>
        /// <param name="squareClientSecret">Square (Weebly) Client Secret (optional)</param>
        /// <param name="squareRefreshToken">Square (Weebly) Refresh Token (optional)</param>
        /// <param name="squarespaceApiKey">Squarespace API Key (optional)</param>
        /// <param name="squarespaceClientId">Squarespace Connector Client ID (optional)</param>
        /// <param name="squarespaceClientSecret">Squarespace Connector Client Secret (optional)</param>
        /// <param name="squarespaceAccessToken">Squarespace access token (optional)</param>
        /// <param name="squarespaceRefreshToken">Squarespace refresh token (optional)</param>
        /// <param name="hybrisClientId">Omni Commerce Connector Client ID (optional)</param>
        /// <param name="hybrisClientSecret">Omni Commerce Connector Client Secret (optional)</param>
        /// <param name="hybrisUsername">User Name (optional)</param>
        /// <param name="hybrisPassword">User password (optional)</param>
        /// <param name="hybrisWebsites">Websites to stores mapping data (optional)</param>
        /// <param name="lightspeedApiKey">LightSpeed api key (optional)</param>
        /// <param name="lightspeedApiSecret">LightSpeed api secret (optional)</param>
        /// <param name="commercehqApiKey">CommerceHQ api key (optional)</param>
        /// <param name="commercehqApiPassword">CommerceHQ api password (optional)</param>
        /// <param name="wcConsumerKey">Woocommerce consumer key (optional)</param>
        /// <param name="wcConsumerSecret">Woocommerce consumer secret (optional)</param>
        /// <param name="magentoConsumerKey">Magento Consumer Key (optional)</param>
        /// <param name="magentoConsumerSecret">Magento Consumer Secret (optional)</param>
        /// <param name="magentoAccessToken">Magento Access Token (optional)</param>
        /// <param name="magentoTokenSecret">Magento Token Secret (optional)</param>
        /// <param name="prestashopWebserviceKey">Prestashop webservice key (optional)</param>
        /// <param name="wixAppId">Wix App ID (optional)</param>
        /// <param name="wixAppSecretKey">Wix App Secret Key (optional)</param>
        /// <param name="wixInstanceId">Wix Instance ID (optional)</param>
        /// <param name="wixRefreshToken">Wix refresh token (optional)</param>
        /// <param name="mercadoLibreAppId">Mercado Libre App ID (optional)</param>
        /// <param name="mercadoLibreAppSecretKey">Mercado Libre App Secret Key (optional)</param>
        /// <param name="mercadoLibreRefreshToken">Mercado Libre Refresh Token (optional)</param>
        /// <param name="zidClientId">Zid Client ID (optional)</param>
        /// <param name="zidClientSecret">Zid Client Secret (optional)</param>
        /// <param name="zidAccessToken">Zid Access Token (optional)</param>
        /// <param name="zidAuthorization">Zid Authorization (optional)</param>
        /// <param name="zidRefreshToken">Zid refresh token (optional)</param>
        /// <param name="flipkartClientId">Flipkart Client ID (optional)</param>
        /// <param name="flipkartClientSecret">Flipkart Client Secret (optional)</param>
        /// <param name="allegroClientId">Allegro Client ID (optional)</param>
        /// <param name="allegroClientSecret">Allegro Client Secret (optional)</param>
        /// <param name="allegroAccessToken">Allegro Access Token (optional)</param>
        /// <param name="allegroRefreshToken">Allegro Refresh Token (optional)</param>
        /// <param name="allegroEnvironment">Allegro Environment (optional, default to &quot;production&quot;)</param>
        /// <param name="zohoClientId">Zoho Client ID (optional)</param>
        /// <param name="zohoClientSecret">Zoho Client Secret (optional)</param>
        /// <param name="zohoRefreshToken">Zoho Refresh Token (optional)</param>
        /// <param name="zohoRegion">Zoho API endpoint Region (optional)</param>
        /// <param name="tiendanubeUserId">Tiendanube User ID (optional)</param>
        /// <param name="tiendanubeAccessToken">Tiendanube Access Token (optional)</param>
        /// <param name="tiendanubeClientSecret">Tiendanube Client Secret (optional)</param>
        /// <param name="ottoClientId">Otto Client ID (optional)</param>
        /// <param name="ottoClientSecret">Otto Client Secret (optional)</param>
        /// <param name="ottoAppId">Otto App ID (optional)</param>
        /// <param name="ottoRefreshToken">Otto Refresh Token (optional)</param>
        /// <param name="ottoEnvironment">Otto Environment (optional)</param>
        /// <param name="ottoAccessToken">Otto Access Token (optional)</param>
        /// <param name="tiktokshopAppKey">TikTok Shop App Key (optional)</param>
        /// <param name="tiktokshopAppSecret">TikTok Shop App Secret (optional)</param>
        /// <param name="tiktokshopRefreshToken">TikTok Shop Refresh Token (optional)</param>
        /// <param name="tiktokshopAccessToken">TikTok Shop Access Token (optional)</param>
        /// <param name="sallaClientId">Salla Client ID (optional)</param>
        /// <param name="sallaClientSecret">Salla Client Secret (optional)</param>
        /// <param name="sallaRefreshToken">Salla Refresh Token (optional)</param>
        /// <param name="sallaAccessToken">Salla Access Token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountConfigUpdate200Response</returns>
        AccountConfigUpdate200Response AccountConfigUpdate(bool? replaceParameters = default(bool?), string? newStoreUrl = default(string?), string? newStoreKey = default(string?), string? bridgeUrl = default(string?), string? storeRoot = default(string?), string? dbTablesPrefix = default(string?), string? userAgent = default(string?), string? var3dcartPrivateKey = default(string?), string? var3dcartAccessToken = default(string?), string? var3dcartapiApiKey = default(string?), string? amazonSpClientId = default(string?), string? amazonSpClientSecret = default(string?), string? amazonSpRefreshToken = default(string?), string? amazonSpAwsRegion = default(string?), string? amazonSpApiEnvironment = default(string?), string? amazonSellerId = default(string?), string? aspdotnetstorefrontApiUser = default(string?), string? aspdotnetstorefrontApiPass = default(string?), string? bigcommerceapiAdminAccount = default(string?), string? bigcommerceapiApiPath = default(string?), string? bigcommerceapiApiKey = default(string?), string? bigcommerceapiClientId = default(string?), string? bigcommerceapiAccessToken = default(string?), string? bigcommerceapiContext = default(string?), string? bolApiKey = default(string?), string? bolApiSecret = default(string?), int? bolRetailerId = default(int?), string? demandwareClientId = default(string?), string? demandwareApiPassword = default(string?), string? demandwareUserName = default(string?), string? demandwareUserPassword = default(string?), string? ebayClientId = default(string?), string? ebayClientSecret = default(string?), string? ebayRuname = default(string?), string? ebayAccessToken = default(string?), string? ebayRefreshToken = default(string?), string? ebayEnvironment = default(string?), int? ebaySiteId = default(int?), string? ecwidAcessToken = default(string?), string? ecwidStoreId = default(string?), string? lazadaAppId = default(string?), string? lazadaAppSecret = default(string?), string? lazadaRefreshToken = default(string?), string? lazadaRegion = default(string?), string? etsyKeystring = default(string?), string? etsySharedSecret = default(string?), string? etsyAccessToken = default(string?), string? etsyTokenSecret = default(string?), string? etsyClientId = default(string?), string? etsyRefreshToken = default(string?), string? facebookAppId = default(string?), string? facebookAppSecret = default(string?), string? facebookAccessToken = default(string?), string? facebookBusinessId = default(string?), string? netoApiKey = default(string?), string? netoApiUsername = default(string?), string? shoplineAccessToken = default(string?), string? shoplineAppKey = default(string?), string? shoplineAppSecret = default(string?), string? shoplineSharedSecret = default(string?), string? shopifyAccessToken = default(string?), string? shopifyApiKey = default(string?), string? shopifyApiPassword = default(string?), string? shopifySharedSecret = default(string?), string? shoplazzaAccessToken = default(string?), string? shoplazzaSharedSecret = default(string?), string? mivaAccessToken = default(string?), string? mivaSignature = default(string?), string? shopwareAccessKey = default(string?), string? shopwareApiKey = default(string?), string? shopwareApiSecret = default(string?), string? bigcartelUserName = default(string?), string? bigcartelPassword = default(string?), string? volusionLogin = default(string?), string? volusionPassword = default(string?), string? walmartClientId = default(string?), string? walmartClientSecret = default(string?), string? walmartEnvironment = default(string?), string? walmartChannelType = default(string?), string? walmartRegion = default(string?), string? squareClientId = default(string?), string? squareClientSecret = default(string?), string? squareRefreshToken = default(string?), string? squarespaceApiKey = default(string?), string? squarespaceClientId = default(string?), string? squarespaceClientSecret = default(string?), string? squarespaceAccessToken = default(string?), string? squarespaceRefreshToken = default(string?), string? hybrisClientId = default(string?), string? hybrisClientSecret = default(string?), string? hybrisUsername = default(string?), string? hybrisPassword = default(string?), List<string>? hybrisWebsites = default(List<string>?), string? lightspeedApiKey = default(string?), string? lightspeedApiSecret = default(string?), string? commercehqApiKey = default(string?), string? commercehqApiPassword = default(string?), string? wcConsumerKey = default(string?), string? wcConsumerSecret = default(string?), string? magentoConsumerKey = default(string?), string? magentoConsumerSecret = default(string?), string? magentoAccessToken = default(string?), string? magentoTokenSecret = default(string?), string? prestashopWebserviceKey = default(string?), string? wixAppId = default(string?), string? wixAppSecretKey = default(string?), string? wixInstanceId = default(string?), string? wixRefreshToken = default(string?), string? mercadoLibreAppId = default(string?), string? mercadoLibreAppSecretKey = default(string?), string? mercadoLibreRefreshToken = default(string?), int? zidClientId = default(int?), string? zidClientSecret = default(string?), string? zidAccessToken = default(string?), string? zidAuthorization = default(string?), string? zidRefreshToken = default(string?), string? flipkartClientId = default(string?), string? flipkartClientSecret = default(string?), string? allegroClientId = default(string?), string? allegroClientSecret = default(string?), string? allegroAccessToken = default(string?), string? allegroRefreshToken = default(string?), string? allegroEnvironment = default(string?), string? zohoClientId = default(string?), string? zohoClientSecret = default(string?), string? zohoRefreshToken = default(string?), string? zohoRegion = default(string?), int? tiendanubeUserId = default(int?), string? tiendanubeAccessToken = default(string?), string? tiendanubeClientSecret = default(string?), string? ottoClientId = default(string?), string? ottoClientSecret = default(string?), string? ottoAppId = default(string?), string? ottoRefreshToken = default(string?), string? ottoEnvironment = default(string?), string? ottoAccessToken = default(string?), string? tiktokshopAppKey = default(string?), string? tiktokshopAppSecret = default(string?), string? tiktokshopRefreshToken = default(string?), string? tiktokshopAccessToken = default(string?), string? sallaClientId = default(string?), string? sallaClientSecret = default(string?), string? sallaRefreshToken = default(string?), string? sallaAccessToken = default(string?), int operationIndex = 0);

        /// <summary>
        /// account.config.update
        /// </summary>
        /// <remarks>
        /// Use this method to automate the change of credentials used to connect online stores. The list of supported parameters differs depending on the platform.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replaceParameters">Identifies if there is a necessity to replace parameters (optional)</param>
        /// <param name="newStoreUrl">The web address of the store you want to update to connect to API2Cart (optional)</param>
        /// <param name="newStoreKey">Update store key (optional)</param>
        /// <param name="bridgeUrl">This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store) (optional)</param>
        /// <param name="storeRoot">Absolute path to the store root directory (used with \&quot;bridge_url\&quot; parameter) (optional)</param>
        /// <param name="dbTablesPrefix">DB tables prefix (optional)</param>
        /// <param name="userAgent">This parameter allows you to set your custom user agent, which will be used in requests to the store. Please use it cautiously, as the store&#39;s firewall may block specific values. (optional)</param>
        /// <param name="var3dcartPrivateKey">3DCart Private Key (optional)</param>
        /// <param name="var3dcartAccessToken">3DCart Token (optional)</param>
        /// <param name="var3dcartapiApiKey">3DCart API Key (optional)</param>
        /// <param name="amazonSpClientId">Amazon SP API app client id (optional)</param>
        /// <param name="amazonSpClientSecret">Amazon SP API app client secret (optional)</param>
        /// <param name="amazonSpRefreshToken">Amazon SP API OAuth refresh token (optional)</param>
        /// <param name="amazonSpAwsRegion">Amazon AWS Region (optional)</param>
        /// <param name="amazonSpApiEnvironment">Amazon SP API environment (optional, default to &quot;production&quot;)</param>
        /// <param name="amazonSellerId">Amazon Seller ID (Merchant token) (optional)</param>
        /// <param name="aspdotnetstorefrontApiUser">It&#39;s a AspDotNetStorefront account for which API is available (optional)</param>
        /// <param name="aspdotnetstorefrontApiPass">AspDotNetStorefront API Password (optional)</param>
        /// <param name="bigcommerceapiAdminAccount">It&#39;s a BigCommerce account for which API is enabled (optional)</param>
        /// <param name="bigcommerceapiApiPath">BigCommerce API URL (optional)</param>
        /// <param name="bigcommerceapiApiKey">Bigcommerce API Key (optional)</param>
        /// <param name="bigcommerceapiClientId">Client ID of the requesting app (optional)</param>
        /// <param name="bigcommerceapiAccessToken">Access token authorizing the app to access resources on behalf of a user (optional)</param>
        /// <param name="bigcommerceapiContext">API Path section unique to the store (optional)</param>
        /// <param name="bolApiKey">Bol API Key (optional)</param>
        /// <param name="bolApiSecret">Bol API Secret (optional)</param>
        /// <param name="bolRetailerId">Bol Retailer ID (optional)</param>
        /// <param name="demandwareClientId">Demandware client id (optional)</param>
        /// <param name="demandwareApiPassword">Demandware api password (optional)</param>
        /// <param name="demandwareUserName">Demandware user name (optional)</param>
        /// <param name="demandwareUserPassword">Demandware user password (optional)</param>
        /// <param name="ebayClientId">Application ID (AppID). (optional)</param>
        /// <param name="ebayClientSecret">Shared Secret from eBay application (optional)</param>
        /// <param name="ebayRuname">The RuName value that eBay assigns to your application. (optional)</param>
        /// <param name="ebayAccessToken">Used to authenticate API requests. (optional)</param>
        /// <param name="ebayRefreshToken">Used to renew the access token. (optional)</param>
        /// <param name="ebayEnvironment">eBay environment (optional)</param>
        /// <param name="ebaySiteId">eBay global ID (optional, default to 0)</param>
        /// <param name="ecwidAcessToken">Access token authorizing the app to access resources on behalf of a user (optional)</param>
        /// <param name="ecwidStoreId">Store Id (optional)</param>
        /// <param name="lazadaAppId">Lazada App ID (optional)</param>
        /// <param name="lazadaAppSecret">Lazada App Secret (optional)</param>
        /// <param name="lazadaRefreshToken">Lazada Refresh Token (optional)</param>
        /// <param name="lazadaRegion">Lazada API endpoint Region (optional)</param>
        /// <param name="etsyKeystring">Etsy keystring (optional)</param>
        /// <param name="etsySharedSecret">Etsy shared secret (optional)</param>
        /// <param name="etsyAccessToken">Access token authorizing the app to access resources on behalf of a user (optional)</param>
        /// <param name="etsyTokenSecret">Secret token authorizing the app to access resources on behalf of a user (optional)</param>
        /// <param name="etsyClientId">Etsy Client Id (optional)</param>
        /// <param name="etsyRefreshToken">Etsy Refresh token (optional)</param>
        /// <param name="facebookAppId">Facebook App ID (optional)</param>
        /// <param name="facebookAppSecret">Facebook App Secret (optional)</param>
        /// <param name="facebookAccessToken">Facebook Access Token (optional)</param>
        /// <param name="facebookBusinessId">Facebook Business ID (optional)</param>
        /// <param name="netoApiKey">Neto API Key (optional)</param>
        /// <param name="netoApiUsername">Neto User Name (optional)</param>
        /// <param name="shoplineAccessToken">Shopline APP Key (optional)</param>
        /// <param name="shoplineAppKey">Shopline APP Key (optional)</param>
        /// <param name="shoplineAppSecret">Shopline App Secret (optional)</param>
        /// <param name="shoplineSharedSecret">Shopline Shared Secret (optional)</param>
        /// <param name="shopifyAccessToken">Access token authorizing the app to access resources on behalf of a user (optional)</param>
        /// <param name="shopifyApiKey">Shopify API Key (optional)</param>
        /// <param name="shopifyApiPassword">Shopify API Password (optional)</param>
        /// <param name="shopifySharedSecret">Shared secret (optional)</param>
        /// <param name="shoplazzaAccessToken">Access token authorizing the app to access resources on behalf of a user (optional)</param>
        /// <param name="shoplazzaSharedSecret">Shared secret (optional)</param>
        /// <param name="mivaAccessToken">Miva access token (optional)</param>
        /// <param name="mivaSignature">Miva signature (optional)</param>
        /// <param name="shopwareAccessKey">Shopware access key (optional)</param>
        /// <param name="shopwareApiKey">Shopware api key (optional)</param>
        /// <param name="shopwareApiSecret">Shopware client secret access key (optional)</param>
        /// <param name="bigcartelUserName">Subdomain of store (optional)</param>
        /// <param name="bigcartelPassword">BigCartel account password (optional)</param>
        /// <param name="volusionLogin">It&#39;s a Volusion account for which API is enabled (optional)</param>
        /// <param name="volusionPassword">Volusion API Password (optional)</param>
        /// <param name="walmartClientId">Walmart client ID. For the region &#39;ca&#39; use Consumer ID (optional)</param>
        /// <param name="walmartClientSecret">Walmart client secret. For the region &#39;ca&#39; use Private Key (optional)</param>
        /// <param name="walmartEnvironment">Walmart environment (optional, default to &quot;production&quot;)</param>
        /// <param name="walmartChannelType">Walmart WM_CONSUMER.CHANNEL.TYPE header (optional)</param>
        /// <param name="walmartRegion">Walmart region (optional, default to &quot;us&quot;)</param>
        /// <param name="squareClientId">Square (Weebly) Client ID (optional)</param>
        /// <param name="squareClientSecret">Square (Weebly) Client Secret (optional)</param>
        /// <param name="squareRefreshToken">Square (Weebly) Refresh Token (optional)</param>
        /// <param name="squarespaceApiKey">Squarespace API Key (optional)</param>
        /// <param name="squarespaceClientId">Squarespace Connector Client ID (optional)</param>
        /// <param name="squarespaceClientSecret">Squarespace Connector Client Secret (optional)</param>
        /// <param name="squarespaceAccessToken">Squarespace access token (optional)</param>
        /// <param name="squarespaceRefreshToken">Squarespace refresh token (optional)</param>
        /// <param name="hybrisClientId">Omni Commerce Connector Client ID (optional)</param>
        /// <param name="hybrisClientSecret">Omni Commerce Connector Client Secret (optional)</param>
        /// <param name="hybrisUsername">User Name (optional)</param>
        /// <param name="hybrisPassword">User password (optional)</param>
        /// <param name="hybrisWebsites">Websites to stores mapping data (optional)</param>
        /// <param name="lightspeedApiKey">LightSpeed api key (optional)</param>
        /// <param name="lightspeedApiSecret">LightSpeed api secret (optional)</param>
        /// <param name="commercehqApiKey">CommerceHQ api key (optional)</param>
        /// <param name="commercehqApiPassword">CommerceHQ api password (optional)</param>
        /// <param name="wcConsumerKey">Woocommerce consumer key (optional)</param>
        /// <param name="wcConsumerSecret">Woocommerce consumer secret (optional)</param>
        /// <param name="magentoConsumerKey">Magento Consumer Key (optional)</param>
        /// <param name="magentoConsumerSecret">Magento Consumer Secret (optional)</param>
        /// <param name="magentoAccessToken">Magento Access Token (optional)</param>
        /// <param name="magentoTokenSecret">Magento Token Secret (optional)</param>
        /// <param name="prestashopWebserviceKey">Prestashop webservice key (optional)</param>
        /// <param name="wixAppId">Wix App ID (optional)</param>
        /// <param name="wixAppSecretKey">Wix App Secret Key (optional)</param>
        /// <param name="wixInstanceId">Wix Instance ID (optional)</param>
        /// <param name="wixRefreshToken">Wix refresh token (optional)</param>
        /// <param name="mercadoLibreAppId">Mercado Libre App ID (optional)</param>
        /// <param name="mercadoLibreAppSecretKey">Mercado Libre App Secret Key (optional)</param>
        /// <param name="mercadoLibreRefreshToken">Mercado Libre Refresh Token (optional)</param>
        /// <param name="zidClientId">Zid Client ID (optional)</param>
        /// <param name="zidClientSecret">Zid Client Secret (optional)</param>
        /// <param name="zidAccessToken">Zid Access Token (optional)</param>
        /// <param name="zidAuthorization">Zid Authorization (optional)</param>
        /// <param name="zidRefreshToken">Zid refresh token (optional)</param>
        /// <param name="flipkartClientId">Flipkart Client ID (optional)</param>
        /// <param name="flipkartClientSecret">Flipkart Client Secret (optional)</param>
        /// <param name="allegroClientId">Allegro Client ID (optional)</param>
        /// <param name="allegroClientSecret">Allegro Client Secret (optional)</param>
        /// <param name="allegroAccessToken">Allegro Access Token (optional)</param>
        /// <param name="allegroRefreshToken">Allegro Refresh Token (optional)</param>
        /// <param name="allegroEnvironment">Allegro Environment (optional, default to &quot;production&quot;)</param>
        /// <param name="zohoClientId">Zoho Client ID (optional)</param>
        /// <param name="zohoClientSecret">Zoho Client Secret (optional)</param>
        /// <param name="zohoRefreshToken">Zoho Refresh Token (optional)</param>
        /// <param name="zohoRegion">Zoho API endpoint Region (optional)</param>
        /// <param name="tiendanubeUserId">Tiendanube User ID (optional)</param>
        /// <param name="tiendanubeAccessToken">Tiendanube Access Token (optional)</param>
        /// <param name="tiendanubeClientSecret">Tiendanube Client Secret (optional)</param>
        /// <param name="ottoClientId">Otto Client ID (optional)</param>
        /// <param name="ottoClientSecret">Otto Client Secret (optional)</param>
        /// <param name="ottoAppId">Otto App ID (optional)</param>
        /// <param name="ottoRefreshToken">Otto Refresh Token (optional)</param>
        /// <param name="ottoEnvironment">Otto Environment (optional)</param>
        /// <param name="ottoAccessToken">Otto Access Token (optional)</param>
        /// <param name="tiktokshopAppKey">TikTok Shop App Key (optional)</param>
        /// <param name="tiktokshopAppSecret">TikTok Shop App Secret (optional)</param>
        /// <param name="tiktokshopRefreshToken">TikTok Shop Refresh Token (optional)</param>
        /// <param name="tiktokshopAccessToken">TikTok Shop Access Token (optional)</param>
        /// <param name="sallaClientId">Salla Client ID (optional)</param>
        /// <param name="sallaClientSecret">Salla Client Secret (optional)</param>
        /// <param name="sallaRefreshToken">Salla Refresh Token (optional)</param>
        /// <param name="sallaAccessToken">Salla Access Token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountConfigUpdate200Response</returns>
        ApiResponse<AccountConfigUpdate200Response> AccountConfigUpdateWithHttpInfo(bool? replaceParameters = default(bool?), string? newStoreUrl = default(string?), string? newStoreKey = default(string?), string? bridgeUrl = default(string?), string? storeRoot = default(string?), string? dbTablesPrefix = default(string?), string? userAgent = default(string?), string? var3dcartPrivateKey = default(string?), string? var3dcartAccessToken = default(string?), string? var3dcartapiApiKey = default(string?), string? amazonSpClientId = default(string?), string? amazonSpClientSecret = default(string?), string? amazonSpRefreshToken = default(string?), string? amazonSpAwsRegion = default(string?), string? amazonSpApiEnvironment = default(string?), string? amazonSellerId = default(string?), string? aspdotnetstorefrontApiUser = default(string?), string? aspdotnetstorefrontApiPass = default(string?), string? bigcommerceapiAdminAccount = default(string?), string? bigcommerceapiApiPath = default(string?), string? bigcommerceapiApiKey = default(string?), string? bigcommerceapiClientId = default(string?), string? bigcommerceapiAccessToken = default(string?), string? bigcommerceapiContext = default(string?), string? bolApiKey = default(string?), string? bolApiSecret = default(string?), int? bolRetailerId = default(int?), string? demandwareClientId = default(string?), string? demandwareApiPassword = default(string?), string? demandwareUserName = default(string?), string? demandwareUserPassword = default(string?), string? ebayClientId = default(string?), string? ebayClientSecret = default(string?), string? ebayRuname = default(string?), string? ebayAccessToken = default(string?), string? ebayRefreshToken = default(string?), string? ebayEnvironment = default(string?), int? ebaySiteId = default(int?), string? ecwidAcessToken = default(string?), string? ecwidStoreId = default(string?), string? lazadaAppId = default(string?), string? lazadaAppSecret = default(string?), string? lazadaRefreshToken = default(string?), string? lazadaRegion = default(string?), string? etsyKeystring = default(string?), string? etsySharedSecret = default(string?), string? etsyAccessToken = default(string?), string? etsyTokenSecret = default(string?), string? etsyClientId = default(string?), string? etsyRefreshToken = default(string?), string? facebookAppId = default(string?), string? facebookAppSecret = default(string?), string? facebookAccessToken = default(string?), string? facebookBusinessId = default(string?), string? netoApiKey = default(string?), string? netoApiUsername = default(string?), string? shoplineAccessToken = default(string?), string? shoplineAppKey = default(string?), string? shoplineAppSecret = default(string?), string? shoplineSharedSecret = default(string?), string? shopifyAccessToken = default(string?), string? shopifyApiKey = default(string?), string? shopifyApiPassword = default(string?), string? shopifySharedSecret = default(string?), string? shoplazzaAccessToken = default(string?), string? shoplazzaSharedSecret = default(string?), string? mivaAccessToken = default(string?), string? mivaSignature = default(string?), string? shopwareAccessKey = default(string?), string? shopwareApiKey = default(string?), string? shopwareApiSecret = default(string?), string? bigcartelUserName = default(string?), string? bigcartelPassword = default(string?), string? volusionLogin = default(string?), string? volusionPassword = default(string?), string? walmartClientId = default(string?), string? walmartClientSecret = default(string?), string? walmartEnvironment = default(string?), string? walmartChannelType = default(string?), string? walmartRegion = default(string?), string? squareClientId = default(string?), string? squareClientSecret = default(string?), string? squareRefreshToken = default(string?), string? squarespaceApiKey = default(string?), string? squarespaceClientId = default(string?), string? squarespaceClientSecret = default(string?), string? squarespaceAccessToken = default(string?), string? squarespaceRefreshToken = default(string?), string? hybrisClientId = default(string?), string? hybrisClientSecret = default(string?), string? hybrisUsername = default(string?), string? hybrisPassword = default(string?), List<string>? hybrisWebsites = default(List<string>?), string? lightspeedApiKey = default(string?), string? lightspeedApiSecret = default(string?), string? commercehqApiKey = default(string?), string? commercehqApiPassword = default(string?), string? wcConsumerKey = default(string?), string? wcConsumerSecret = default(string?), string? magentoConsumerKey = default(string?), string? magentoConsumerSecret = default(string?), string? magentoAccessToken = default(string?), string? magentoTokenSecret = default(string?), string? prestashopWebserviceKey = default(string?), string? wixAppId = default(string?), string? wixAppSecretKey = default(string?), string? wixInstanceId = default(string?), string? wixRefreshToken = default(string?), string? mercadoLibreAppId = default(string?), string? mercadoLibreAppSecretKey = default(string?), string? mercadoLibreRefreshToken = default(string?), int? zidClientId = default(int?), string? zidClientSecret = default(string?), string? zidAccessToken = default(string?), string? zidAuthorization = default(string?), string? zidRefreshToken = default(string?), string? flipkartClientId = default(string?), string? flipkartClientSecret = default(string?), string? allegroClientId = default(string?), string? allegroClientSecret = default(string?), string? allegroAccessToken = default(string?), string? allegroRefreshToken = default(string?), string? allegroEnvironment = default(string?), string? zohoClientId = default(string?), string? zohoClientSecret = default(string?), string? zohoRefreshToken = default(string?), string? zohoRegion = default(string?), int? tiendanubeUserId = default(int?), string? tiendanubeAccessToken = default(string?), string? tiendanubeClientSecret = default(string?), string? ottoClientId = default(string?), string? ottoClientSecret = default(string?), string? ottoAppId = default(string?), string? ottoRefreshToken = default(string?), string? ottoEnvironment = default(string?), string? ottoAccessToken = default(string?), string? tiktokshopAppKey = default(string?), string? tiktokshopAppSecret = default(string?), string? tiktokshopRefreshToken = default(string?), string? tiktokshopAccessToken = default(string?), string? sallaClientId = default(string?), string? sallaClientSecret = default(string?), string? sallaRefreshToken = default(string?), string? sallaAccessToken = default(string?), int operationIndex = 0);
        /// <summary>
        /// account.failed_webhooks
        /// </summary>
        /// <remarks>
        /// If the callback of your service for some reason could not accept webhooks from API2Cart, then with the help of this method you can get a list of missed webhooks to perform synchronization again using entity_id. Please note that we keep such records for 24 hours.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="ids">List of сomma-separated webhook ids (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountFailedWebhooks200Response</returns>
        AccountFailedWebhooks200Response AccountFailedWebhooks(int? start = default(int?), int? count = default(int?), string? ids = default(string?), int operationIndex = 0);

        /// <summary>
        /// account.failed_webhooks
        /// </summary>
        /// <remarks>
        /// If the callback of your service for some reason could not accept webhooks from API2Cart, then with the help of this method you can get a list of missed webhooks to perform synchronization again using entity_id. Please note that we keep such records for 24 hours.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="ids">List of сomma-separated webhook ids (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountFailedWebhooks200Response</returns>
        ApiResponse<AccountFailedWebhooks200Response> AccountFailedWebhooksWithHttpInfo(int? start = default(int?), int? count = default(int?), string? ids = default(string?), int operationIndex = 0);
        /// <summary>
        /// account.supported_platforms
        /// </summary>
        /// <remarks>
        /// Use this method to retrieve a list of supported platforms and the sets of parameters required for connecting to each of them. Note: some platforms may have multiple connection methods so that the response will contain multiple sets of parameters.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountSupportedPlatforms200Response</returns>
        AccountSupportedPlatforms200Response AccountSupportedPlatforms(int operationIndex = 0);

        /// <summary>
        /// account.supported_platforms
        /// </summary>
        /// <remarks>
        /// Use this method to retrieve a list of supported platforms and the sets of parameters required for connecting to each of them. Note: some platforms may have multiple connection methods so that the response will contain multiple sets of parameters.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountSupportedPlatforms200Response</returns>
        ApiResponse<AccountSupportedPlatforms200Response> AccountSupportedPlatformsWithHttpInfo(int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// account.cart.add
        /// </summary>
        /// <remarks>
        /// Use this method to automate the process of connecting stores to API2Cart. The list of parameters will vary depending on the platform. To get a list of parameters that are specific to a particular shopping platform, you need to execute the account.supported_platforms.json method.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountCartAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountCartAdd200Response</returns>
        System.Threading.Tasks.Task<AccountCartAdd200Response> AccountCartAddAsync(AccountCartAdd accountCartAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// account.cart.add
        /// </summary>
        /// <remarks>
        /// Use this method to automate the process of connecting stores to API2Cart. The list of parameters will vary depending on the platform. To get a list of parameters that are specific to a particular shopping platform, you need to execute the account.supported_platforms.json method.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountCartAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountCartAdd200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountCartAdd200Response>> AccountCartAddWithHttpInfoAsync(AccountCartAdd accountCartAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// account.cart.list
        /// </summary>
        /// <remarks>
        /// This method lets you get a list of online stores connected to your API2Cart account. You can get the number of API requests to each store if you specify a period using parameters (request_from_date, request_to_date). The total_calls field is displayed only if there are parameters (request_from_date, request_to_date).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeUrl">A web address of a store (optional)</param>
        /// <param name="storeKey">Find store by store key (optional)</param>
        /// <param name="requestFromDate">Retrieve entities from their creation date (optional)</param>
        /// <param name="requestToDate">Retrieve entities to their creation date (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountCartList200Response</returns>
        System.Threading.Tasks.Task<AccountCartList200Response> AccountCartListAsync(string? storeUrl = default(string?), string? storeKey = default(string?), string? requestFromDate = default(string?), string? requestToDate = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// account.cart.list
        /// </summary>
        /// <remarks>
        /// This method lets you get a list of online stores connected to your API2Cart account. You can get the number of API requests to each store if you specify a period using parameters (request_from_date, request_to_date). The total_calls field is displayed only if there are parameters (request_from_date, request_to_date).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeUrl">A web address of a store (optional)</param>
        /// <param name="storeKey">Find store by store key (optional)</param>
        /// <param name="requestFromDate">Retrieve entities from their creation date (optional)</param>
        /// <param name="requestToDate">Retrieve entities to their creation date (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountCartList200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountCartList200Response>> AccountCartListWithHttpInfoAsync(string? storeUrl = default(string?), string? storeKey = default(string?), string? requestFromDate = default(string?), string? requestToDate = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// account.config.update
        /// </summary>
        /// <remarks>
        /// Use this method to automate the change of credentials used to connect online stores. The list of supported parameters differs depending on the platform.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replaceParameters">Identifies if there is a necessity to replace parameters (optional)</param>
        /// <param name="newStoreUrl">The web address of the store you want to update to connect to API2Cart (optional)</param>
        /// <param name="newStoreKey">Update store key (optional)</param>
        /// <param name="bridgeUrl">This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store) (optional)</param>
        /// <param name="storeRoot">Absolute path to the store root directory (used with \&quot;bridge_url\&quot; parameter) (optional)</param>
        /// <param name="dbTablesPrefix">DB tables prefix (optional)</param>
        /// <param name="userAgent">This parameter allows you to set your custom user agent, which will be used in requests to the store. Please use it cautiously, as the store&#39;s firewall may block specific values. (optional)</param>
        /// <param name="var3dcartPrivateKey">3DCart Private Key (optional)</param>
        /// <param name="var3dcartAccessToken">3DCart Token (optional)</param>
        /// <param name="var3dcartapiApiKey">3DCart API Key (optional)</param>
        /// <param name="amazonSpClientId">Amazon SP API app client id (optional)</param>
        /// <param name="amazonSpClientSecret">Amazon SP API app client secret (optional)</param>
        /// <param name="amazonSpRefreshToken">Amazon SP API OAuth refresh token (optional)</param>
        /// <param name="amazonSpAwsRegion">Amazon AWS Region (optional)</param>
        /// <param name="amazonSpApiEnvironment">Amazon SP API environment (optional, default to &quot;production&quot;)</param>
        /// <param name="amazonSellerId">Amazon Seller ID (Merchant token) (optional)</param>
        /// <param name="aspdotnetstorefrontApiUser">It&#39;s a AspDotNetStorefront account for which API is available (optional)</param>
        /// <param name="aspdotnetstorefrontApiPass">AspDotNetStorefront API Password (optional)</param>
        /// <param name="bigcommerceapiAdminAccount">It&#39;s a BigCommerce account for which API is enabled (optional)</param>
        /// <param name="bigcommerceapiApiPath">BigCommerce API URL (optional)</param>
        /// <param name="bigcommerceapiApiKey">Bigcommerce API Key (optional)</param>
        /// <param name="bigcommerceapiClientId">Client ID of the requesting app (optional)</param>
        /// <param name="bigcommerceapiAccessToken">Access token authorizing the app to access resources on behalf of a user (optional)</param>
        /// <param name="bigcommerceapiContext">API Path section unique to the store (optional)</param>
        /// <param name="bolApiKey">Bol API Key (optional)</param>
        /// <param name="bolApiSecret">Bol API Secret (optional)</param>
        /// <param name="bolRetailerId">Bol Retailer ID (optional)</param>
        /// <param name="demandwareClientId">Demandware client id (optional)</param>
        /// <param name="demandwareApiPassword">Demandware api password (optional)</param>
        /// <param name="demandwareUserName">Demandware user name (optional)</param>
        /// <param name="demandwareUserPassword">Demandware user password (optional)</param>
        /// <param name="ebayClientId">Application ID (AppID). (optional)</param>
        /// <param name="ebayClientSecret">Shared Secret from eBay application (optional)</param>
        /// <param name="ebayRuname">The RuName value that eBay assigns to your application. (optional)</param>
        /// <param name="ebayAccessToken">Used to authenticate API requests. (optional)</param>
        /// <param name="ebayRefreshToken">Used to renew the access token. (optional)</param>
        /// <param name="ebayEnvironment">eBay environment (optional)</param>
        /// <param name="ebaySiteId">eBay global ID (optional, default to 0)</param>
        /// <param name="ecwidAcessToken">Access token authorizing the app to access resources on behalf of a user (optional)</param>
        /// <param name="ecwidStoreId">Store Id (optional)</param>
        /// <param name="lazadaAppId">Lazada App ID (optional)</param>
        /// <param name="lazadaAppSecret">Lazada App Secret (optional)</param>
        /// <param name="lazadaRefreshToken">Lazada Refresh Token (optional)</param>
        /// <param name="lazadaRegion">Lazada API endpoint Region (optional)</param>
        /// <param name="etsyKeystring">Etsy keystring (optional)</param>
        /// <param name="etsySharedSecret">Etsy shared secret (optional)</param>
        /// <param name="etsyAccessToken">Access token authorizing the app to access resources on behalf of a user (optional)</param>
        /// <param name="etsyTokenSecret">Secret token authorizing the app to access resources on behalf of a user (optional)</param>
        /// <param name="etsyClientId">Etsy Client Id (optional)</param>
        /// <param name="etsyRefreshToken">Etsy Refresh token (optional)</param>
        /// <param name="facebookAppId">Facebook App ID (optional)</param>
        /// <param name="facebookAppSecret">Facebook App Secret (optional)</param>
        /// <param name="facebookAccessToken">Facebook Access Token (optional)</param>
        /// <param name="facebookBusinessId">Facebook Business ID (optional)</param>
        /// <param name="netoApiKey">Neto API Key (optional)</param>
        /// <param name="netoApiUsername">Neto User Name (optional)</param>
        /// <param name="shoplineAccessToken">Shopline APP Key (optional)</param>
        /// <param name="shoplineAppKey">Shopline APP Key (optional)</param>
        /// <param name="shoplineAppSecret">Shopline App Secret (optional)</param>
        /// <param name="shoplineSharedSecret">Shopline Shared Secret (optional)</param>
        /// <param name="shopifyAccessToken">Access token authorizing the app to access resources on behalf of a user (optional)</param>
        /// <param name="shopifyApiKey">Shopify API Key (optional)</param>
        /// <param name="shopifyApiPassword">Shopify API Password (optional)</param>
        /// <param name="shopifySharedSecret">Shared secret (optional)</param>
        /// <param name="shoplazzaAccessToken">Access token authorizing the app to access resources on behalf of a user (optional)</param>
        /// <param name="shoplazzaSharedSecret">Shared secret (optional)</param>
        /// <param name="mivaAccessToken">Miva access token (optional)</param>
        /// <param name="mivaSignature">Miva signature (optional)</param>
        /// <param name="shopwareAccessKey">Shopware access key (optional)</param>
        /// <param name="shopwareApiKey">Shopware api key (optional)</param>
        /// <param name="shopwareApiSecret">Shopware client secret access key (optional)</param>
        /// <param name="bigcartelUserName">Subdomain of store (optional)</param>
        /// <param name="bigcartelPassword">BigCartel account password (optional)</param>
        /// <param name="volusionLogin">It&#39;s a Volusion account for which API is enabled (optional)</param>
        /// <param name="volusionPassword">Volusion API Password (optional)</param>
        /// <param name="walmartClientId">Walmart client ID. For the region &#39;ca&#39; use Consumer ID (optional)</param>
        /// <param name="walmartClientSecret">Walmart client secret. For the region &#39;ca&#39; use Private Key (optional)</param>
        /// <param name="walmartEnvironment">Walmart environment (optional, default to &quot;production&quot;)</param>
        /// <param name="walmartChannelType">Walmart WM_CONSUMER.CHANNEL.TYPE header (optional)</param>
        /// <param name="walmartRegion">Walmart region (optional, default to &quot;us&quot;)</param>
        /// <param name="squareClientId">Square (Weebly) Client ID (optional)</param>
        /// <param name="squareClientSecret">Square (Weebly) Client Secret (optional)</param>
        /// <param name="squareRefreshToken">Square (Weebly) Refresh Token (optional)</param>
        /// <param name="squarespaceApiKey">Squarespace API Key (optional)</param>
        /// <param name="squarespaceClientId">Squarespace Connector Client ID (optional)</param>
        /// <param name="squarespaceClientSecret">Squarespace Connector Client Secret (optional)</param>
        /// <param name="squarespaceAccessToken">Squarespace access token (optional)</param>
        /// <param name="squarespaceRefreshToken">Squarespace refresh token (optional)</param>
        /// <param name="hybrisClientId">Omni Commerce Connector Client ID (optional)</param>
        /// <param name="hybrisClientSecret">Omni Commerce Connector Client Secret (optional)</param>
        /// <param name="hybrisUsername">User Name (optional)</param>
        /// <param name="hybrisPassword">User password (optional)</param>
        /// <param name="hybrisWebsites">Websites to stores mapping data (optional)</param>
        /// <param name="lightspeedApiKey">LightSpeed api key (optional)</param>
        /// <param name="lightspeedApiSecret">LightSpeed api secret (optional)</param>
        /// <param name="commercehqApiKey">CommerceHQ api key (optional)</param>
        /// <param name="commercehqApiPassword">CommerceHQ api password (optional)</param>
        /// <param name="wcConsumerKey">Woocommerce consumer key (optional)</param>
        /// <param name="wcConsumerSecret">Woocommerce consumer secret (optional)</param>
        /// <param name="magentoConsumerKey">Magento Consumer Key (optional)</param>
        /// <param name="magentoConsumerSecret">Magento Consumer Secret (optional)</param>
        /// <param name="magentoAccessToken">Magento Access Token (optional)</param>
        /// <param name="magentoTokenSecret">Magento Token Secret (optional)</param>
        /// <param name="prestashopWebserviceKey">Prestashop webservice key (optional)</param>
        /// <param name="wixAppId">Wix App ID (optional)</param>
        /// <param name="wixAppSecretKey">Wix App Secret Key (optional)</param>
        /// <param name="wixInstanceId">Wix Instance ID (optional)</param>
        /// <param name="wixRefreshToken">Wix refresh token (optional)</param>
        /// <param name="mercadoLibreAppId">Mercado Libre App ID (optional)</param>
        /// <param name="mercadoLibreAppSecretKey">Mercado Libre App Secret Key (optional)</param>
        /// <param name="mercadoLibreRefreshToken">Mercado Libre Refresh Token (optional)</param>
        /// <param name="zidClientId">Zid Client ID (optional)</param>
        /// <param name="zidClientSecret">Zid Client Secret (optional)</param>
        /// <param name="zidAccessToken">Zid Access Token (optional)</param>
        /// <param name="zidAuthorization">Zid Authorization (optional)</param>
        /// <param name="zidRefreshToken">Zid refresh token (optional)</param>
        /// <param name="flipkartClientId">Flipkart Client ID (optional)</param>
        /// <param name="flipkartClientSecret">Flipkart Client Secret (optional)</param>
        /// <param name="allegroClientId">Allegro Client ID (optional)</param>
        /// <param name="allegroClientSecret">Allegro Client Secret (optional)</param>
        /// <param name="allegroAccessToken">Allegro Access Token (optional)</param>
        /// <param name="allegroRefreshToken">Allegro Refresh Token (optional)</param>
        /// <param name="allegroEnvironment">Allegro Environment (optional, default to &quot;production&quot;)</param>
        /// <param name="zohoClientId">Zoho Client ID (optional)</param>
        /// <param name="zohoClientSecret">Zoho Client Secret (optional)</param>
        /// <param name="zohoRefreshToken">Zoho Refresh Token (optional)</param>
        /// <param name="zohoRegion">Zoho API endpoint Region (optional)</param>
        /// <param name="tiendanubeUserId">Tiendanube User ID (optional)</param>
        /// <param name="tiendanubeAccessToken">Tiendanube Access Token (optional)</param>
        /// <param name="tiendanubeClientSecret">Tiendanube Client Secret (optional)</param>
        /// <param name="ottoClientId">Otto Client ID (optional)</param>
        /// <param name="ottoClientSecret">Otto Client Secret (optional)</param>
        /// <param name="ottoAppId">Otto App ID (optional)</param>
        /// <param name="ottoRefreshToken">Otto Refresh Token (optional)</param>
        /// <param name="ottoEnvironment">Otto Environment (optional)</param>
        /// <param name="ottoAccessToken">Otto Access Token (optional)</param>
        /// <param name="tiktokshopAppKey">TikTok Shop App Key (optional)</param>
        /// <param name="tiktokshopAppSecret">TikTok Shop App Secret (optional)</param>
        /// <param name="tiktokshopRefreshToken">TikTok Shop Refresh Token (optional)</param>
        /// <param name="tiktokshopAccessToken">TikTok Shop Access Token (optional)</param>
        /// <param name="sallaClientId">Salla Client ID (optional)</param>
        /// <param name="sallaClientSecret">Salla Client Secret (optional)</param>
        /// <param name="sallaRefreshToken">Salla Refresh Token (optional)</param>
        /// <param name="sallaAccessToken">Salla Access Token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountConfigUpdate200Response</returns>
        System.Threading.Tasks.Task<AccountConfigUpdate200Response> AccountConfigUpdateAsync(bool? replaceParameters = default(bool?), string? newStoreUrl = default(string?), string? newStoreKey = default(string?), string? bridgeUrl = default(string?), string? storeRoot = default(string?), string? dbTablesPrefix = default(string?), string? userAgent = default(string?), string? var3dcartPrivateKey = default(string?), string? var3dcartAccessToken = default(string?), string? var3dcartapiApiKey = default(string?), string? amazonSpClientId = default(string?), string? amazonSpClientSecret = default(string?), string? amazonSpRefreshToken = default(string?), string? amazonSpAwsRegion = default(string?), string? amazonSpApiEnvironment = default(string?), string? amazonSellerId = default(string?), string? aspdotnetstorefrontApiUser = default(string?), string? aspdotnetstorefrontApiPass = default(string?), string? bigcommerceapiAdminAccount = default(string?), string? bigcommerceapiApiPath = default(string?), string? bigcommerceapiApiKey = default(string?), string? bigcommerceapiClientId = default(string?), string? bigcommerceapiAccessToken = default(string?), string? bigcommerceapiContext = default(string?), string? bolApiKey = default(string?), string? bolApiSecret = default(string?), int? bolRetailerId = default(int?), string? demandwareClientId = default(string?), string? demandwareApiPassword = default(string?), string? demandwareUserName = default(string?), string? demandwareUserPassword = default(string?), string? ebayClientId = default(string?), string? ebayClientSecret = default(string?), string? ebayRuname = default(string?), string? ebayAccessToken = default(string?), string? ebayRefreshToken = default(string?), string? ebayEnvironment = default(string?), int? ebaySiteId = default(int?), string? ecwidAcessToken = default(string?), string? ecwidStoreId = default(string?), string? lazadaAppId = default(string?), string? lazadaAppSecret = default(string?), string? lazadaRefreshToken = default(string?), string? lazadaRegion = default(string?), string? etsyKeystring = default(string?), string? etsySharedSecret = default(string?), string? etsyAccessToken = default(string?), string? etsyTokenSecret = default(string?), string? etsyClientId = default(string?), string? etsyRefreshToken = default(string?), string? facebookAppId = default(string?), string? facebookAppSecret = default(string?), string? facebookAccessToken = default(string?), string? facebookBusinessId = default(string?), string? netoApiKey = default(string?), string? netoApiUsername = default(string?), string? shoplineAccessToken = default(string?), string? shoplineAppKey = default(string?), string? shoplineAppSecret = default(string?), string? shoplineSharedSecret = default(string?), string? shopifyAccessToken = default(string?), string? shopifyApiKey = default(string?), string? shopifyApiPassword = default(string?), string? shopifySharedSecret = default(string?), string? shoplazzaAccessToken = default(string?), string? shoplazzaSharedSecret = default(string?), string? mivaAccessToken = default(string?), string? mivaSignature = default(string?), string? shopwareAccessKey = default(string?), string? shopwareApiKey = default(string?), string? shopwareApiSecret = default(string?), string? bigcartelUserName = default(string?), string? bigcartelPassword = default(string?), string? volusionLogin = default(string?), string? volusionPassword = default(string?), string? walmartClientId = default(string?), string? walmartClientSecret = default(string?), string? walmartEnvironment = default(string?), string? walmartChannelType = default(string?), string? walmartRegion = default(string?), string? squareClientId = default(string?), string? squareClientSecret = default(string?), string? squareRefreshToken = default(string?), string? squarespaceApiKey = default(string?), string? squarespaceClientId = default(string?), string? squarespaceClientSecret = default(string?), string? squarespaceAccessToken = default(string?), string? squarespaceRefreshToken = default(string?), string? hybrisClientId = default(string?), string? hybrisClientSecret = default(string?), string? hybrisUsername = default(string?), string? hybrisPassword = default(string?), List<string>? hybrisWebsites = default(List<string>?), string? lightspeedApiKey = default(string?), string? lightspeedApiSecret = default(string?), string? commercehqApiKey = default(string?), string? commercehqApiPassword = default(string?), string? wcConsumerKey = default(string?), string? wcConsumerSecret = default(string?), string? magentoConsumerKey = default(string?), string? magentoConsumerSecret = default(string?), string? magentoAccessToken = default(string?), string? magentoTokenSecret = default(string?), string? prestashopWebserviceKey = default(string?), string? wixAppId = default(string?), string? wixAppSecretKey = default(string?), string? wixInstanceId = default(string?), string? wixRefreshToken = default(string?), string? mercadoLibreAppId = default(string?), string? mercadoLibreAppSecretKey = default(string?), string? mercadoLibreRefreshToken = default(string?), int? zidClientId = default(int?), string? zidClientSecret = default(string?), string? zidAccessToken = default(string?), string? zidAuthorization = default(string?), string? zidRefreshToken = default(string?), string? flipkartClientId = default(string?), string? flipkartClientSecret = default(string?), string? allegroClientId = default(string?), string? allegroClientSecret = default(string?), string? allegroAccessToken = default(string?), string? allegroRefreshToken = default(string?), string? allegroEnvironment = default(string?), string? zohoClientId = default(string?), string? zohoClientSecret = default(string?), string? zohoRefreshToken = default(string?), string? zohoRegion = default(string?), int? tiendanubeUserId = default(int?), string? tiendanubeAccessToken = default(string?), string? tiendanubeClientSecret = default(string?), string? ottoClientId = default(string?), string? ottoClientSecret = default(string?), string? ottoAppId = default(string?), string? ottoRefreshToken = default(string?), string? ottoEnvironment = default(string?), string? ottoAccessToken = default(string?), string? tiktokshopAppKey = default(string?), string? tiktokshopAppSecret = default(string?), string? tiktokshopRefreshToken = default(string?), string? tiktokshopAccessToken = default(string?), string? sallaClientId = default(string?), string? sallaClientSecret = default(string?), string? sallaRefreshToken = default(string?), string? sallaAccessToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// account.config.update
        /// </summary>
        /// <remarks>
        /// Use this method to automate the change of credentials used to connect online stores. The list of supported parameters differs depending on the platform.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replaceParameters">Identifies if there is a necessity to replace parameters (optional)</param>
        /// <param name="newStoreUrl">The web address of the store you want to update to connect to API2Cart (optional)</param>
        /// <param name="newStoreKey">Update store key (optional)</param>
        /// <param name="bridgeUrl">This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store) (optional)</param>
        /// <param name="storeRoot">Absolute path to the store root directory (used with \&quot;bridge_url\&quot; parameter) (optional)</param>
        /// <param name="dbTablesPrefix">DB tables prefix (optional)</param>
        /// <param name="userAgent">This parameter allows you to set your custom user agent, which will be used in requests to the store. Please use it cautiously, as the store&#39;s firewall may block specific values. (optional)</param>
        /// <param name="var3dcartPrivateKey">3DCart Private Key (optional)</param>
        /// <param name="var3dcartAccessToken">3DCart Token (optional)</param>
        /// <param name="var3dcartapiApiKey">3DCart API Key (optional)</param>
        /// <param name="amazonSpClientId">Amazon SP API app client id (optional)</param>
        /// <param name="amazonSpClientSecret">Amazon SP API app client secret (optional)</param>
        /// <param name="amazonSpRefreshToken">Amazon SP API OAuth refresh token (optional)</param>
        /// <param name="amazonSpAwsRegion">Amazon AWS Region (optional)</param>
        /// <param name="amazonSpApiEnvironment">Amazon SP API environment (optional, default to &quot;production&quot;)</param>
        /// <param name="amazonSellerId">Amazon Seller ID (Merchant token) (optional)</param>
        /// <param name="aspdotnetstorefrontApiUser">It&#39;s a AspDotNetStorefront account for which API is available (optional)</param>
        /// <param name="aspdotnetstorefrontApiPass">AspDotNetStorefront API Password (optional)</param>
        /// <param name="bigcommerceapiAdminAccount">It&#39;s a BigCommerce account for which API is enabled (optional)</param>
        /// <param name="bigcommerceapiApiPath">BigCommerce API URL (optional)</param>
        /// <param name="bigcommerceapiApiKey">Bigcommerce API Key (optional)</param>
        /// <param name="bigcommerceapiClientId">Client ID of the requesting app (optional)</param>
        /// <param name="bigcommerceapiAccessToken">Access token authorizing the app to access resources on behalf of a user (optional)</param>
        /// <param name="bigcommerceapiContext">API Path section unique to the store (optional)</param>
        /// <param name="bolApiKey">Bol API Key (optional)</param>
        /// <param name="bolApiSecret">Bol API Secret (optional)</param>
        /// <param name="bolRetailerId">Bol Retailer ID (optional)</param>
        /// <param name="demandwareClientId">Demandware client id (optional)</param>
        /// <param name="demandwareApiPassword">Demandware api password (optional)</param>
        /// <param name="demandwareUserName">Demandware user name (optional)</param>
        /// <param name="demandwareUserPassword">Demandware user password (optional)</param>
        /// <param name="ebayClientId">Application ID (AppID). (optional)</param>
        /// <param name="ebayClientSecret">Shared Secret from eBay application (optional)</param>
        /// <param name="ebayRuname">The RuName value that eBay assigns to your application. (optional)</param>
        /// <param name="ebayAccessToken">Used to authenticate API requests. (optional)</param>
        /// <param name="ebayRefreshToken">Used to renew the access token. (optional)</param>
        /// <param name="ebayEnvironment">eBay environment (optional)</param>
        /// <param name="ebaySiteId">eBay global ID (optional, default to 0)</param>
        /// <param name="ecwidAcessToken">Access token authorizing the app to access resources on behalf of a user (optional)</param>
        /// <param name="ecwidStoreId">Store Id (optional)</param>
        /// <param name="lazadaAppId">Lazada App ID (optional)</param>
        /// <param name="lazadaAppSecret">Lazada App Secret (optional)</param>
        /// <param name="lazadaRefreshToken">Lazada Refresh Token (optional)</param>
        /// <param name="lazadaRegion">Lazada API endpoint Region (optional)</param>
        /// <param name="etsyKeystring">Etsy keystring (optional)</param>
        /// <param name="etsySharedSecret">Etsy shared secret (optional)</param>
        /// <param name="etsyAccessToken">Access token authorizing the app to access resources on behalf of a user (optional)</param>
        /// <param name="etsyTokenSecret">Secret token authorizing the app to access resources on behalf of a user (optional)</param>
        /// <param name="etsyClientId">Etsy Client Id (optional)</param>
        /// <param name="etsyRefreshToken">Etsy Refresh token (optional)</param>
        /// <param name="facebookAppId">Facebook App ID (optional)</param>
        /// <param name="facebookAppSecret">Facebook App Secret (optional)</param>
        /// <param name="facebookAccessToken">Facebook Access Token (optional)</param>
        /// <param name="facebookBusinessId">Facebook Business ID (optional)</param>
        /// <param name="netoApiKey">Neto API Key (optional)</param>
        /// <param name="netoApiUsername">Neto User Name (optional)</param>
        /// <param name="shoplineAccessToken">Shopline APP Key (optional)</param>
        /// <param name="shoplineAppKey">Shopline APP Key (optional)</param>
        /// <param name="shoplineAppSecret">Shopline App Secret (optional)</param>
        /// <param name="shoplineSharedSecret">Shopline Shared Secret (optional)</param>
        /// <param name="shopifyAccessToken">Access token authorizing the app to access resources on behalf of a user (optional)</param>
        /// <param name="shopifyApiKey">Shopify API Key (optional)</param>
        /// <param name="shopifyApiPassword">Shopify API Password (optional)</param>
        /// <param name="shopifySharedSecret">Shared secret (optional)</param>
        /// <param name="shoplazzaAccessToken">Access token authorizing the app to access resources on behalf of a user (optional)</param>
        /// <param name="shoplazzaSharedSecret">Shared secret (optional)</param>
        /// <param name="mivaAccessToken">Miva access token (optional)</param>
        /// <param name="mivaSignature">Miva signature (optional)</param>
        /// <param name="shopwareAccessKey">Shopware access key (optional)</param>
        /// <param name="shopwareApiKey">Shopware api key (optional)</param>
        /// <param name="shopwareApiSecret">Shopware client secret access key (optional)</param>
        /// <param name="bigcartelUserName">Subdomain of store (optional)</param>
        /// <param name="bigcartelPassword">BigCartel account password (optional)</param>
        /// <param name="volusionLogin">It&#39;s a Volusion account for which API is enabled (optional)</param>
        /// <param name="volusionPassword">Volusion API Password (optional)</param>
        /// <param name="walmartClientId">Walmart client ID. For the region &#39;ca&#39; use Consumer ID (optional)</param>
        /// <param name="walmartClientSecret">Walmart client secret. For the region &#39;ca&#39; use Private Key (optional)</param>
        /// <param name="walmartEnvironment">Walmart environment (optional, default to &quot;production&quot;)</param>
        /// <param name="walmartChannelType">Walmart WM_CONSUMER.CHANNEL.TYPE header (optional)</param>
        /// <param name="walmartRegion">Walmart region (optional, default to &quot;us&quot;)</param>
        /// <param name="squareClientId">Square (Weebly) Client ID (optional)</param>
        /// <param name="squareClientSecret">Square (Weebly) Client Secret (optional)</param>
        /// <param name="squareRefreshToken">Square (Weebly) Refresh Token (optional)</param>
        /// <param name="squarespaceApiKey">Squarespace API Key (optional)</param>
        /// <param name="squarespaceClientId">Squarespace Connector Client ID (optional)</param>
        /// <param name="squarespaceClientSecret">Squarespace Connector Client Secret (optional)</param>
        /// <param name="squarespaceAccessToken">Squarespace access token (optional)</param>
        /// <param name="squarespaceRefreshToken">Squarespace refresh token (optional)</param>
        /// <param name="hybrisClientId">Omni Commerce Connector Client ID (optional)</param>
        /// <param name="hybrisClientSecret">Omni Commerce Connector Client Secret (optional)</param>
        /// <param name="hybrisUsername">User Name (optional)</param>
        /// <param name="hybrisPassword">User password (optional)</param>
        /// <param name="hybrisWebsites">Websites to stores mapping data (optional)</param>
        /// <param name="lightspeedApiKey">LightSpeed api key (optional)</param>
        /// <param name="lightspeedApiSecret">LightSpeed api secret (optional)</param>
        /// <param name="commercehqApiKey">CommerceHQ api key (optional)</param>
        /// <param name="commercehqApiPassword">CommerceHQ api password (optional)</param>
        /// <param name="wcConsumerKey">Woocommerce consumer key (optional)</param>
        /// <param name="wcConsumerSecret">Woocommerce consumer secret (optional)</param>
        /// <param name="magentoConsumerKey">Magento Consumer Key (optional)</param>
        /// <param name="magentoConsumerSecret">Magento Consumer Secret (optional)</param>
        /// <param name="magentoAccessToken">Magento Access Token (optional)</param>
        /// <param name="magentoTokenSecret">Magento Token Secret (optional)</param>
        /// <param name="prestashopWebserviceKey">Prestashop webservice key (optional)</param>
        /// <param name="wixAppId">Wix App ID (optional)</param>
        /// <param name="wixAppSecretKey">Wix App Secret Key (optional)</param>
        /// <param name="wixInstanceId">Wix Instance ID (optional)</param>
        /// <param name="wixRefreshToken">Wix refresh token (optional)</param>
        /// <param name="mercadoLibreAppId">Mercado Libre App ID (optional)</param>
        /// <param name="mercadoLibreAppSecretKey">Mercado Libre App Secret Key (optional)</param>
        /// <param name="mercadoLibreRefreshToken">Mercado Libre Refresh Token (optional)</param>
        /// <param name="zidClientId">Zid Client ID (optional)</param>
        /// <param name="zidClientSecret">Zid Client Secret (optional)</param>
        /// <param name="zidAccessToken">Zid Access Token (optional)</param>
        /// <param name="zidAuthorization">Zid Authorization (optional)</param>
        /// <param name="zidRefreshToken">Zid refresh token (optional)</param>
        /// <param name="flipkartClientId">Flipkart Client ID (optional)</param>
        /// <param name="flipkartClientSecret">Flipkart Client Secret (optional)</param>
        /// <param name="allegroClientId">Allegro Client ID (optional)</param>
        /// <param name="allegroClientSecret">Allegro Client Secret (optional)</param>
        /// <param name="allegroAccessToken">Allegro Access Token (optional)</param>
        /// <param name="allegroRefreshToken">Allegro Refresh Token (optional)</param>
        /// <param name="allegroEnvironment">Allegro Environment (optional, default to &quot;production&quot;)</param>
        /// <param name="zohoClientId">Zoho Client ID (optional)</param>
        /// <param name="zohoClientSecret">Zoho Client Secret (optional)</param>
        /// <param name="zohoRefreshToken">Zoho Refresh Token (optional)</param>
        /// <param name="zohoRegion">Zoho API endpoint Region (optional)</param>
        /// <param name="tiendanubeUserId">Tiendanube User ID (optional)</param>
        /// <param name="tiendanubeAccessToken">Tiendanube Access Token (optional)</param>
        /// <param name="tiendanubeClientSecret">Tiendanube Client Secret (optional)</param>
        /// <param name="ottoClientId">Otto Client ID (optional)</param>
        /// <param name="ottoClientSecret">Otto Client Secret (optional)</param>
        /// <param name="ottoAppId">Otto App ID (optional)</param>
        /// <param name="ottoRefreshToken">Otto Refresh Token (optional)</param>
        /// <param name="ottoEnvironment">Otto Environment (optional)</param>
        /// <param name="ottoAccessToken">Otto Access Token (optional)</param>
        /// <param name="tiktokshopAppKey">TikTok Shop App Key (optional)</param>
        /// <param name="tiktokshopAppSecret">TikTok Shop App Secret (optional)</param>
        /// <param name="tiktokshopRefreshToken">TikTok Shop Refresh Token (optional)</param>
        /// <param name="tiktokshopAccessToken">TikTok Shop Access Token (optional)</param>
        /// <param name="sallaClientId">Salla Client ID (optional)</param>
        /// <param name="sallaClientSecret">Salla Client Secret (optional)</param>
        /// <param name="sallaRefreshToken">Salla Refresh Token (optional)</param>
        /// <param name="sallaAccessToken">Salla Access Token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountConfigUpdate200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountConfigUpdate200Response>> AccountConfigUpdateWithHttpInfoAsync(bool? replaceParameters = default(bool?), string? newStoreUrl = default(string?), string? newStoreKey = default(string?), string? bridgeUrl = default(string?), string? storeRoot = default(string?), string? dbTablesPrefix = default(string?), string? userAgent = default(string?), string? var3dcartPrivateKey = default(string?), string? var3dcartAccessToken = default(string?), string? var3dcartapiApiKey = default(string?), string? amazonSpClientId = default(string?), string? amazonSpClientSecret = default(string?), string? amazonSpRefreshToken = default(string?), string? amazonSpAwsRegion = default(string?), string? amazonSpApiEnvironment = default(string?), string? amazonSellerId = default(string?), string? aspdotnetstorefrontApiUser = default(string?), string? aspdotnetstorefrontApiPass = default(string?), string? bigcommerceapiAdminAccount = default(string?), string? bigcommerceapiApiPath = default(string?), string? bigcommerceapiApiKey = default(string?), string? bigcommerceapiClientId = default(string?), string? bigcommerceapiAccessToken = default(string?), string? bigcommerceapiContext = default(string?), string? bolApiKey = default(string?), string? bolApiSecret = default(string?), int? bolRetailerId = default(int?), string? demandwareClientId = default(string?), string? demandwareApiPassword = default(string?), string? demandwareUserName = default(string?), string? demandwareUserPassword = default(string?), string? ebayClientId = default(string?), string? ebayClientSecret = default(string?), string? ebayRuname = default(string?), string? ebayAccessToken = default(string?), string? ebayRefreshToken = default(string?), string? ebayEnvironment = default(string?), int? ebaySiteId = default(int?), string? ecwidAcessToken = default(string?), string? ecwidStoreId = default(string?), string? lazadaAppId = default(string?), string? lazadaAppSecret = default(string?), string? lazadaRefreshToken = default(string?), string? lazadaRegion = default(string?), string? etsyKeystring = default(string?), string? etsySharedSecret = default(string?), string? etsyAccessToken = default(string?), string? etsyTokenSecret = default(string?), string? etsyClientId = default(string?), string? etsyRefreshToken = default(string?), string? facebookAppId = default(string?), string? facebookAppSecret = default(string?), string? facebookAccessToken = default(string?), string? facebookBusinessId = default(string?), string? netoApiKey = default(string?), string? netoApiUsername = default(string?), string? shoplineAccessToken = default(string?), string? shoplineAppKey = default(string?), string? shoplineAppSecret = default(string?), string? shoplineSharedSecret = default(string?), string? shopifyAccessToken = default(string?), string? shopifyApiKey = default(string?), string? shopifyApiPassword = default(string?), string? shopifySharedSecret = default(string?), string? shoplazzaAccessToken = default(string?), string? shoplazzaSharedSecret = default(string?), string? mivaAccessToken = default(string?), string? mivaSignature = default(string?), string? shopwareAccessKey = default(string?), string? shopwareApiKey = default(string?), string? shopwareApiSecret = default(string?), string? bigcartelUserName = default(string?), string? bigcartelPassword = default(string?), string? volusionLogin = default(string?), string? volusionPassword = default(string?), string? walmartClientId = default(string?), string? walmartClientSecret = default(string?), string? walmartEnvironment = default(string?), string? walmartChannelType = default(string?), string? walmartRegion = default(string?), string? squareClientId = default(string?), string? squareClientSecret = default(string?), string? squareRefreshToken = default(string?), string? squarespaceApiKey = default(string?), string? squarespaceClientId = default(string?), string? squarespaceClientSecret = default(string?), string? squarespaceAccessToken = default(string?), string? squarespaceRefreshToken = default(string?), string? hybrisClientId = default(string?), string? hybrisClientSecret = default(string?), string? hybrisUsername = default(string?), string? hybrisPassword = default(string?), List<string>? hybrisWebsites = default(List<string>?), string? lightspeedApiKey = default(string?), string? lightspeedApiSecret = default(string?), string? commercehqApiKey = default(string?), string? commercehqApiPassword = default(string?), string? wcConsumerKey = default(string?), string? wcConsumerSecret = default(string?), string? magentoConsumerKey = default(string?), string? magentoConsumerSecret = default(string?), string? magentoAccessToken = default(string?), string? magentoTokenSecret = default(string?), string? prestashopWebserviceKey = default(string?), string? wixAppId = default(string?), string? wixAppSecretKey = default(string?), string? wixInstanceId = default(string?), string? wixRefreshToken = default(string?), string? mercadoLibreAppId = default(string?), string? mercadoLibreAppSecretKey = default(string?), string? mercadoLibreRefreshToken = default(string?), int? zidClientId = default(int?), string? zidClientSecret = default(string?), string? zidAccessToken = default(string?), string? zidAuthorization = default(string?), string? zidRefreshToken = default(string?), string? flipkartClientId = default(string?), string? flipkartClientSecret = default(string?), string? allegroClientId = default(string?), string? allegroClientSecret = default(string?), string? allegroAccessToken = default(string?), string? allegroRefreshToken = default(string?), string? allegroEnvironment = default(string?), string? zohoClientId = default(string?), string? zohoClientSecret = default(string?), string? zohoRefreshToken = default(string?), string? zohoRegion = default(string?), int? tiendanubeUserId = default(int?), string? tiendanubeAccessToken = default(string?), string? tiendanubeClientSecret = default(string?), string? ottoClientId = default(string?), string? ottoClientSecret = default(string?), string? ottoAppId = default(string?), string? ottoRefreshToken = default(string?), string? ottoEnvironment = default(string?), string? ottoAccessToken = default(string?), string? tiktokshopAppKey = default(string?), string? tiktokshopAppSecret = default(string?), string? tiktokshopRefreshToken = default(string?), string? tiktokshopAccessToken = default(string?), string? sallaClientId = default(string?), string? sallaClientSecret = default(string?), string? sallaRefreshToken = default(string?), string? sallaAccessToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// account.failed_webhooks
        /// </summary>
        /// <remarks>
        /// If the callback of your service for some reason could not accept webhooks from API2Cart, then with the help of this method you can get a list of missed webhooks to perform synchronization again using entity_id. Please note that we keep such records for 24 hours.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="ids">List of сomma-separated webhook ids (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountFailedWebhooks200Response</returns>
        System.Threading.Tasks.Task<AccountFailedWebhooks200Response> AccountFailedWebhooksAsync(int? start = default(int?), int? count = default(int?), string? ids = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// account.failed_webhooks
        /// </summary>
        /// <remarks>
        /// If the callback of your service for some reason could not accept webhooks from API2Cart, then with the help of this method you can get a list of missed webhooks to perform synchronization again using entity_id. Please note that we keep such records for 24 hours.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="ids">List of сomma-separated webhook ids (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountFailedWebhooks200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountFailedWebhooks200Response>> AccountFailedWebhooksWithHttpInfoAsync(int? start = default(int?), int? count = default(int?), string? ids = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// account.supported_platforms
        /// </summary>
        /// <remarks>
        /// Use this method to retrieve a list of supported platforms and the sets of parameters required for connecting to each of them. Note: some platforms may have multiple connection methods so that the response will contain multiple sets of parameters.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountSupportedPlatforms200Response</returns>
        System.Threading.Tasks.Task<AccountSupportedPlatforms200Response> AccountSupportedPlatformsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// account.supported_platforms
        /// </summary>
        /// <remarks>
        /// Use this method to retrieve a list of supported platforms and the sets of parameters required for connecting to each of them. Note: some platforms may have multiple connection methods so that the response will contain multiple sets of parameters.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountSupportedPlatforms200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountSupportedPlatforms200Response>> AccountSupportedPlatformsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountApi : IAccountApiSync, IAccountApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AccountApi : IAccountApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AccountApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AccountApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// account.cart.add Use this method to automate the process of connecting stores to API2Cart. The list of parameters will vary depending on the platform. To get a list of parameters that are specific to a particular shopping platform, you need to execute the account.supported_platforms.json method.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountCartAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountCartAdd200Response</returns>
        public AccountCartAdd200Response AccountCartAdd(AccountCartAdd accountCartAdd, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AccountCartAdd200Response> localVarResponse = AccountCartAddWithHttpInfo(accountCartAdd);
            return localVarResponse.Data;
        }

        /// <summary>
        /// account.cart.add Use this method to automate the process of connecting stores to API2Cart. The list of parameters will vary depending on the platform. To get a list of parameters that are specific to a particular shopping platform, you need to execute the account.supported_platforms.json method.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountCartAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountCartAdd200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<AccountCartAdd200Response> AccountCartAddWithHttpInfo(AccountCartAdd accountCartAdd, int operationIndex = 0)
        {
            // verify the required parameter 'accountCartAdd' is set
            if (accountCartAdd == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountCartAdd' when calling AccountApi->AccountCartAdd");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = accountCartAdd;

            localVarRequestOptions.Operation = "AccountApi.AccountCartAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AccountCartAdd200Response>("/account.cart.add.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountCartAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// account.cart.add Use this method to automate the process of connecting stores to API2Cart. The list of parameters will vary depending on the platform. To get a list of parameters that are specific to a particular shopping platform, you need to execute the account.supported_platforms.json method.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountCartAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountCartAdd200Response</returns>
        public async System.Threading.Tasks.Task<AccountCartAdd200Response> AccountCartAddAsync(AccountCartAdd accountCartAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AccountCartAdd200Response> localVarResponse = await AccountCartAddWithHttpInfoAsync(accountCartAdd, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// account.cart.add Use this method to automate the process of connecting stores to API2Cart. The list of parameters will vary depending on the platform. To get a list of parameters that are specific to a particular shopping platform, you need to execute the account.supported_platforms.json method.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountCartAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountCartAdd200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AccountCartAdd200Response>> AccountCartAddWithHttpInfoAsync(AccountCartAdd accountCartAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountCartAdd' is set
            if (accountCartAdd == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountCartAdd' when calling AccountApi->AccountCartAdd");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = accountCartAdd;

            localVarRequestOptions.Operation = "AccountApi.AccountCartAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AccountCartAdd200Response>("/account.cart.add.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountCartAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// account.cart.list This method lets you get a list of online stores connected to your API2Cart account. You can get the number of API requests to each store if you specify a period using parameters (request_from_date, request_to_date). The total_calls field is displayed only if there are parameters (request_from_date, request_to_date).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeUrl">A web address of a store (optional)</param>
        /// <param name="storeKey">Find store by store key (optional)</param>
        /// <param name="requestFromDate">Retrieve entities from their creation date (optional)</param>
        /// <param name="requestToDate">Retrieve entities to their creation date (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountCartList200Response</returns>
        public AccountCartList200Response AccountCartList(string? storeUrl = default(string?), string? storeKey = default(string?), string? requestFromDate = default(string?), string? requestToDate = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AccountCartList200Response> localVarResponse = AccountCartListWithHttpInfo(storeUrl, storeKey, requestFromDate, requestToDate, varParams, exclude);
            return localVarResponse.Data;
        }

        /// <summary>
        /// account.cart.list This method lets you get a list of online stores connected to your API2Cart account. You can get the number of API requests to each store if you specify a period using parameters (request_from_date, request_to_date). The total_calls field is displayed only if there are parameters (request_from_date, request_to_date).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeUrl">A web address of a store (optional)</param>
        /// <param name="storeKey">Find store by store key (optional)</param>
        /// <param name="requestFromDate">Retrieve entities from their creation date (optional)</param>
        /// <param name="requestToDate">Retrieve entities to their creation date (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountCartList200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<AccountCartList200Response> AccountCartListWithHttpInfo(string? storeUrl = default(string?), string? storeKey = default(string?), string? requestFromDate = default(string?), string? requestToDate = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (storeUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_url", storeUrl));
            }
            if (storeKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_key", storeKey));
            }
            if (requestFromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "request_from_date", requestFromDate));
            }
            if (requestToDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "request_to_date", requestToDate));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }

            localVarRequestOptions.Operation = "AccountApi.AccountCartList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AccountCartList200Response>("/account.cart.list.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountCartList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// account.cart.list This method lets you get a list of online stores connected to your API2Cart account. You can get the number of API requests to each store if you specify a period using parameters (request_from_date, request_to_date). The total_calls field is displayed only if there are parameters (request_from_date, request_to_date).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeUrl">A web address of a store (optional)</param>
        /// <param name="storeKey">Find store by store key (optional)</param>
        /// <param name="requestFromDate">Retrieve entities from their creation date (optional)</param>
        /// <param name="requestToDate">Retrieve entities to their creation date (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountCartList200Response</returns>
        public async System.Threading.Tasks.Task<AccountCartList200Response> AccountCartListAsync(string? storeUrl = default(string?), string? storeKey = default(string?), string? requestFromDate = default(string?), string? requestToDate = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AccountCartList200Response> localVarResponse = await AccountCartListWithHttpInfoAsync(storeUrl, storeKey, requestFromDate, requestToDate, varParams, exclude, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// account.cart.list This method lets you get a list of online stores connected to your API2Cart account. You can get the number of API requests to each store if you specify a period using parameters (request_from_date, request_to_date). The total_calls field is displayed only if there are parameters (request_from_date, request_to_date).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeUrl">A web address of a store (optional)</param>
        /// <param name="storeKey">Find store by store key (optional)</param>
        /// <param name="requestFromDate">Retrieve entities from their creation date (optional)</param>
        /// <param name="requestToDate">Retrieve entities to their creation date (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountCartList200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AccountCartList200Response>> AccountCartListWithHttpInfoAsync(string? storeUrl = default(string?), string? storeKey = default(string?), string? requestFromDate = default(string?), string? requestToDate = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (storeUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_url", storeUrl));
            }
            if (storeKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_key", storeKey));
            }
            if (requestFromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "request_from_date", requestFromDate));
            }
            if (requestToDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "request_to_date", requestToDate));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }

            localVarRequestOptions.Operation = "AccountApi.AccountCartList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AccountCartList200Response>("/account.cart.list.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountCartList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// account.config.update Use this method to automate the change of credentials used to connect online stores. The list of supported parameters differs depending on the platform.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replaceParameters">Identifies if there is a necessity to replace parameters (optional)</param>
        /// <param name="newStoreUrl">The web address of the store you want to update to connect to API2Cart (optional)</param>
        /// <param name="newStoreKey">Update store key (optional)</param>
        /// <param name="bridgeUrl">This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store) (optional)</param>
        /// <param name="storeRoot">Absolute path to the store root directory (used with \&quot;bridge_url\&quot; parameter) (optional)</param>
        /// <param name="dbTablesPrefix">DB tables prefix (optional)</param>
        /// <param name="userAgent">This parameter allows you to set your custom user agent, which will be used in requests to the store. Please use it cautiously, as the store&#39;s firewall may block specific values. (optional)</param>
        /// <param name="var3dcartPrivateKey">3DCart Private Key (optional)</param>
        /// <param name="var3dcartAccessToken">3DCart Token (optional)</param>
        /// <param name="var3dcartapiApiKey">3DCart API Key (optional)</param>
        /// <param name="amazonSpClientId">Amazon SP API app client id (optional)</param>
        /// <param name="amazonSpClientSecret">Amazon SP API app client secret (optional)</param>
        /// <param name="amazonSpRefreshToken">Amazon SP API OAuth refresh token (optional)</param>
        /// <param name="amazonSpAwsRegion">Amazon AWS Region (optional)</param>
        /// <param name="amazonSpApiEnvironment">Amazon SP API environment (optional, default to &quot;production&quot;)</param>
        /// <param name="amazonSellerId">Amazon Seller ID (Merchant token) (optional)</param>
        /// <param name="aspdotnetstorefrontApiUser">It&#39;s a AspDotNetStorefront account for which API is available (optional)</param>
        /// <param name="aspdotnetstorefrontApiPass">AspDotNetStorefront API Password (optional)</param>
        /// <param name="bigcommerceapiAdminAccount">It&#39;s a BigCommerce account for which API is enabled (optional)</param>
        /// <param name="bigcommerceapiApiPath">BigCommerce API URL (optional)</param>
        /// <param name="bigcommerceapiApiKey">Bigcommerce API Key (optional)</param>
        /// <param name="bigcommerceapiClientId">Client ID of the requesting app (optional)</param>
        /// <param name="bigcommerceapiAccessToken">Access token authorizing the app to access resources on behalf of a user (optional)</param>
        /// <param name="bigcommerceapiContext">API Path section unique to the store (optional)</param>
        /// <param name="bolApiKey">Bol API Key (optional)</param>
        /// <param name="bolApiSecret">Bol API Secret (optional)</param>
        /// <param name="bolRetailerId">Bol Retailer ID (optional)</param>
        /// <param name="demandwareClientId">Demandware client id (optional)</param>
        /// <param name="demandwareApiPassword">Demandware api password (optional)</param>
        /// <param name="demandwareUserName">Demandware user name (optional)</param>
        /// <param name="demandwareUserPassword">Demandware user password (optional)</param>
        /// <param name="ebayClientId">Application ID (AppID). (optional)</param>
        /// <param name="ebayClientSecret">Shared Secret from eBay application (optional)</param>
        /// <param name="ebayRuname">The RuName value that eBay assigns to your application. (optional)</param>
        /// <param name="ebayAccessToken">Used to authenticate API requests. (optional)</param>
        /// <param name="ebayRefreshToken">Used to renew the access token. (optional)</param>
        /// <param name="ebayEnvironment">eBay environment (optional)</param>
        /// <param name="ebaySiteId">eBay global ID (optional, default to 0)</param>
        /// <param name="ecwidAcessToken">Access token authorizing the app to access resources on behalf of a user (optional)</param>
        /// <param name="ecwidStoreId">Store Id (optional)</param>
        /// <param name="lazadaAppId">Lazada App ID (optional)</param>
        /// <param name="lazadaAppSecret">Lazada App Secret (optional)</param>
        /// <param name="lazadaRefreshToken">Lazada Refresh Token (optional)</param>
        /// <param name="lazadaRegion">Lazada API endpoint Region (optional)</param>
        /// <param name="etsyKeystring">Etsy keystring (optional)</param>
        /// <param name="etsySharedSecret">Etsy shared secret (optional)</param>
        /// <param name="etsyAccessToken">Access token authorizing the app to access resources on behalf of a user (optional)</param>
        /// <param name="etsyTokenSecret">Secret token authorizing the app to access resources on behalf of a user (optional)</param>
        /// <param name="etsyClientId">Etsy Client Id (optional)</param>
        /// <param name="etsyRefreshToken">Etsy Refresh token (optional)</param>
        /// <param name="facebookAppId">Facebook App ID (optional)</param>
        /// <param name="facebookAppSecret">Facebook App Secret (optional)</param>
        /// <param name="facebookAccessToken">Facebook Access Token (optional)</param>
        /// <param name="facebookBusinessId">Facebook Business ID (optional)</param>
        /// <param name="netoApiKey">Neto API Key (optional)</param>
        /// <param name="netoApiUsername">Neto User Name (optional)</param>
        /// <param name="shoplineAccessToken">Shopline APP Key (optional)</param>
        /// <param name="shoplineAppKey">Shopline APP Key (optional)</param>
        /// <param name="shoplineAppSecret">Shopline App Secret (optional)</param>
        /// <param name="shoplineSharedSecret">Shopline Shared Secret (optional)</param>
        /// <param name="shopifyAccessToken">Access token authorizing the app to access resources on behalf of a user (optional)</param>
        /// <param name="shopifyApiKey">Shopify API Key (optional)</param>
        /// <param name="shopifyApiPassword">Shopify API Password (optional)</param>
        /// <param name="shopifySharedSecret">Shared secret (optional)</param>
        /// <param name="shoplazzaAccessToken">Access token authorizing the app to access resources on behalf of a user (optional)</param>
        /// <param name="shoplazzaSharedSecret">Shared secret (optional)</param>
        /// <param name="mivaAccessToken">Miva access token (optional)</param>
        /// <param name="mivaSignature">Miva signature (optional)</param>
        /// <param name="shopwareAccessKey">Shopware access key (optional)</param>
        /// <param name="shopwareApiKey">Shopware api key (optional)</param>
        /// <param name="shopwareApiSecret">Shopware client secret access key (optional)</param>
        /// <param name="bigcartelUserName">Subdomain of store (optional)</param>
        /// <param name="bigcartelPassword">BigCartel account password (optional)</param>
        /// <param name="volusionLogin">It&#39;s a Volusion account for which API is enabled (optional)</param>
        /// <param name="volusionPassword">Volusion API Password (optional)</param>
        /// <param name="walmartClientId">Walmart client ID. For the region &#39;ca&#39; use Consumer ID (optional)</param>
        /// <param name="walmartClientSecret">Walmart client secret. For the region &#39;ca&#39; use Private Key (optional)</param>
        /// <param name="walmartEnvironment">Walmart environment (optional, default to &quot;production&quot;)</param>
        /// <param name="walmartChannelType">Walmart WM_CONSUMER.CHANNEL.TYPE header (optional)</param>
        /// <param name="walmartRegion">Walmart region (optional, default to &quot;us&quot;)</param>
        /// <param name="squareClientId">Square (Weebly) Client ID (optional)</param>
        /// <param name="squareClientSecret">Square (Weebly) Client Secret (optional)</param>
        /// <param name="squareRefreshToken">Square (Weebly) Refresh Token (optional)</param>
        /// <param name="squarespaceApiKey">Squarespace API Key (optional)</param>
        /// <param name="squarespaceClientId">Squarespace Connector Client ID (optional)</param>
        /// <param name="squarespaceClientSecret">Squarespace Connector Client Secret (optional)</param>
        /// <param name="squarespaceAccessToken">Squarespace access token (optional)</param>
        /// <param name="squarespaceRefreshToken">Squarespace refresh token (optional)</param>
        /// <param name="hybrisClientId">Omni Commerce Connector Client ID (optional)</param>
        /// <param name="hybrisClientSecret">Omni Commerce Connector Client Secret (optional)</param>
        /// <param name="hybrisUsername">User Name (optional)</param>
        /// <param name="hybrisPassword">User password (optional)</param>
        /// <param name="hybrisWebsites">Websites to stores mapping data (optional)</param>
        /// <param name="lightspeedApiKey">LightSpeed api key (optional)</param>
        /// <param name="lightspeedApiSecret">LightSpeed api secret (optional)</param>
        /// <param name="commercehqApiKey">CommerceHQ api key (optional)</param>
        /// <param name="commercehqApiPassword">CommerceHQ api password (optional)</param>
        /// <param name="wcConsumerKey">Woocommerce consumer key (optional)</param>
        /// <param name="wcConsumerSecret">Woocommerce consumer secret (optional)</param>
        /// <param name="magentoConsumerKey">Magento Consumer Key (optional)</param>
        /// <param name="magentoConsumerSecret">Magento Consumer Secret (optional)</param>
        /// <param name="magentoAccessToken">Magento Access Token (optional)</param>
        /// <param name="magentoTokenSecret">Magento Token Secret (optional)</param>
        /// <param name="prestashopWebserviceKey">Prestashop webservice key (optional)</param>
        /// <param name="wixAppId">Wix App ID (optional)</param>
        /// <param name="wixAppSecretKey">Wix App Secret Key (optional)</param>
        /// <param name="wixInstanceId">Wix Instance ID (optional)</param>
        /// <param name="wixRefreshToken">Wix refresh token (optional)</param>
        /// <param name="mercadoLibreAppId">Mercado Libre App ID (optional)</param>
        /// <param name="mercadoLibreAppSecretKey">Mercado Libre App Secret Key (optional)</param>
        /// <param name="mercadoLibreRefreshToken">Mercado Libre Refresh Token (optional)</param>
        /// <param name="zidClientId">Zid Client ID (optional)</param>
        /// <param name="zidClientSecret">Zid Client Secret (optional)</param>
        /// <param name="zidAccessToken">Zid Access Token (optional)</param>
        /// <param name="zidAuthorization">Zid Authorization (optional)</param>
        /// <param name="zidRefreshToken">Zid refresh token (optional)</param>
        /// <param name="flipkartClientId">Flipkart Client ID (optional)</param>
        /// <param name="flipkartClientSecret">Flipkart Client Secret (optional)</param>
        /// <param name="allegroClientId">Allegro Client ID (optional)</param>
        /// <param name="allegroClientSecret">Allegro Client Secret (optional)</param>
        /// <param name="allegroAccessToken">Allegro Access Token (optional)</param>
        /// <param name="allegroRefreshToken">Allegro Refresh Token (optional)</param>
        /// <param name="allegroEnvironment">Allegro Environment (optional, default to &quot;production&quot;)</param>
        /// <param name="zohoClientId">Zoho Client ID (optional)</param>
        /// <param name="zohoClientSecret">Zoho Client Secret (optional)</param>
        /// <param name="zohoRefreshToken">Zoho Refresh Token (optional)</param>
        /// <param name="zohoRegion">Zoho API endpoint Region (optional)</param>
        /// <param name="tiendanubeUserId">Tiendanube User ID (optional)</param>
        /// <param name="tiendanubeAccessToken">Tiendanube Access Token (optional)</param>
        /// <param name="tiendanubeClientSecret">Tiendanube Client Secret (optional)</param>
        /// <param name="ottoClientId">Otto Client ID (optional)</param>
        /// <param name="ottoClientSecret">Otto Client Secret (optional)</param>
        /// <param name="ottoAppId">Otto App ID (optional)</param>
        /// <param name="ottoRefreshToken">Otto Refresh Token (optional)</param>
        /// <param name="ottoEnvironment">Otto Environment (optional)</param>
        /// <param name="ottoAccessToken">Otto Access Token (optional)</param>
        /// <param name="tiktokshopAppKey">TikTok Shop App Key (optional)</param>
        /// <param name="tiktokshopAppSecret">TikTok Shop App Secret (optional)</param>
        /// <param name="tiktokshopRefreshToken">TikTok Shop Refresh Token (optional)</param>
        /// <param name="tiktokshopAccessToken">TikTok Shop Access Token (optional)</param>
        /// <param name="sallaClientId">Salla Client ID (optional)</param>
        /// <param name="sallaClientSecret">Salla Client Secret (optional)</param>
        /// <param name="sallaRefreshToken">Salla Refresh Token (optional)</param>
        /// <param name="sallaAccessToken">Salla Access Token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountConfigUpdate200Response</returns>
        public AccountConfigUpdate200Response AccountConfigUpdate(bool? replaceParameters = default(bool?), string? newStoreUrl = default(string?), string? newStoreKey = default(string?), string? bridgeUrl = default(string?), string? storeRoot = default(string?), string? dbTablesPrefix = default(string?), string? userAgent = default(string?), string? var3dcartPrivateKey = default(string?), string? var3dcartAccessToken = default(string?), string? var3dcartapiApiKey = default(string?), string? amazonSpClientId = default(string?), string? amazonSpClientSecret = default(string?), string? amazonSpRefreshToken = default(string?), string? amazonSpAwsRegion = default(string?), string? amazonSpApiEnvironment = default(string?), string? amazonSellerId = default(string?), string? aspdotnetstorefrontApiUser = default(string?), string? aspdotnetstorefrontApiPass = default(string?), string? bigcommerceapiAdminAccount = default(string?), string? bigcommerceapiApiPath = default(string?), string? bigcommerceapiApiKey = default(string?), string? bigcommerceapiClientId = default(string?), string? bigcommerceapiAccessToken = default(string?), string? bigcommerceapiContext = default(string?), string? bolApiKey = default(string?), string? bolApiSecret = default(string?), int? bolRetailerId = default(int?), string? demandwareClientId = default(string?), string? demandwareApiPassword = default(string?), string? demandwareUserName = default(string?), string? demandwareUserPassword = default(string?), string? ebayClientId = default(string?), string? ebayClientSecret = default(string?), string? ebayRuname = default(string?), string? ebayAccessToken = default(string?), string? ebayRefreshToken = default(string?), string? ebayEnvironment = default(string?), int? ebaySiteId = default(int?), string? ecwidAcessToken = default(string?), string? ecwidStoreId = default(string?), string? lazadaAppId = default(string?), string? lazadaAppSecret = default(string?), string? lazadaRefreshToken = default(string?), string? lazadaRegion = default(string?), string? etsyKeystring = default(string?), string? etsySharedSecret = default(string?), string? etsyAccessToken = default(string?), string? etsyTokenSecret = default(string?), string? etsyClientId = default(string?), string? etsyRefreshToken = default(string?), string? facebookAppId = default(string?), string? facebookAppSecret = default(string?), string? facebookAccessToken = default(string?), string? facebookBusinessId = default(string?), string? netoApiKey = default(string?), string? netoApiUsername = default(string?), string? shoplineAccessToken = default(string?), string? shoplineAppKey = default(string?), string? shoplineAppSecret = default(string?), string? shoplineSharedSecret = default(string?), string? shopifyAccessToken = default(string?), string? shopifyApiKey = default(string?), string? shopifyApiPassword = default(string?), string? shopifySharedSecret = default(string?), string? shoplazzaAccessToken = default(string?), string? shoplazzaSharedSecret = default(string?), string? mivaAccessToken = default(string?), string? mivaSignature = default(string?), string? shopwareAccessKey = default(string?), string? shopwareApiKey = default(string?), string? shopwareApiSecret = default(string?), string? bigcartelUserName = default(string?), string? bigcartelPassword = default(string?), string? volusionLogin = default(string?), string? volusionPassword = default(string?), string? walmartClientId = default(string?), string? walmartClientSecret = default(string?), string? walmartEnvironment = default(string?), string? walmartChannelType = default(string?), string? walmartRegion = default(string?), string? squareClientId = default(string?), string? squareClientSecret = default(string?), string? squareRefreshToken = default(string?), string? squarespaceApiKey = default(string?), string? squarespaceClientId = default(string?), string? squarespaceClientSecret = default(string?), string? squarespaceAccessToken = default(string?), string? squarespaceRefreshToken = default(string?), string? hybrisClientId = default(string?), string? hybrisClientSecret = default(string?), string? hybrisUsername = default(string?), string? hybrisPassword = default(string?), List<string>? hybrisWebsites = default(List<string>?), string? lightspeedApiKey = default(string?), string? lightspeedApiSecret = default(string?), string? commercehqApiKey = default(string?), string? commercehqApiPassword = default(string?), string? wcConsumerKey = default(string?), string? wcConsumerSecret = default(string?), string? magentoConsumerKey = default(string?), string? magentoConsumerSecret = default(string?), string? magentoAccessToken = default(string?), string? magentoTokenSecret = default(string?), string? prestashopWebserviceKey = default(string?), string? wixAppId = default(string?), string? wixAppSecretKey = default(string?), string? wixInstanceId = default(string?), string? wixRefreshToken = default(string?), string? mercadoLibreAppId = default(string?), string? mercadoLibreAppSecretKey = default(string?), string? mercadoLibreRefreshToken = default(string?), int? zidClientId = default(int?), string? zidClientSecret = default(string?), string? zidAccessToken = default(string?), string? zidAuthorization = default(string?), string? zidRefreshToken = default(string?), string? flipkartClientId = default(string?), string? flipkartClientSecret = default(string?), string? allegroClientId = default(string?), string? allegroClientSecret = default(string?), string? allegroAccessToken = default(string?), string? allegroRefreshToken = default(string?), string? allegroEnvironment = default(string?), string? zohoClientId = default(string?), string? zohoClientSecret = default(string?), string? zohoRefreshToken = default(string?), string? zohoRegion = default(string?), int? tiendanubeUserId = default(int?), string? tiendanubeAccessToken = default(string?), string? tiendanubeClientSecret = default(string?), string? ottoClientId = default(string?), string? ottoClientSecret = default(string?), string? ottoAppId = default(string?), string? ottoRefreshToken = default(string?), string? ottoEnvironment = default(string?), string? ottoAccessToken = default(string?), string? tiktokshopAppKey = default(string?), string? tiktokshopAppSecret = default(string?), string? tiktokshopRefreshToken = default(string?), string? tiktokshopAccessToken = default(string?), string? sallaClientId = default(string?), string? sallaClientSecret = default(string?), string? sallaRefreshToken = default(string?), string? sallaAccessToken = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AccountConfigUpdate200Response> localVarResponse = AccountConfigUpdateWithHttpInfo(replaceParameters, newStoreUrl, newStoreKey, bridgeUrl, storeRoot, dbTablesPrefix, userAgent, var3dcartPrivateKey, var3dcartAccessToken, var3dcartapiApiKey, amazonSpClientId, amazonSpClientSecret, amazonSpRefreshToken, amazonSpAwsRegion, amazonSpApiEnvironment, amazonSellerId, aspdotnetstorefrontApiUser, aspdotnetstorefrontApiPass, bigcommerceapiAdminAccount, bigcommerceapiApiPath, bigcommerceapiApiKey, bigcommerceapiClientId, bigcommerceapiAccessToken, bigcommerceapiContext, bolApiKey, bolApiSecret, bolRetailerId, demandwareClientId, demandwareApiPassword, demandwareUserName, demandwareUserPassword, ebayClientId, ebayClientSecret, ebayRuname, ebayAccessToken, ebayRefreshToken, ebayEnvironment, ebaySiteId, ecwidAcessToken, ecwidStoreId, lazadaAppId, lazadaAppSecret, lazadaRefreshToken, lazadaRegion, etsyKeystring, etsySharedSecret, etsyAccessToken, etsyTokenSecret, etsyClientId, etsyRefreshToken, facebookAppId, facebookAppSecret, facebookAccessToken, facebookBusinessId, netoApiKey, netoApiUsername, shoplineAccessToken, shoplineAppKey, shoplineAppSecret, shoplineSharedSecret, shopifyAccessToken, shopifyApiKey, shopifyApiPassword, shopifySharedSecret, shoplazzaAccessToken, shoplazzaSharedSecret, mivaAccessToken, mivaSignature, shopwareAccessKey, shopwareApiKey, shopwareApiSecret, bigcartelUserName, bigcartelPassword, volusionLogin, volusionPassword, walmartClientId, walmartClientSecret, walmartEnvironment, walmartChannelType, walmartRegion, squareClientId, squareClientSecret, squareRefreshToken, squarespaceApiKey, squarespaceClientId, squarespaceClientSecret, squarespaceAccessToken, squarespaceRefreshToken, hybrisClientId, hybrisClientSecret, hybrisUsername, hybrisPassword, hybrisWebsites, lightspeedApiKey, lightspeedApiSecret, commercehqApiKey, commercehqApiPassword, wcConsumerKey, wcConsumerSecret, magentoConsumerKey, magentoConsumerSecret, magentoAccessToken, magentoTokenSecret, prestashopWebserviceKey, wixAppId, wixAppSecretKey, wixInstanceId, wixRefreshToken, mercadoLibreAppId, mercadoLibreAppSecretKey, mercadoLibreRefreshToken, zidClientId, zidClientSecret, zidAccessToken, zidAuthorization, zidRefreshToken, flipkartClientId, flipkartClientSecret, allegroClientId, allegroClientSecret, allegroAccessToken, allegroRefreshToken, allegroEnvironment, zohoClientId, zohoClientSecret, zohoRefreshToken, zohoRegion, tiendanubeUserId, tiendanubeAccessToken, tiendanubeClientSecret, ottoClientId, ottoClientSecret, ottoAppId, ottoRefreshToken, ottoEnvironment, ottoAccessToken, tiktokshopAppKey, tiktokshopAppSecret, tiktokshopRefreshToken, tiktokshopAccessToken, sallaClientId, sallaClientSecret, sallaRefreshToken, sallaAccessToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// account.config.update Use this method to automate the change of credentials used to connect online stores. The list of supported parameters differs depending on the platform.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replaceParameters">Identifies if there is a necessity to replace parameters (optional)</param>
        /// <param name="newStoreUrl">The web address of the store you want to update to connect to API2Cart (optional)</param>
        /// <param name="newStoreKey">Update store key (optional)</param>
        /// <param name="bridgeUrl">This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store) (optional)</param>
        /// <param name="storeRoot">Absolute path to the store root directory (used with \&quot;bridge_url\&quot; parameter) (optional)</param>
        /// <param name="dbTablesPrefix">DB tables prefix (optional)</param>
        /// <param name="userAgent">This parameter allows you to set your custom user agent, which will be used in requests to the store. Please use it cautiously, as the store&#39;s firewall may block specific values. (optional)</param>
        /// <param name="var3dcartPrivateKey">3DCart Private Key (optional)</param>
        /// <param name="var3dcartAccessToken">3DCart Token (optional)</param>
        /// <param name="var3dcartapiApiKey">3DCart API Key (optional)</param>
        /// <param name="amazonSpClientId">Amazon SP API app client id (optional)</param>
        /// <param name="amazonSpClientSecret">Amazon SP API app client secret (optional)</param>
        /// <param name="amazonSpRefreshToken">Amazon SP API OAuth refresh token (optional)</param>
        /// <param name="amazonSpAwsRegion">Amazon AWS Region (optional)</param>
        /// <param name="amazonSpApiEnvironment">Amazon SP API environment (optional, default to &quot;production&quot;)</param>
        /// <param name="amazonSellerId">Amazon Seller ID (Merchant token) (optional)</param>
        /// <param name="aspdotnetstorefrontApiUser">It&#39;s a AspDotNetStorefront account for which API is available (optional)</param>
        /// <param name="aspdotnetstorefrontApiPass">AspDotNetStorefront API Password (optional)</param>
        /// <param name="bigcommerceapiAdminAccount">It&#39;s a BigCommerce account for which API is enabled (optional)</param>
        /// <param name="bigcommerceapiApiPath">BigCommerce API URL (optional)</param>
        /// <param name="bigcommerceapiApiKey">Bigcommerce API Key (optional)</param>
        /// <param name="bigcommerceapiClientId">Client ID of the requesting app (optional)</param>
        /// <param name="bigcommerceapiAccessToken">Access token authorizing the app to access resources on behalf of a user (optional)</param>
        /// <param name="bigcommerceapiContext">API Path section unique to the store (optional)</param>
        /// <param name="bolApiKey">Bol API Key (optional)</param>
        /// <param name="bolApiSecret">Bol API Secret (optional)</param>
        /// <param name="bolRetailerId">Bol Retailer ID (optional)</param>
        /// <param name="demandwareClientId">Demandware client id (optional)</param>
        /// <param name="demandwareApiPassword">Demandware api password (optional)</param>
        /// <param name="demandwareUserName">Demandware user name (optional)</param>
        /// <param name="demandwareUserPassword">Demandware user password (optional)</param>
        /// <param name="ebayClientId">Application ID (AppID). (optional)</param>
        /// <param name="ebayClientSecret">Shared Secret from eBay application (optional)</param>
        /// <param name="ebayRuname">The RuName value that eBay assigns to your application. (optional)</param>
        /// <param name="ebayAccessToken">Used to authenticate API requests. (optional)</param>
        /// <param name="ebayRefreshToken">Used to renew the access token. (optional)</param>
        /// <param name="ebayEnvironment">eBay environment (optional)</param>
        /// <param name="ebaySiteId">eBay global ID (optional, default to 0)</param>
        /// <param name="ecwidAcessToken">Access token authorizing the app to access resources on behalf of a user (optional)</param>
        /// <param name="ecwidStoreId">Store Id (optional)</param>
        /// <param name="lazadaAppId">Lazada App ID (optional)</param>
        /// <param name="lazadaAppSecret">Lazada App Secret (optional)</param>
        /// <param name="lazadaRefreshToken">Lazada Refresh Token (optional)</param>
        /// <param name="lazadaRegion">Lazada API endpoint Region (optional)</param>
        /// <param name="etsyKeystring">Etsy keystring (optional)</param>
        /// <param name="etsySharedSecret">Etsy shared secret (optional)</param>
        /// <param name="etsyAccessToken">Access token authorizing the app to access resources on behalf of a user (optional)</param>
        /// <param name="etsyTokenSecret">Secret token authorizing the app to access resources on behalf of a user (optional)</param>
        /// <param name="etsyClientId">Etsy Client Id (optional)</param>
        /// <param name="etsyRefreshToken">Etsy Refresh token (optional)</param>
        /// <param name="facebookAppId">Facebook App ID (optional)</param>
        /// <param name="facebookAppSecret">Facebook App Secret (optional)</param>
        /// <param name="facebookAccessToken">Facebook Access Token (optional)</param>
        /// <param name="facebookBusinessId">Facebook Business ID (optional)</param>
        /// <param name="netoApiKey">Neto API Key (optional)</param>
        /// <param name="netoApiUsername">Neto User Name (optional)</param>
        /// <param name="shoplineAccessToken">Shopline APP Key (optional)</param>
        /// <param name="shoplineAppKey">Shopline APP Key (optional)</param>
        /// <param name="shoplineAppSecret">Shopline App Secret (optional)</param>
        /// <param name="shoplineSharedSecret">Shopline Shared Secret (optional)</param>
        /// <param name="shopifyAccessToken">Access token authorizing the app to access resources on behalf of a user (optional)</param>
        /// <param name="shopifyApiKey">Shopify API Key (optional)</param>
        /// <param name="shopifyApiPassword">Shopify API Password (optional)</param>
        /// <param name="shopifySharedSecret">Shared secret (optional)</param>
        /// <param name="shoplazzaAccessToken">Access token authorizing the app to access resources on behalf of a user (optional)</param>
        /// <param name="shoplazzaSharedSecret">Shared secret (optional)</param>
        /// <param name="mivaAccessToken">Miva access token (optional)</param>
        /// <param name="mivaSignature">Miva signature (optional)</param>
        /// <param name="shopwareAccessKey">Shopware access key (optional)</param>
        /// <param name="shopwareApiKey">Shopware api key (optional)</param>
        /// <param name="shopwareApiSecret">Shopware client secret access key (optional)</param>
        /// <param name="bigcartelUserName">Subdomain of store (optional)</param>
        /// <param name="bigcartelPassword">BigCartel account password (optional)</param>
        /// <param name="volusionLogin">It&#39;s a Volusion account for which API is enabled (optional)</param>
        /// <param name="volusionPassword">Volusion API Password (optional)</param>
        /// <param name="walmartClientId">Walmart client ID. For the region &#39;ca&#39; use Consumer ID (optional)</param>
        /// <param name="walmartClientSecret">Walmart client secret. For the region &#39;ca&#39; use Private Key (optional)</param>
        /// <param name="walmartEnvironment">Walmart environment (optional, default to &quot;production&quot;)</param>
        /// <param name="walmartChannelType">Walmart WM_CONSUMER.CHANNEL.TYPE header (optional)</param>
        /// <param name="walmartRegion">Walmart region (optional, default to &quot;us&quot;)</param>
        /// <param name="squareClientId">Square (Weebly) Client ID (optional)</param>
        /// <param name="squareClientSecret">Square (Weebly) Client Secret (optional)</param>
        /// <param name="squareRefreshToken">Square (Weebly) Refresh Token (optional)</param>
        /// <param name="squarespaceApiKey">Squarespace API Key (optional)</param>
        /// <param name="squarespaceClientId">Squarespace Connector Client ID (optional)</param>
        /// <param name="squarespaceClientSecret">Squarespace Connector Client Secret (optional)</param>
        /// <param name="squarespaceAccessToken">Squarespace access token (optional)</param>
        /// <param name="squarespaceRefreshToken">Squarespace refresh token (optional)</param>
        /// <param name="hybrisClientId">Omni Commerce Connector Client ID (optional)</param>
        /// <param name="hybrisClientSecret">Omni Commerce Connector Client Secret (optional)</param>
        /// <param name="hybrisUsername">User Name (optional)</param>
        /// <param name="hybrisPassword">User password (optional)</param>
        /// <param name="hybrisWebsites">Websites to stores mapping data (optional)</param>
        /// <param name="lightspeedApiKey">LightSpeed api key (optional)</param>
        /// <param name="lightspeedApiSecret">LightSpeed api secret (optional)</param>
        /// <param name="commercehqApiKey">CommerceHQ api key (optional)</param>
        /// <param name="commercehqApiPassword">CommerceHQ api password (optional)</param>
        /// <param name="wcConsumerKey">Woocommerce consumer key (optional)</param>
        /// <param name="wcConsumerSecret">Woocommerce consumer secret (optional)</param>
        /// <param name="magentoConsumerKey">Magento Consumer Key (optional)</param>
        /// <param name="magentoConsumerSecret">Magento Consumer Secret (optional)</param>
        /// <param name="magentoAccessToken">Magento Access Token (optional)</param>
        /// <param name="magentoTokenSecret">Magento Token Secret (optional)</param>
        /// <param name="prestashopWebserviceKey">Prestashop webservice key (optional)</param>
        /// <param name="wixAppId">Wix App ID (optional)</param>
        /// <param name="wixAppSecretKey">Wix App Secret Key (optional)</param>
        /// <param name="wixInstanceId">Wix Instance ID (optional)</param>
        /// <param name="wixRefreshToken">Wix refresh token (optional)</param>
        /// <param name="mercadoLibreAppId">Mercado Libre App ID (optional)</param>
        /// <param name="mercadoLibreAppSecretKey">Mercado Libre App Secret Key (optional)</param>
        /// <param name="mercadoLibreRefreshToken">Mercado Libre Refresh Token (optional)</param>
        /// <param name="zidClientId">Zid Client ID (optional)</param>
        /// <param name="zidClientSecret">Zid Client Secret (optional)</param>
        /// <param name="zidAccessToken">Zid Access Token (optional)</param>
        /// <param name="zidAuthorization">Zid Authorization (optional)</param>
        /// <param name="zidRefreshToken">Zid refresh token (optional)</param>
        /// <param name="flipkartClientId">Flipkart Client ID (optional)</param>
        /// <param name="flipkartClientSecret">Flipkart Client Secret (optional)</param>
        /// <param name="allegroClientId">Allegro Client ID (optional)</param>
        /// <param name="allegroClientSecret">Allegro Client Secret (optional)</param>
        /// <param name="allegroAccessToken">Allegro Access Token (optional)</param>
        /// <param name="allegroRefreshToken">Allegro Refresh Token (optional)</param>
        /// <param name="allegroEnvironment">Allegro Environment (optional, default to &quot;production&quot;)</param>
        /// <param name="zohoClientId">Zoho Client ID (optional)</param>
        /// <param name="zohoClientSecret">Zoho Client Secret (optional)</param>
        /// <param name="zohoRefreshToken">Zoho Refresh Token (optional)</param>
        /// <param name="zohoRegion">Zoho API endpoint Region (optional)</param>
        /// <param name="tiendanubeUserId">Tiendanube User ID (optional)</param>
        /// <param name="tiendanubeAccessToken">Tiendanube Access Token (optional)</param>
        /// <param name="tiendanubeClientSecret">Tiendanube Client Secret (optional)</param>
        /// <param name="ottoClientId">Otto Client ID (optional)</param>
        /// <param name="ottoClientSecret">Otto Client Secret (optional)</param>
        /// <param name="ottoAppId">Otto App ID (optional)</param>
        /// <param name="ottoRefreshToken">Otto Refresh Token (optional)</param>
        /// <param name="ottoEnvironment">Otto Environment (optional)</param>
        /// <param name="ottoAccessToken">Otto Access Token (optional)</param>
        /// <param name="tiktokshopAppKey">TikTok Shop App Key (optional)</param>
        /// <param name="tiktokshopAppSecret">TikTok Shop App Secret (optional)</param>
        /// <param name="tiktokshopRefreshToken">TikTok Shop Refresh Token (optional)</param>
        /// <param name="tiktokshopAccessToken">TikTok Shop Access Token (optional)</param>
        /// <param name="sallaClientId">Salla Client ID (optional)</param>
        /// <param name="sallaClientSecret">Salla Client Secret (optional)</param>
        /// <param name="sallaRefreshToken">Salla Refresh Token (optional)</param>
        /// <param name="sallaAccessToken">Salla Access Token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountConfigUpdate200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<AccountConfigUpdate200Response> AccountConfigUpdateWithHttpInfo(bool? replaceParameters = default(bool?), string? newStoreUrl = default(string?), string? newStoreKey = default(string?), string? bridgeUrl = default(string?), string? storeRoot = default(string?), string? dbTablesPrefix = default(string?), string? userAgent = default(string?), string? var3dcartPrivateKey = default(string?), string? var3dcartAccessToken = default(string?), string? var3dcartapiApiKey = default(string?), string? amazonSpClientId = default(string?), string? amazonSpClientSecret = default(string?), string? amazonSpRefreshToken = default(string?), string? amazonSpAwsRegion = default(string?), string? amazonSpApiEnvironment = default(string?), string? amazonSellerId = default(string?), string? aspdotnetstorefrontApiUser = default(string?), string? aspdotnetstorefrontApiPass = default(string?), string? bigcommerceapiAdminAccount = default(string?), string? bigcommerceapiApiPath = default(string?), string? bigcommerceapiApiKey = default(string?), string? bigcommerceapiClientId = default(string?), string? bigcommerceapiAccessToken = default(string?), string? bigcommerceapiContext = default(string?), string? bolApiKey = default(string?), string? bolApiSecret = default(string?), int? bolRetailerId = default(int?), string? demandwareClientId = default(string?), string? demandwareApiPassword = default(string?), string? demandwareUserName = default(string?), string? demandwareUserPassword = default(string?), string? ebayClientId = default(string?), string? ebayClientSecret = default(string?), string? ebayRuname = default(string?), string? ebayAccessToken = default(string?), string? ebayRefreshToken = default(string?), string? ebayEnvironment = default(string?), int? ebaySiteId = default(int?), string? ecwidAcessToken = default(string?), string? ecwidStoreId = default(string?), string? lazadaAppId = default(string?), string? lazadaAppSecret = default(string?), string? lazadaRefreshToken = default(string?), string? lazadaRegion = default(string?), string? etsyKeystring = default(string?), string? etsySharedSecret = default(string?), string? etsyAccessToken = default(string?), string? etsyTokenSecret = default(string?), string? etsyClientId = default(string?), string? etsyRefreshToken = default(string?), string? facebookAppId = default(string?), string? facebookAppSecret = default(string?), string? facebookAccessToken = default(string?), string? facebookBusinessId = default(string?), string? netoApiKey = default(string?), string? netoApiUsername = default(string?), string? shoplineAccessToken = default(string?), string? shoplineAppKey = default(string?), string? shoplineAppSecret = default(string?), string? shoplineSharedSecret = default(string?), string? shopifyAccessToken = default(string?), string? shopifyApiKey = default(string?), string? shopifyApiPassword = default(string?), string? shopifySharedSecret = default(string?), string? shoplazzaAccessToken = default(string?), string? shoplazzaSharedSecret = default(string?), string? mivaAccessToken = default(string?), string? mivaSignature = default(string?), string? shopwareAccessKey = default(string?), string? shopwareApiKey = default(string?), string? shopwareApiSecret = default(string?), string? bigcartelUserName = default(string?), string? bigcartelPassword = default(string?), string? volusionLogin = default(string?), string? volusionPassword = default(string?), string? walmartClientId = default(string?), string? walmartClientSecret = default(string?), string? walmartEnvironment = default(string?), string? walmartChannelType = default(string?), string? walmartRegion = default(string?), string? squareClientId = default(string?), string? squareClientSecret = default(string?), string? squareRefreshToken = default(string?), string? squarespaceApiKey = default(string?), string? squarespaceClientId = default(string?), string? squarespaceClientSecret = default(string?), string? squarespaceAccessToken = default(string?), string? squarespaceRefreshToken = default(string?), string? hybrisClientId = default(string?), string? hybrisClientSecret = default(string?), string? hybrisUsername = default(string?), string? hybrisPassword = default(string?), List<string>? hybrisWebsites = default(List<string>?), string? lightspeedApiKey = default(string?), string? lightspeedApiSecret = default(string?), string? commercehqApiKey = default(string?), string? commercehqApiPassword = default(string?), string? wcConsumerKey = default(string?), string? wcConsumerSecret = default(string?), string? magentoConsumerKey = default(string?), string? magentoConsumerSecret = default(string?), string? magentoAccessToken = default(string?), string? magentoTokenSecret = default(string?), string? prestashopWebserviceKey = default(string?), string? wixAppId = default(string?), string? wixAppSecretKey = default(string?), string? wixInstanceId = default(string?), string? wixRefreshToken = default(string?), string? mercadoLibreAppId = default(string?), string? mercadoLibreAppSecretKey = default(string?), string? mercadoLibreRefreshToken = default(string?), int? zidClientId = default(int?), string? zidClientSecret = default(string?), string? zidAccessToken = default(string?), string? zidAuthorization = default(string?), string? zidRefreshToken = default(string?), string? flipkartClientId = default(string?), string? flipkartClientSecret = default(string?), string? allegroClientId = default(string?), string? allegroClientSecret = default(string?), string? allegroAccessToken = default(string?), string? allegroRefreshToken = default(string?), string? allegroEnvironment = default(string?), string? zohoClientId = default(string?), string? zohoClientSecret = default(string?), string? zohoRefreshToken = default(string?), string? zohoRegion = default(string?), int? tiendanubeUserId = default(int?), string? tiendanubeAccessToken = default(string?), string? tiendanubeClientSecret = default(string?), string? ottoClientId = default(string?), string? ottoClientSecret = default(string?), string? ottoAppId = default(string?), string? ottoRefreshToken = default(string?), string? ottoEnvironment = default(string?), string? ottoAccessToken = default(string?), string? tiktokshopAppKey = default(string?), string? tiktokshopAppSecret = default(string?), string? tiktokshopRefreshToken = default(string?), string? tiktokshopAccessToken = default(string?), string? sallaClientId = default(string?), string? sallaClientSecret = default(string?), string? sallaRefreshToken = default(string?), string? sallaAccessToken = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (replaceParameters != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "replace_parameters", replaceParameters));
            }
            if (newStoreUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "new_store_url", newStoreUrl));
            }
            if (newStoreKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "new_store_key", newStoreKey));
            }
            if (bridgeUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bridge_url", bridgeUrl));
            }
            if (storeRoot != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_root", storeRoot));
            }
            if (dbTablesPrefix != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "db_tables_prefix", dbTablesPrefix));
            }
            if (userAgent != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "user_agent", userAgent));
            }
            if (var3dcartPrivateKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "3dcart_private_key", var3dcartPrivateKey));
            }
            if (var3dcartAccessToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "3dcart_access_token", var3dcartAccessToken));
            }
            if (var3dcartapiApiKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "3dcartapi_api_key", var3dcartapiApiKey));
            }
            if (amazonSpClientId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "amazon_sp_client_id", amazonSpClientId));
            }
            if (amazonSpClientSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "amazon_sp_client_secret", amazonSpClientSecret));
            }
            if (amazonSpRefreshToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "amazon_sp_refresh_token", amazonSpRefreshToken));
            }
            if (amazonSpAwsRegion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "amazon_sp_aws_region", amazonSpAwsRegion));
            }
            if (amazonSpApiEnvironment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "amazon_sp_api_environment", amazonSpApiEnvironment));
            }
            if (amazonSellerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "amazon_seller_id", amazonSellerId));
            }
            if (aspdotnetstorefrontApiUser != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "aspdotnetstorefront_api_user", aspdotnetstorefrontApiUser));
            }
            if (aspdotnetstorefrontApiPass != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "aspdotnetstorefront_api_pass", aspdotnetstorefrontApiPass));
            }
            if (bigcommerceapiAdminAccount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bigcommerceapi_admin_account", bigcommerceapiAdminAccount));
            }
            if (bigcommerceapiApiPath != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bigcommerceapi_api_path", bigcommerceapiApiPath));
            }
            if (bigcommerceapiApiKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bigcommerceapi_api_key", bigcommerceapiApiKey));
            }
            if (bigcommerceapiClientId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bigcommerceapi_client_id", bigcommerceapiClientId));
            }
            if (bigcommerceapiAccessToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bigcommerceapi_access_token", bigcommerceapiAccessToken));
            }
            if (bigcommerceapiContext != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bigcommerceapi_context", bigcommerceapiContext));
            }
            if (bolApiKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bol_api_key", bolApiKey));
            }
            if (bolApiSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bol_api_secret", bolApiSecret));
            }
            if (bolRetailerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bol_retailer_id", bolRetailerId));
            }
            if (demandwareClientId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "demandware_client_id", demandwareClientId));
            }
            if (demandwareApiPassword != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "demandware_api_password", demandwareApiPassword));
            }
            if (demandwareUserName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "demandware_user_name", demandwareUserName));
            }
            if (demandwareUserPassword != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "demandware_user_password", demandwareUserPassword));
            }
            if (ebayClientId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ebay_client_id", ebayClientId));
            }
            if (ebayClientSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ebay_client_secret", ebayClientSecret));
            }
            if (ebayRuname != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ebay_runame", ebayRuname));
            }
            if (ebayAccessToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ebay_access_token", ebayAccessToken));
            }
            if (ebayRefreshToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ebay_refresh_token", ebayRefreshToken));
            }
            if (ebayEnvironment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ebay_environment", ebayEnvironment));
            }
            if (ebaySiteId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ebay_site_id", ebaySiteId));
            }
            if (ecwidAcessToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ecwid_acess_token", ecwidAcessToken));
            }
            if (ecwidStoreId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ecwid_store_id", ecwidStoreId));
            }
            if (lazadaAppId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lazada_app_id", lazadaAppId));
            }
            if (lazadaAppSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lazada_app_secret", lazadaAppSecret));
            }
            if (lazadaRefreshToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lazada_refresh_token", lazadaRefreshToken));
            }
            if (lazadaRegion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lazada_region", lazadaRegion));
            }
            if (etsyKeystring != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "etsy_keystring", etsyKeystring));
            }
            if (etsySharedSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "etsy_shared_secret", etsySharedSecret));
            }
            if (etsyAccessToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "etsy_access_token", etsyAccessToken));
            }
            if (etsyTokenSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "etsy_token_secret", etsyTokenSecret));
            }
            if (etsyClientId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "etsy_client_id", etsyClientId));
            }
            if (etsyRefreshToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "etsy_refresh_token", etsyRefreshToken));
            }
            if (facebookAppId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "facebook_app_id", facebookAppId));
            }
            if (facebookAppSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "facebook_app_secret", facebookAppSecret));
            }
            if (facebookAccessToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "facebook_access_token", facebookAccessToken));
            }
            if (facebookBusinessId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "facebook_business_id", facebookBusinessId));
            }
            if (netoApiKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "neto_api_key", netoApiKey));
            }
            if (netoApiUsername != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "neto_api_username", netoApiUsername));
            }
            if (shoplineAccessToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "shopline_access_token", shoplineAccessToken));
            }
            if (shoplineAppKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "shopline_app_key", shoplineAppKey));
            }
            if (shoplineAppSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "shopline_app_secret", shoplineAppSecret));
            }
            if (shoplineSharedSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "shopline_shared_secret", shoplineSharedSecret));
            }
            if (shopifyAccessToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "shopify_access_token", shopifyAccessToken));
            }
            if (shopifyApiKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "shopify_api_key", shopifyApiKey));
            }
            if (shopifyApiPassword != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "shopify_api_password", shopifyApiPassword));
            }
            if (shopifySharedSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "shopify_shared_secret", shopifySharedSecret));
            }
            if (shoplazzaAccessToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "shoplazza_access_token", shoplazzaAccessToken));
            }
            if (shoplazzaSharedSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "shoplazza_shared_secret", shoplazzaSharedSecret));
            }
            if (mivaAccessToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "miva_access_token", mivaAccessToken));
            }
            if (mivaSignature != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "miva_signature", mivaSignature));
            }
            if (shopwareAccessKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "shopware_access_key", shopwareAccessKey));
            }
            if (shopwareApiKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "shopware_api_key", shopwareApiKey));
            }
            if (shopwareApiSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "shopware_api_secret", shopwareApiSecret));
            }
            if (bigcartelUserName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bigcartel_user_name", bigcartelUserName));
            }
            if (bigcartelPassword != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bigcartel_password", bigcartelPassword));
            }
            if (volusionLogin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "volusion_login", volusionLogin));
            }
            if (volusionPassword != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "volusion_password", volusionPassword));
            }
            if (walmartClientId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "walmart_client_id", walmartClientId));
            }
            if (walmartClientSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "walmart_client_secret", walmartClientSecret));
            }
            if (walmartEnvironment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "walmart_environment", walmartEnvironment));
            }
            if (walmartChannelType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "walmart_channel_type", walmartChannelType));
            }
            if (walmartRegion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "walmart_region", walmartRegion));
            }
            if (squareClientId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "square_client_id", squareClientId));
            }
            if (squareClientSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "square_client_secret", squareClientSecret));
            }
            if (squareRefreshToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "square_refresh_token", squareRefreshToken));
            }
            if (squarespaceApiKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "squarespace_api_key", squarespaceApiKey));
            }
            if (squarespaceClientId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "squarespace_client_id", squarespaceClientId));
            }
            if (squarespaceClientSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "squarespace_client_secret", squarespaceClientSecret));
            }
            if (squarespaceAccessToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "squarespace_access_token", squarespaceAccessToken));
            }
            if (squarespaceRefreshToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "squarespace_refresh_token", squarespaceRefreshToken));
            }
            if (hybrisClientId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "hybris_client_id", hybrisClientId));
            }
            if (hybrisClientSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "hybris_client_secret", hybrisClientSecret));
            }
            if (hybrisUsername != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "hybris_username", hybrisUsername));
            }
            if (hybrisPassword != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "hybris_password", hybrisPassword));
            }
            if (hybrisWebsites != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "hybris_websites", hybrisWebsites));
            }
            if (lightspeedApiKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lightspeed_api_key", lightspeedApiKey));
            }
            if (lightspeedApiSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lightspeed_api_secret", lightspeedApiSecret));
            }
            if (commercehqApiKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "commercehq_api_key", commercehqApiKey));
            }
            if (commercehqApiPassword != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "commercehq_api_password", commercehqApiPassword));
            }
            if (wcConsumerKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "wc_consumer_key", wcConsumerKey));
            }
            if (wcConsumerSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "wc_consumer_secret", wcConsumerSecret));
            }
            if (magentoConsumerKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "magento_consumer_key", magentoConsumerKey));
            }
            if (magentoConsumerSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "magento_consumer_secret", magentoConsumerSecret));
            }
            if (magentoAccessToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "magento_access_token", magentoAccessToken));
            }
            if (magentoTokenSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "magento_token_secret", magentoTokenSecret));
            }
            if (prestashopWebserviceKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "prestashop_webservice_key", prestashopWebserviceKey));
            }
            if (wixAppId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "wix_app_id", wixAppId));
            }
            if (wixAppSecretKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "wix_app_secret_key", wixAppSecretKey));
            }
            if (wixInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "wix_instance_id", wixInstanceId));
            }
            if (wixRefreshToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "wix_refresh_token", wixRefreshToken));
            }
            if (mercadoLibreAppId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "mercado_libre_app_id", mercadoLibreAppId));
            }
            if (mercadoLibreAppSecretKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "mercado_libre_app_secret_key", mercadoLibreAppSecretKey));
            }
            if (mercadoLibreRefreshToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "mercado_libre_refresh_token", mercadoLibreRefreshToken));
            }
            if (zidClientId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "zid_client_id", zidClientId));
            }
            if (zidClientSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "zid_client_secret", zidClientSecret));
            }
            if (zidAccessToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "zid_access_token", zidAccessToken));
            }
            if (zidAuthorization != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "zid_authorization", zidAuthorization));
            }
            if (zidRefreshToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "zid_refresh_token", zidRefreshToken));
            }
            if (flipkartClientId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "flipkart_client_id", flipkartClientId));
            }
            if (flipkartClientSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "flipkart_client_secret", flipkartClientSecret));
            }
            if (allegroClientId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "allegro_client_id", allegroClientId));
            }
            if (allegroClientSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "allegro_client_secret", allegroClientSecret));
            }
            if (allegroAccessToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "allegro_access_token", allegroAccessToken));
            }
            if (allegroRefreshToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "allegro_refresh_token", allegroRefreshToken));
            }
            if (allegroEnvironment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "allegro_environment", allegroEnvironment));
            }
            if (zohoClientId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "zoho_client_id", zohoClientId));
            }
            if (zohoClientSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "zoho_client_secret", zohoClientSecret));
            }
            if (zohoRefreshToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "zoho_refresh_token", zohoRefreshToken));
            }
            if (zohoRegion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "zoho_region", zohoRegion));
            }
            if (tiendanubeUserId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tiendanube_user_id", tiendanubeUserId));
            }
            if (tiendanubeAccessToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tiendanube_access_token", tiendanubeAccessToken));
            }
            if (tiendanubeClientSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tiendanube_client_secret", tiendanubeClientSecret));
            }
            if (ottoClientId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "otto_client_id", ottoClientId));
            }
            if (ottoClientSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "otto_client_secret", ottoClientSecret));
            }
            if (ottoAppId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "otto_app_id", ottoAppId));
            }
            if (ottoRefreshToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "otto_refresh_token", ottoRefreshToken));
            }
            if (ottoEnvironment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "otto_environment", ottoEnvironment));
            }
            if (ottoAccessToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "otto_access_token", ottoAccessToken));
            }
            if (tiktokshopAppKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tiktokshop_app_key", tiktokshopAppKey));
            }
            if (tiktokshopAppSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tiktokshop_app_secret", tiktokshopAppSecret));
            }
            if (tiktokshopRefreshToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tiktokshop_refresh_token", tiktokshopRefreshToken));
            }
            if (tiktokshopAccessToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tiktokshop_access_token", tiktokshopAccessToken));
            }
            if (sallaClientId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "salla_client_id", sallaClientId));
            }
            if (sallaClientSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "salla_client_secret", sallaClientSecret));
            }
            if (sallaRefreshToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "salla_refresh_token", sallaRefreshToken));
            }
            if (sallaAccessToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "salla_access_token", sallaAccessToken));
            }

            localVarRequestOptions.Operation = "AccountApi.AccountConfigUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<AccountConfigUpdate200Response>("/account.config.update.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountConfigUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// account.config.update Use this method to automate the change of credentials used to connect online stores. The list of supported parameters differs depending on the platform.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replaceParameters">Identifies if there is a necessity to replace parameters (optional)</param>
        /// <param name="newStoreUrl">The web address of the store you want to update to connect to API2Cart (optional)</param>
        /// <param name="newStoreKey">Update store key (optional)</param>
        /// <param name="bridgeUrl">This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store) (optional)</param>
        /// <param name="storeRoot">Absolute path to the store root directory (used with \&quot;bridge_url\&quot; parameter) (optional)</param>
        /// <param name="dbTablesPrefix">DB tables prefix (optional)</param>
        /// <param name="userAgent">This parameter allows you to set your custom user agent, which will be used in requests to the store. Please use it cautiously, as the store&#39;s firewall may block specific values. (optional)</param>
        /// <param name="var3dcartPrivateKey">3DCart Private Key (optional)</param>
        /// <param name="var3dcartAccessToken">3DCart Token (optional)</param>
        /// <param name="var3dcartapiApiKey">3DCart API Key (optional)</param>
        /// <param name="amazonSpClientId">Amazon SP API app client id (optional)</param>
        /// <param name="amazonSpClientSecret">Amazon SP API app client secret (optional)</param>
        /// <param name="amazonSpRefreshToken">Amazon SP API OAuth refresh token (optional)</param>
        /// <param name="amazonSpAwsRegion">Amazon AWS Region (optional)</param>
        /// <param name="amazonSpApiEnvironment">Amazon SP API environment (optional, default to &quot;production&quot;)</param>
        /// <param name="amazonSellerId">Amazon Seller ID (Merchant token) (optional)</param>
        /// <param name="aspdotnetstorefrontApiUser">It&#39;s a AspDotNetStorefront account for which API is available (optional)</param>
        /// <param name="aspdotnetstorefrontApiPass">AspDotNetStorefront API Password (optional)</param>
        /// <param name="bigcommerceapiAdminAccount">It&#39;s a BigCommerce account for which API is enabled (optional)</param>
        /// <param name="bigcommerceapiApiPath">BigCommerce API URL (optional)</param>
        /// <param name="bigcommerceapiApiKey">Bigcommerce API Key (optional)</param>
        /// <param name="bigcommerceapiClientId">Client ID of the requesting app (optional)</param>
        /// <param name="bigcommerceapiAccessToken">Access token authorizing the app to access resources on behalf of a user (optional)</param>
        /// <param name="bigcommerceapiContext">API Path section unique to the store (optional)</param>
        /// <param name="bolApiKey">Bol API Key (optional)</param>
        /// <param name="bolApiSecret">Bol API Secret (optional)</param>
        /// <param name="bolRetailerId">Bol Retailer ID (optional)</param>
        /// <param name="demandwareClientId">Demandware client id (optional)</param>
        /// <param name="demandwareApiPassword">Demandware api password (optional)</param>
        /// <param name="demandwareUserName">Demandware user name (optional)</param>
        /// <param name="demandwareUserPassword">Demandware user password (optional)</param>
        /// <param name="ebayClientId">Application ID (AppID). (optional)</param>
        /// <param name="ebayClientSecret">Shared Secret from eBay application (optional)</param>
        /// <param name="ebayRuname">The RuName value that eBay assigns to your application. (optional)</param>
        /// <param name="ebayAccessToken">Used to authenticate API requests. (optional)</param>
        /// <param name="ebayRefreshToken">Used to renew the access token. (optional)</param>
        /// <param name="ebayEnvironment">eBay environment (optional)</param>
        /// <param name="ebaySiteId">eBay global ID (optional, default to 0)</param>
        /// <param name="ecwidAcessToken">Access token authorizing the app to access resources on behalf of a user (optional)</param>
        /// <param name="ecwidStoreId">Store Id (optional)</param>
        /// <param name="lazadaAppId">Lazada App ID (optional)</param>
        /// <param name="lazadaAppSecret">Lazada App Secret (optional)</param>
        /// <param name="lazadaRefreshToken">Lazada Refresh Token (optional)</param>
        /// <param name="lazadaRegion">Lazada API endpoint Region (optional)</param>
        /// <param name="etsyKeystring">Etsy keystring (optional)</param>
        /// <param name="etsySharedSecret">Etsy shared secret (optional)</param>
        /// <param name="etsyAccessToken">Access token authorizing the app to access resources on behalf of a user (optional)</param>
        /// <param name="etsyTokenSecret">Secret token authorizing the app to access resources on behalf of a user (optional)</param>
        /// <param name="etsyClientId">Etsy Client Id (optional)</param>
        /// <param name="etsyRefreshToken">Etsy Refresh token (optional)</param>
        /// <param name="facebookAppId">Facebook App ID (optional)</param>
        /// <param name="facebookAppSecret">Facebook App Secret (optional)</param>
        /// <param name="facebookAccessToken">Facebook Access Token (optional)</param>
        /// <param name="facebookBusinessId">Facebook Business ID (optional)</param>
        /// <param name="netoApiKey">Neto API Key (optional)</param>
        /// <param name="netoApiUsername">Neto User Name (optional)</param>
        /// <param name="shoplineAccessToken">Shopline APP Key (optional)</param>
        /// <param name="shoplineAppKey">Shopline APP Key (optional)</param>
        /// <param name="shoplineAppSecret">Shopline App Secret (optional)</param>
        /// <param name="shoplineSharedSecret">Shopline Shared Secret (optional)</param>
        /// <param name="shopifyAccessToken">Access token authorizing the app to access resources on behalf of a user (optional)</param>
        /// <param name="shopifyApiKey">Shopify API Key (optional)</param>
        /// <param name="shopifyApiPassword">Shopify API Password (optional)</param>
        /// <param name="shopifySharedSecret">Shared secret (optional)</param>
        /// <param name="shoplazzaAccessToken">Access token authorizing the app to access resources on behalf of a user (optional)</param>
        /// <param name="shoplazzaSharedSecret">Shared secret (optional)</param>
        /// <param name="mivaAccessToken">Miva access token (optional)</param>
        /// <param name="mivaSignature">Miva signature (optional)</param>
        /// <param name="shopwareAccessKey">Shopware access key (optional)</param>
        /// <param name="shopwareApiKey">Shopware api key (optional)</param>
        /// <param name="shopwareApiSecret">Shopware client secret access key (optional)</param>
        /// <param name="bigcartelUserName">Subdomain of store (optional)</param>
        /// <param name="bigcartelPassword">BigCartel account password (optional)</param>
        /// <param name="volusionLogin">It&#39;s a Volusion account for which API is enabled (optional)</param>
        /// <param name="volusionPassword">Volusion API Password (optional)</param>
        /// <param name="walmartClientId">Walmart client ID. For the region &#39;ca&#39; use Consumer ID (optional)</param>
        /// <param name="walmartClientSecret">Walmart client secret. For the region &#39;ca&#39; use Private Key (optional)</param>
        /// <param name="walmartEnvironment">Walmart environment (optional, default to &quot;production&quot;)</param>
        /// <param name="walmartChannelType">Walmart WM_CONSUMER.CHANNEL.TYPE header (optional)</param>
        /// <param name="walmartRegion">Walmart region (optional, default to &quot;us&quot;)</param>
        /// <param name="squareClientId">Square (Weebly) Client ID (optional)</param>
        /// <param name="squareClientSecret">Square (Weebly) Client Secret (optional)</param>
        /// <param name="squareRefreshToken">Square (Weebly) Refresh Token (optional)</param>
        /// <param name="squarespaceApiKey">Squarespace API Key (optional)</param>
        /// <param name="squarespaceClientId">Squarespace Connector Client ID (optional)</param>
        /// <param name="squarespaceClientSecret">Squarespace Connector Client Secret (optional)</param>
        /// <param name="squarespaceAccessToken">Squarespace access token (optional)</param>
        /// <param name="squarespaceRefreshToken">Squarespace refresh token (optional)</param>
        /// <param name="hybrisClientId">Omni Commerce Connector Client ID (optional)</param>
        /// <param name="hybrisClientSecret">Omni Commerce Connector Client Secret (optional)</param>
        /// <param name="hybrisUsername">User Name (optional)</param>
        /// <param name="hybrisPassword">User password (optional)</param>
        /// <param name="hybrisWebsites">Websites to stores mapping data (optional)</param>
        /// <param name="lightspeedApiKey">LightSpeed api key (optional)</param>
        /// <param name="lightspeedApiSecret">LightSpeed api secret (optional)</param>
        /// <param name="commercehqApiKey">CommerceHQ api key (optional)</param>
        /// <param name="commercehqApiPassword">CommerceHQ api password (optional)</param>
        /// <param name="wcConsumerKey">Woocommerce consumer key (optional)</param>
        /// <param name="wcConsumerSecret">Woocommerce consumer secret (optional)</param>
        /// <param name="magentoConsumerKey">Magento Consumer Key (optional)</param>
        /// <param name="magentoConsumerSecret">Magento Consumer Secret (optional)</param>
        /// <param name="magentoAccessToken">Magento Access Token (optional)</param>
        /// <param name="magentoTokenSecret">Magento Token Secret (optional)</param>
        /// <param name="prestashopWebserviceKey">Prestashop webservice key (optional)</param>
        /// <param name="wixAppId">Wix App ID (optional)</param>
        /// <param name="wixAppSecretKey">Wix App Secret Key (optional)</param>
        /// <param name="wixInstanceId">Wix Instance ID (optional)</param>
        /// <param name="wixRefreshToken">Wix refresh token (optional)</param>
        /// <param name="mercadoLibreAppId">Mercado Libre App ID (optional)</param>
        /// <param name="mercadoLibreAppSecretKey">Mercado Libre App Secret Key (optional)</param>
        /// <param name="mercadoLibreRefreshToken">Mercado Libre Refresh Token (optional)</param>
        /// <param name="zidClientId">Zid Client ID (optional)</param>
        /// <param name="zidClientSecret">Zid Client Secret (optional)</param>
        /// <param name="zidAccessToken">Zid Access Token (optional)</param>
        /// <param name="zidAuthorization">Zid Authorization (optional)</param>
        /// <param name="zidRefreshToken">Zid refresh token (optional)</param>
        /// <param name="flipkartClientId">Flipkart Client ID (optional)</param>
        /// <param name="flipkartClientSecret">Flipkart Client Secret (optional)</param>
        /// <param name="allegroClientId">Allegro Client ID (optional)</param>
        /// <param name="allegroClientSecret">Allegro Client Secret (optional)</param>
        /// <param name="allegroAccessToken">Allegro Access Token (optional)</param>
        /// <param name="allegroRefreshToken">Allegro Refresh Token (optional)</param>
        /// <param name="allegroEnvironment">Allegro Environment (optional, default to &quot;production&quot;)</param>
        /// <param name="zohoClientId">Zoho Client ID (optional)</param>
        /// <param name="zohoClientSecret">Zoho Client Secret (optional)</param>
        /// <param name="zohoRefreshToken">Zoho Refresh Token (optional)</param>
        /// <param name="zohoRegion">Zoho API endpoint Region (optional)</param>
        /// <param name="tiendanubeUserId">Tiendanube User ID (optional)</param>
        /// <param name="tiendanubeAccessToken">Tiendanube Access Token (optional)</param>
        /// <param name="tiendanubeClientSecret">Tiendanube Client Secret (optional)</param>
        /// <param name="ottoClientId">Otto Client ID (optional)</param>
        /// <param name="ottoClientSecret">Otto Client Secret (optional)</param>
        /// <param name="ottoAppId">Otto App ID (optional)</param>
        /// <param name="ottoRefreshToken">Otto Refresh Token (optional)</param>
        /// <param name="ottoEnvironment">Otto Environment (optional)</param>
        /// <param name="ottoAccessToken">Otto Access Token (optional)</param>
        /// <param name="tiktokshopAppKey">TikTok Shop App Key (optional)</param>
        /// <param name="tiktokshopAppSecret">TikTok Shop App Secret (optional)</param>
        /// <param name="tiktokshopRefreshToken">TikTok Shop Refresh Token (optional)</param>
        /// <param name="tiktokshopAccessToken">TikTok Shop Access Token (optional)</param>
        /// <param name="sallaClientId">Salla Client ID (optional)</param>
        /// <param name="sallaClientSecret">Salla Client Secret (optional)</param>
        /// <param name="sallaRefreshToken">Salla Refresh Token (optional)</param>
        /// <param name="sallaAccessToken">Salla Access Token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountConfigUpdate200Response</returns>
        public async System.Threading.Tasks.Task<AccountConfigUpdate200Response> AccountConfigUpdateAsync(bool? replaceParameters = default(bool?), string? newStoreUrl = default(string?), string? newStoreKey = default(string?), string? bridgeUrl = default(string?), string? storeRoot = default(string?), string? dbTablesPrefix = default(string?), string? userAgent = default(string?), string? var3dcartPrivateKey = default(string?), string? var3dcartAccessToken = default(string?), string? var3dcartapiApiKey = default(string?), string? amazonSpClientId = default(string?), string? amazonSpClientSecret = default(string?), string? amazonSpRefreshToken = default(string?), string? amazonSpAwsRegion = default(string?), string? amazonSpApiEnvironment = default(string?), string? amazonSellerId = default(string?), string? aspdotnetstorefrontApiUser = default(string?), string? aspdotnetstorefrontApiPass = default(string?), string? bigcommerceapiAdminAccount = default(string?), string? bigcommerceapiApiPath = default(string?), string? bigcommerceapiApiKey = default(string?), string? bigcommerceapiClientId = default(string?), string? bigcommerceapiAccessToken = default(string?), string? bigcommerceapiContext = default(string?), string? bolApiKey = default(string?), string? bolApiSecret = default(string?), int? bolRetailerId = default(int?), string? demandwareClientId = default(string?), string? demandwareApiPassword = default(string?), string? demandwareUserName = default(string?), string? demandwareUserPassword = default(string?), string? ebayClientId = default(string?), string? ebayClientSecret = default(string?), string? ebayRuname = default(string?), string? ebayAccessToken = default(string?), string? ebayRefreshToken = default(string?), string? ebayEnvironment = default(string?), int? ebaySiteId = default(int?), string? ecwidAcessToken = default(string?), string? ecwidStoreId = default(string?), string? lazadaAppId = default(string?), string? lazadaAppSecret = default(string?), string? lazadaRefreshToken = default(string?), string? lazadaRegion = default(string?), string? etsyKeystring = default(string?), string? etsySharedSecret = default(string?), string? etsyAccessToken = default(string?), string? etsyTokenSecret = default(string?), string? etsyClientId = default(string?), string? etsyRefreshToken = default(string?), string? facebookAppId = default(string?), string? facebookAppSecret = default(string?), string? facebookAccessToken = default(string?), string? facebookBusinessId = default(string?), string? netoApiKey = default(string?), string? netoApiUsername = default(string?), string? shoplineAccessToken = default(string?), string? shoplineAppKey = default(string?), string? shoplineAppSecret = default(string?), string? shoplineSharedSecret = default(string?), string? shopifyAccessToken = default(string?), string? shopifyApiKey = default(string?), string? shopifyApiPassword = default(string?), string? shopifySharedSecret = default(string?), string? shoplazzaAccessToken = default(string?), string? shoplazzaSharedSecret = default(string?), string? mivaAccessToken = default(string?), string? mivaSignature = default(string?), string? shopwareAccessKey = default(string?), string? shopwareApiKey = default(string?), string? shopwareApiSecret = default(string?), string? bigcartelUserName = default(string?), string? bigcartelPassword = default(string?), string? volusionLogin = default(string?), string? volusionPassword = default(string?), string? walmartClientId = default(string?), string? walmartClientSecret = default(string?), string? walmartEnvironment = default(string?), string? walmartChannelType = default(string?), string? walmartRegion = default(string?), string? squareClientId = default(string?), string? squareClientSecret = default(string?), string? squareRefreshToken = default(string?), string? squarespaceApiKey = default(string?), string? squarespaceClientId = default(string?), string? squarespaceClientSecret = default(string?), string? squarespaceAccessToken = default(string?), string? squarespaceRefreshToken = default(string?), string? hybrisClientId = default(string?), string? hybrisClientSecret = default(string?), string? hybrisUsername = default(string?), string? hybrisPassword = default(string?), List<string>? hybrisWebsites = default(List<string>?), string? lightspeedApiKey = default(string?), string? lightspeedApiSecret = default(string?), string? commercehqApiKey = default(string?), string? commercehqApiPassword = default(string?), string? wcConsumerKey = default(string?), string? wcConsumerSecret = default(string?), string? magentoConsumerKey = default(string?), string? magentoConsumerSecret = default(string?), string? magentoAccessToken = default(string?), string? magentoTokenSecret = default(string?), string? prestashopWebserviceKey = default(string?), string? wixAppId = default(string?), string? wixAppSecretKey = default(string?), string? wixInstanceId = default(string?), string? wixRefreshToken = default(string?), string? mercadoLibreAppId = default(string?), string? mercadoLibreAppSecretKey = default(string?), string? mercadoLibreRefreshToken = default(string?), int? zidClientId = default(int?), string? zidClientSecret = default(string?), string? zidAccessToken = default(string?), string? zidAuthorization = default(string?), string? zidRefreshToken = default(string?), string? flipkartClientId = default(string?), string? flipkartClientSecret = default(string?), string? allegroClientId = default(string?), string? allegroClientSecret = default(string?), string? allegroAccessToken = default(string?), string? allegroRefreshToken = default(string?), string? allegroEnvironment = default(string?), string? zohoClientId = default(string?), string? zohoClientSecret = default(string?), string? zohoRefreshToken = default(string?), string? zohoRegion = default(string?), int? tiendanubeUserId = default(int?), string? tiendanubeAccessToken = default(string?), string? tiendanubeClientSecret = default(string?), string? ottoClientId = default(string?), string? ottoClientSecret = default(string?), string? ottoAppId = default(string?), string? ottoRefreshToken = default(string?), string? ottoEnvironment = default(string?), string? ottoAccessToken = default(string?), string? tiktokshopAppKey = default(string?), string? tiktokshopAppSecret = default(string?), string? tiktokshopRefreshToken = default(string?), string? tiktokshopAccessToken = default(string?), string? sallaClientId = default(string?), string? sallaClientSecret = default(string?), string? sallaRefreshToken = default(string?), string? sallaAccessToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AccountConfigUpdate200Response> localVarResponse = await AccountConfigUpdateWithHttpInfoAsync(replaceParameters, newStoreUrl, newStoreKey, bridgeUrl, storeRoot, dbTablesPrefix, userAgent, var3dcartPrivateKey, var3dcartAccessToken, var3dcartapiApiKey, amazonSpClientId, amazonSpClientSecret, amazonSpRefreshToken, amazonSpAwsRegion, amazonSpApiEnvironment, amazonSellerId, aspdotnetstorefrontApiUser, aspdotnetstorefrontApiPass, bigcommerceapiAdminAccount, bigcommerceapiApiPath, bigcommerceapiApiKey, bigcommerceapiClientId, bigcommerceapiAccessToken, bigcommerceapiContext, bolApiKey, bolApiSecret, bolRetailerId, demandwareClientId, demandwareApiPassword, demandwareUserName, demandwareUserPassword, ebayClientId, ebayClientSecret, ebayRuname, ebayAccessToken, ebayRefreshToken, ebayEnvironment, ebaySiteId, ecwidAcessToken, ecwidStoreId, lazadaAppId, lazadaAppSecret, lazadaRefreshToken, lazadaRegion, etsyKeystring, etsySharedSecret, etsyAccessToken, etsyTokenSecret, etsyClientId, etsyRefreshToken, facebookAppId, facebookAppSecret, facebookAccessToken, facebookBusinessId, netoApiKey, netoApiUsername, shoplineAccessToken, shoplineAppKey, shoplineAppSecret, shoplineSharedSecret, shopifyAccessToken, shopifyApiKey, shopifyApiPassword, shopifySharedSecret, shoplazzaAccessToken, shoplazzaSharedSecret, mivaAccessToken, mivaSignature, shopwareAccessKey, shopwareApiKey, shopwareApiSecret, bigcartelUserName, bigcartelPassword, volusionLogin, volusionPassword, walmartClientId, walmartClientSecret, walmartEnvironment, walmartChannelType, walmartRegion, squareClientId, squareClientSecret, squareRefreshToken, squarespaceApiKey, squarespaceClientId, squarespaceClientSecret, squarespaceAccessToken, squarespaceRefreshToken, hybrisClientId, hybrisClientSecret, hybrisUsername, hybrisPassword, hybrisWebsites, lightspeedApiKey, lightspeedApiSecret, commercehqApiKey, commercehqApiPassword, wcConsumerKey, wcConsumerSecret, magentoConsumerKey, magentoConsumerSecret, magentoAccessToken, magentoTokenSecret, prestashopWebserviceKey, wixAppId, wixAppSecretKey, wixInstanceId, wixRefreshToken, mercadoLibreAppId, mercadoLibreAppSecretKey, mercadoLibreRefreshToken, zidClientId, zidClientSecret, zidAccessToken, zidAuthorization, zidRefreshToken, flipkartClientId, flipkartClientSecret, allegroClientId, allegroClientSecret, allegroAccessToken, allegroRefreshToken, allegroEnvironment, zohoClientId, zohoClientSecret, zohoRefreshToken, zohoRegion, tiendanubeUserId, tiendanubeAccessToken, tiendanubeClientSecret, ottoClientId, ottoClientSecret, ottoAppId, ottoRefreshToken, ottoEnvironment, ottoAccessToken, tiktokshopAppKey, tiktokshopAppSecret, tiktokshopRefreshToken, tiktokshopAccessToken, sallaClientId, sallaClientSecret, sallaRefreshToken, sallaAccessToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// account.config.update Use this method to automate the change of credentials used to connect online stores. The list of supported parameters differs depending on the platform.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replaceParameters">Identifies if there is a necessity to replace parameters (optional)</param>
        /// <param name="newStoreUrl">The web address of the store you want to update to connect to API2Cart (optional)</param>
        /// <param name="newStoreKey">Update store key (optional)</param>
        /// <param name="bridgeUrl">This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store) (optional)</param>
        /// <param name="storeRoot">Absolute path to the store root directory (used with \&quot;bridge_url\&quot; parameter) (optional)</param>
        /// <param name="dbTablesPrefix">DB tables prefix (optional)</param>
        /// <param name="userAgent">This parameter allows you to set your custom user agent, which will be used in requests to the store. Please use it cautiously, as the store&#39;s firewall may block specific values. (optional)</param>
        /// <param name="var3dcartPrivateKey">3DCart Private Key (optional)</param>
        /// <param name="var3dcartAccessToken">3DCart Token (optional)</param>
        /// <param name="var3dcartapiApiKey">3DCart API Key (optional)</param>
        /// <param name="amazonSpClientId">Amazon SP API app client id (optional)</param>
        /// <param name="amazonSpClientSecret">Amazon SP API app client secret (optional)</param>
        /// <param name="amazonSpRefreshToken">Amazon SP API OAuth refresh token (optional)</param>
        /// <param name="amazonSpAwsRegion">Amazon AWS Region (optional)</param>
        /// <param name="amazonSpApiEnvironment">Amazon SP API environment (optional, default to &quot;production&quot;)</param>
        /// <param name="amazonSellerId">Amazon Seller ID (Merchant token) (optional)</param>
        /// <param name="aspdotnetstorefrontApiUser">It&#39;s a AspDotNetStorefront account for which API is available (optional)</param>
        /// <param name="aspdotnetstorefrontApiPass">AspDotNetStorefront API Password (optional)</param>
        /// <param name="bigcommerceapiAdminAccount">It&#39;s a BigCommerce account for which API is enabled (optional)</param>
        /// <param name="bigcommerceapiApiPath">BigCommerce API URL (optional)</param>
        /// <param name="bigcommerceapiApiKey">Bigcommerce API Key (optional)</param>
        /// <param name="bigcommerceapiClientId">Client ID of the requesting app (optional)</param>
        /// <param name="bigcommerceapiAccessToken">Access token authorizing the app to access resources on behalf of a user (optional)</param>
        /// <param name="bigcommerceapiContext">API Path section unique to the store (optional)</param>
        /// <param name="bolApiKey">Bol API Key (optional)</param>
        /// <param name="bolApiSecret">Bol API Secret (optional)</param>
        /// <param name="bolRetailerId">Bol Retailer ID (optional)</param>
        /// <param name="demandwareClientId">Demandware client id (optional)</param>
        /// <param name="demandwareApiPassword">Demandware api password (optional)</param>
        /// <param name="demandwareUserName">Demandware user name (optional)</param>
        /// <param name="demandwareUserPassword">Demandware user password (optional)</param>
        /// <param name="ebayClientId">Application ID (AppID). (optional)</param>
        /// <param name="ebayClientSecret">Shared Secret from eBay application (optional)</param>
        /// <param name="ebayRuname">The RuName value that eBay assigns to your application. (optional)</param>
        /// <param name="ebayAccessToken">Used to authenticate API requests. (optional)</param>
        /// <param name="ebayRefreshToken">Used to renew the access token. (optional)</param>
        /// <param name="ebayEnvironment">eBay environment (optional)</param>
        /// <param name="ebaySiteId">eBay global ID (optional, default to 0)</param>
        /// <param name="ecwidAcessToken">Access token authorizing the app to access resources on behalf of a user (optional)</param>
        /// <param name="ecwidStoreId">Store Id (optional)</param>
        /// <param name="lazadaAppId">Lazada App ID (optional)</param>
        /// <param name="lazadaAppSecret">Lazada App Secret (optional)</param>
        /// <param name="lazadaRefreshToken">Lazada Refresh Token (optional)</param>
        /// <param name="lazadaRegion">Lazada API endpoint Region (optional)</param>
        /// <param name="etsyKeystring">Etsy keystring (optional)</param>
        /// <param name="etsySharedSecret">Etsy shared secret (optional)</param>
        /// <param name="etsyAccessToken">Access token authorizing the app to access resources on behalf of a user (optional)</param>
        /// <param name="etsyTokenSecret">Secret token authorizing the app to access resources on behalf of a user (optional)</param>
        /// <param name="etsyClientId">Etsy Client Id (optional)</param>
        /// <param name="etsyRefreshToken">Etsy Refresh token (optional)</param>
        /// <param name="facebookAppId">Facebook App ID (optional)</param>
        /// <param name="facebookAppSecret">Facebook App Secret (optional)</param>
        /// <param name="facebookAccessToken">Facebook Access Token (optional)</param>
        /// <param name="facebookBusinessId">Facebook Business ID (optional)</param>
        /// <param name="netoApiKey">Neto API Key (optional)</param>
        /// <param name="netoApiUsername">Neto User Name (optional)</param>
        /// <param name="shoplineAccessToken">Shopline APP Key (optional)</param>
        /// <param name="shoplineAppKey">Shopline APP Key (optional)</param>
        /// <param name="shoplineAppSecret">Shopline App Secret (optional)</param>
        /// <param name="shoplineSharedSecret">Shopline Shared Secret (optional)</param>
        /// <param name="shopifyAccessToken">Access token authorizing the app to access resources on behalf of a user (optional)</param>
        /// <param name="shopifyApiKey">Shopify API Key (optional)</param>
        /// <param name="shopifyApiPassword">Shopify API Password (optional)</param>
        /// <param name="shopifySharedSecret">Shared secret (optional)</param>
        /// <param name="shoplazzaAccessToken">Access token authorizing the app to access resources on behalf of a user (optional)</param>
        /// <param name="shoplazzaSharedSecret">Shared secret (optional)</param>
        /// <param name="mivaAccessToken">Miva access token (optional)</param>
        /// <param name="mivaSignature">Miva signature (optional)</param>
        /// <param name="shopwareAccessKey">Shopware access key (optional)</param>
        /// <param name="shopwareApiKey">Shopware api key (optional)</param>
        /// <param name="shopwareApiSecret">Shopware client secret access key (optional)</param>
        /// <param name="bigcartelUserName">Subdomain of store (optional)</param>
        /// <param name="bigcartelPassword">BigCartel account password (optional)</param>
        /// <param name="volusionLogin">It&#39;s a Volusion account for which API is enabled (optional)</param>
        /// <param name="volusionPassword">Volusion API Password (optional)</param>
        /// <param name="walmartClientId">Walmart client ID. For the region &#39;ca&#39; use Consumer ID (optional)</param>
        /// <param name="walmartClientSecret">Walmart client secret. For the region &#39;ca&#39; use Private Key (optional)</param>
        /// <param name="walmartEnvironment">Walmart environment (optional, default to &quot;production&quot;)</param>
        /// <param name="walmartChannelType">Walmart WM_CONSUMER.CHANNEL.TYPE header (optional)</param>
        /// <param name="walmartRegion">Walmart region (optional, default to &quot;us&quot;)</param>
        /// <param name="squareClientId">Square (Weebly) Client ID (optional)</param>
        /// <param name="squareClientSecret">Square (Weebly) Client Secret (optional)</param>
        /// <param name="squareRefreshToken">Square (Weebly) Refresh Token (optional)</param>
        /// <param name="squarespaceApiKey">Squarespace API Key (optional)</param>
        /// <param name="squarespaceClientId">Squarespace Connector Client ID (optional)</param>
        /// <param name="squarespaceClientSecret">Squarespace Connector Client Secret (optional)</param>
        /// <param name="squarespaceAccessToken">Squarespace access token (optional)</param>
        /// <param name="squarespaceRefreshToken">Squarespace refresh token (optional)</param>
        /// <param name="hybrisClientId">Omni Commerce Connector Client ID (optional)</param>
        /// <param name="hybrisClientSecret">Omni Commerce Connector Client Secret (optional)</param>
        /// <param name="hybrisUsername">User Name (optional)</param>
        /// <param name="hybrisPassword">User password (optional)</param>
        /// <param name="hybrisWebsites">Websites to stores mapping data (optional)</param>
        /// <param name="lightspeedApiKey">LightSpeed api key (optional)</param>
        /// <param name="lightspeedApiSecret">LightSpeed api secret (optional)</param>
        /// <param name="commercehqApiKey">CommerceHQ api key (optional)</param>
        /// <param name="commercehqApiPassword">CommerceHQ api password (optional)</param>
        /// <param name="wcConsumerKey">Woocommerce consumer key (optional)</param>
        /// <param name="wcConsumerSecret">Woocommerce consumer secret (optional)</param>
        /// <param name="magentoConsumerKey">Magento Consumer Key (optional)</param>
        /// <param name="magentoConsumerSecret">Magento Consumer Secret (optional)</param>
        /// <param name="magentoAccessToken">Magento Access Token (optional)</param>
        /// <param name="magentoTokenSecret">Magento Token Secret (optional)</param>
        /// <param name="prestashopWebserviceKey">Prestashop webservice key (optional)</param>
        /// <param name="wixAppId">Wix App ID (optional)</param>
        /// <param name="wixAppSecretKey">Wix App Secret Key (optional)</param>
        /// <param name="wixInstanceId">Wix Instance ID (optional)</param>
        /// <param name="wixRefreshToken">Wix refresh token (optional)</param>
        /// <param name="mercadoLibreAppId">Mercado Libre App ID (optional)</param>
        /// <param name="mercadoLibreAppSecretKey">Mercado Libre App Secret Key (optional)</param>
        /// <param name="mercadoLibreRefreshToken">Mercado Libre Refresh Token (optional)</param>
        /// <param name="zidClientId">Zid Client ID (optional)</param>
        /// <param name="zidClientSecret">Zid Client Secret (optional)</param>
        /// <param name="zidAccessToken">Zid Access Token (optional)</param>
        /// <param name="zidAuthorization">Zid Authorization (optional)</param>
        /// <param name="zidRefreshToken">Zid refresh token (optional)</param>
        /// <param name="flipkartClientId">Flipkart Client ID (optional)</param>
        /// <param name="flipkartClientSecret">Flipkart Client Secret (optional)</param>
        /// <param name="allegroClientId">Allegro Client ID (optional)</param>
        /// <param name="allegroClientSecret">Allegro Client Secret (optional)</param>
        /// <param name="allegroAccessToken">Allegro Access Token (optional)</param>
        /// <param name="allegroRefreshToken">Allegro Refresh Token (optional)</param>
        /// <param name="allegroEnvironment">Allegro Environment (optional, default to &quot;production&quot;)</param>
        /// <param name="zohoClientId">Zoho Client ID (optional)</param>
        /// <param name="zohoClientSecret">Zoho Client Secret (optional)</param>
        /// <param name="zohoRefreshToken">Zoho Refresh Token (optional)</param>
        /// <param name="zohoRegion">Zoho API endpoint Region (optional)</param>
        /// <param name="tiendanubeUserId">Tiendanube User ID (optional)</param>
        /// <param name="tiendanubeAccessToken">Tiendanube Access Token (optional)</param>
        /// <param name="tiendanubeClientSecret">Tiendanube Client Secret (optional)</param>
        /// <param name="ottoClientId">Otto Client ID (optional)</param>
        /// <param name="ottoClientSecret">Otto Client Secret (optional)</param>
        /// <param name="ottoAppId">Otto App ID (optional)</param>
        /// <param name="ottoRefreshToken">Otto Refresh Token (optional)</param>
        /// <param name="ottoEnvironment">Otto Environment (optional)</param>
        /// <param name="ottoAccessToken">Otto Access Token (optional)</param>
        /// <param name="tiktokshopAppKey">TikTok Shop App Key (optional)</param>
        /// <param name="tiktokshopAppSecret">TikTok Shop App Secret (optional)</param>
        /// <param name="tiktokshopRefreshToken">TikTok Shop Refresh Token (optional)</param>
        /// <param name="tiktokshopAccessToken">TikTok Shop Access Token (optional)</param>
        /// <param name="sallaClientId">Salla Client ID (optional)</param>
        /// <param name="sallaClientSecret">Salla Client Secret (optional)</param>
        /// <param name="sallaRefreshToken">Salla Refresh Token (optional)</param>
        /// <param name="sallaAccessToken">Salla Access Token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountConfigUpdate200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AccountConfigUpdate200Response>> AccountConfigUpdateWithHttpInfoAsync(bool? replaceParameters = default(bool?), string? newStoreUrl = default(string?), string? newStoreKey = default(string?), string? bridgeUrl = default(string?), string? storeRoot = default(string?), string? dbTablesPrefix = default(string?), string? userAgent = default(string?), string? var3dcartPrivateKey = default(string?), string? var3dcartAccessToken = default(string?), string? var3dcartapiApiKey = default(string?), string? amazonSpClientId = default(string?), string? amazonSpClientSecret = default(string?), string? amazonSpRefreshToken = default(string?), string? amazonSpAwsRegion = default(string?), string? amazonSpApiEnvironment = default(string?), string? amazonSellerId = default(string?), string? aspdotnetstorefrontApiUser = default(string?), string? aspdotnetstorefrontApiPass = default(string?), string? bigcommerceapiAdminAccount = default(string?), string? bigcommerceapiApiPath = default(string?), string? bigcommerceapiApiKey = default(string?), string? bigcommerceapiClientId = default(string?), string? bigcommerceapiAccessToken = default(string?), string? bigcommerceapiContext = default(string?), string? bolApiKey = default(string?), string? bolApiSecret = default(string?), int? bolRetailerId = default(int?), string? demandwareClientId = default(string?), string? demandwareApiPassword = default(string?), string? demandwareUserName = default(string?), string? demandwareUserPassword = default(string?), string? ebayClientId = default(string?), string? ebayClientSecret = default(string?), string? ebayRuname = default(string?), string? ebayAccessToken = default(string?), string? ebayRefreshToken = default(string?), string? ebayEnvironment = default(string?), int? ebaySiteId = default(int?), string? ecwidAcessToken = default(string?), string? ecwidStoreId = default(string?), string? lazadaAppId = default(string?), string? lazadaAppSecret = default(string?), string? lazadaRefreshToken = default(string?), string? lazadaRegion = default(string?), string? etsyKeystring = default(string?), string? etsySharedSecret = default(string?), string? etsyAccessToken = default(string?), string? etsyTokenSecret = default(string?), string? etsyClientId = default(string?), string? etsyRefreshToken = default(string?), string? facebookAppId = default(string?), string? facebookAppSecret = default(string?), string? facebookAccessToken = default(string?), string? facebookBusinessId = default(string?), string? netoApiKey = default(string?), string? netoApiUsername = default(string?), string? shoplineAccessToken = default(string?), string? shoplineAppKey = default(string?), string? shoplineAppSecret = default(string?), string? shoplineSharedSecret = default(string?), string? shopifyAccessToken = default(string?), string? shopifyApiKey = default(string?), string? shopifyApiPassword = default(string?), string? shopifySharedSecret = default(string?), string? shoplazzaAccessToken = default(string?), string? shoplazzaSharedSecret = default(string?), string? mivaAccessToken = default(string?), string? mivaSignature = default(string?), string? shopwareAccessKey = default(string?), string? shopwareApiKey = default(string?), string? shopwareApiSecret = default(string?), string? bigcartelUserName = default(string?), string? bigcartelPassword = default(string?), string? volusionLogin = default(string?), string? volusionPassword = default(string?), string? walmartClientId = default(string?), string? walmartClientSecret = default(string?), string? walmartEnvironment = default(string?), string? walmartChannelType = default(string?), string? walmartRegion = default(string?), string? squareClientId = default(string?), string? squareClientSecret = default(string?), string? squareRefreshToken = default(string?), string? squarespaceApiKey = default(string?), string? squarespaceClientId = default(string?), string? squarespaceClientSecret = default(string?), string? squarespaceAccessToken = default(string?), string? squarespaceRefreshToken = default(string?), string? hybrisClientId = default(string?), string? hybrisClientSecret = default(string?), string? hybrisUsername = default(string?), string? hybrisPassword = default(string?), List<string>? hybrisWebsites = default(List<string>?), string? lightspeedApiKey = default(string?), string? lightspeedApiSecret = default(string?), string? commercehqApiKey = default(string?), string? commercehqApiPassword = default(string?), string? wcConsumerKey = default(string?), string? wcConsumerSecret = default(string?), string? magentoConsumerKey = default(string?), string? magentoConsumerSecret = default(string?), string? magentoAccessToken = default(string?), string? magentoTokenSecret = default(string?), string? prestashopWebserviceKey = default(string?), string? wixAppId = default(string?), string? wixAppSecretKey = default(string?), string? wixInstanceId = default(string?), string? wixRefreshToken = default(string?), string? mercadoLibreAppId = default(string?), string? mercadoLibreAppSecretKey = default(string?), string? mercadoLibreRefreshToken = default(string?), int? zidClientId = default(int?), string? zidClientSecret = default(string?), string? zidAccessToken = default(string?), string? zidAuthorization = default(string?), string? zidRefreshToken = default(string?), string? flipkartClientId = default(string?), string? flipkartClientSecret = default(string?), string? allegroClientId = default(string?), string? allegroClientSecret = default(string?), string? allegroAccessToken = default(string?), string? allegroRefreshToken = default(string?), string? allegroEnvironment = default(string?), string? zohoClientId = default(string?), string? zohoClientSecret = default(string?), string? zohoRefreshToken = default(string?), string? zohoRegion = default(string?), int? tiendanubeUserId = default(int?), string? tiendanubeAccessToken = default(string?), string? tiendanubeClientSecret = default(string?), string? ottoClientId = default(string?), string? ottoClientSecret = default(string?), string? ottoAppId = default(string?), string? ottoRefreshToken = default(string?), string? ottoEnvironment = default(string?), string? ottoAccessToken = default(string?), string? tiktokshopAppKey = default(string?), string? tiktokshopAppSecret = default(string?), string? tiktokshopRefreshToken = default(string?), string? tiktokshopAccessToken = default(string?), string? sallaClientId = default(string?), string? sallaClientSecret = default(string?), string? sallaRefreshToken = default(string?), string? sallaAccessToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (replaceParameters != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "replace_parameters", replaceParameters));
            }
            if (newStoreUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "new_store_url", newStoreUrl));
            }
            if (newStoreKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "new_store_key", newStoreKey));
            }
            if (bridgeUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bridge_url", bridgeUrl));
            }
            if (storeRoot != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_root", storeRoot));
            }
            if (dbTablesPrefix != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "db_tables_prefix", dbTablesPrefix));
            }
            if (userAgent != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "user_agent", userAgent));
            }
            if (var3dcartPrivateKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "3dcart_private_key", var3dcartPrivateKey));
            }
            if (var3dcartAccessToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "3dcart_access_token", var3dcartAccessToken));
            }
            if (var3dcartapiApiKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "3dcartapi_api_key", var3dcartapiApiKey));
            }
            if (amazonSpClientId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "amazon_sp_client_id", amazonSpClientId));
            }
            if (amazonSpClientSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "amazon_sp_client_secret", amazonSpClientSecret));
            }
            if (amazonSpRefreshToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "amazon_sp_refresh_token", amazonSpRefreshToken));
            }
            if (amazonSpAwsRegion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "amazon_sp_aws_region", amazonSpAwsRegion));
            }
            if (amazonSpApiEnvironment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "amazon_sp_api_environment", amazonSpApiEnvironment));
            }
            if (amazonSellerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "amazon_seller_id", amazonSellerId));
            }
            if (aspdotnetstorefrontApiUser != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "aspdotnetstorefront_api_user", aspdotnetstorefrontApiUser));
            }
            if (aspdotnetstorefrontApiPass != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "aspdotnetstorefront_api_pass", aspdotnetstorefrontApiPass));
            }
            if (bigcommerceapiAdminAccount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bigcommerceapi_admin_account", bigcommerceapiAdminAccount));
            }
            if (bigcommerceapiApiPath != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bigcommerceapi_api_path", bigcommerceapiApiPath));
            }
            if (bigcommerceapiApiKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bigcommerceapi_api_key", bigcommerceapiApiKey));
            }
            if (bigcommerceapiClientId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bigcommerceapi_client_id", bigcommerceapiClientId));
            }
            if (bigcommerceapiAccessToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bigcommerceapi_access_token", bigcommerceapiAccessToken));
            }
            if (bigcommerceapiContext != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bigcommerceapi_context", bigcommerceapiContext));
            }
            if (bolApiKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bol_api_key", bolApiKey));
            }
            if (bolApiSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bol_api_secret", bolApiSecret));
            }
            if (bolRetailerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bol_retailer_id", bolRetailerId));
            }
            if (demandwareClientId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "demandware_client_id", demandwareClientId));
            }
            if (demandwareApiPassword != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "demandware_api_password", demandwareApiPassword));
            }
            if (demandwareUserName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "demandware_user_name", demandwareUserName));
            }
            if (demandwareUserPassword != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "demandware_user_password", demandwareUserPassword));
            }
            if (ebayClientId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ebay_client_id", ebayClientId));
            }
            if (ebayClientSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ebay_client_secret", ebayClientSecret));
            }
            if (ebayRuname != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ebay_runame", ebayRuname));
            }
            if (ebayAccessToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ebay_access_token", ebayAccessToken));
            }
            if (ebayRefreshToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ebay_refresh_token", ebayRefreshToken));
            }
            if (ebayEnvironment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ebay_environment", ebayEnvironment));
            }
            if (ebaySiteId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ebay_site_id", ebaySiteId));
            }
            if (ecwidAcessToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ecwid_acess_token", ecwidAcessToken));
            }
            if (ecwidStoreId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ecwid_store_id", ecwidStoreId));
            }
            if (lazadaAppId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lazada_app_id", lazadaAppId));
            }
            if (lazadaAppSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lazada_app_secret", lazadaAppSecret));
            }
            if (lazadaRefreshToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lazada_refresh_token", lazadaRefreshToken));
            }
            if (lazadaRegion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lazada_region", lazadaRegion));
            }
            if (etsyKeystring != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "etsy_keystring", etsyKeystring));
            }
            if (etsySharedSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "etsy_shared_secret", etsySharedSecret));
            }
            if (etsyAccessToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "etsy_access_token", etsyAccessToken));
            }
            if (etsyTokenSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "etsy_token_secret", etsyTokenSecret));
            }
            if (etsyClientId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "etsy_client_id", etsyClientId));
            }
            if (etsyRefreshToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "etsy_refresh_token", etsyRefreshToken));
            }
            if (facebookAppId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "facebook_app_id", facebookAppId));
            }
            if (facebookAppSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "facebook_app_secret", facebookAppSecret));
            }
            if (facebookAccessToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "facebook_access_token", facebookAccessToken));
            }
            if (facebookBusinessId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "facebook_business_id", facebookBusinessId));
            }
            if (netoApiKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "neto_api_key", netoApiKey));
            }
            if (netoApiUsername != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "neto_api_username", netoApiUsername));
            }
            if (shoplineAccessToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "shopline_access_token", shoplineAccessToken));
            }
            if (shoplineAppKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "shopline_app_key", shoplineAppKey));
            }
            if (shoplineAppSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "shopline_app_secret", shoplineAppSecret));
            }
            if (shoplineSharedSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "shopline_shared_secret", shoplineSharedSecret));
            }
            if (shopifyAccessToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "shopify_access_token", shopifyAccessToken));
            }
            if (shopifyApiKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "shopify_api_key", shopifyApiKey));
            }
            if (shopifyApiPassword != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "shopify_api_password", shopifyApiPassword));
            }
            if (shopifySharedSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "shopify_shared_secret", shopifySharedSecret));
            }
            if (shoplazzaAccessToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "shoplazza_access_token", shoplazzaAccessToken));
            }
            if (shoplazzaSharedSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "shoplazza_shared_secret", shoplazzaSharedSecret));
            }
            if (mivaAccessToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "miva_access_token", mivaAccessToken));
            }
            if (mivaSignature != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "miva_signature", mivaSignature));
            }
            if (shopwareAccessKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "shopware_access_key", shopwareAccessKey));
            }
            if (shopwareApiKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "shopware_api_key", shopwareApiKey));
            }
            if (shopwareApiSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "shopware_api_secret", shopwareApiSecret));
            }
            if (bigcartelUserName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bigcartel_user_name", bigcartelUserName));
            }
            if (bigcartelPassword != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bigcartel_password", bigcartelPassword));
            }
            if (volusionLogin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "volusion_login", volusionLogin));
            }
            if (volusionPassword != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "volusion_password", volusionPassword));
            }
            if (walmartClientId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "walmart_client_id", walmartClientId));
            }
            if (walmartClientSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "walmart_client_secret", walmartClientSecret));
            }
            if (walmartEnvironment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "walmart_environment", walmartEnvironment));
            }
            if (walmartChannelType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "walmart_channel_type", walmartChannelType));
            }
            if (walmartRegion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "walmart_region", walmartRegion));
            }
            if (squareClientId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "square_client_id", squareClientId));
            }
            if (squareClientSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "square_client_secret", squareClientSecret));
            }
            if (squareRefreshToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "square_refresh_token", squareRefreshToken));
            }
            if (squarespaceApiKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "squarespace_api_key", squarespaceApiKey));
            }
            if (squarespaceClientId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "squarespace_client_id", squarespaceClientId));
            }
            if (squarespaceClientSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "squarespace_client_secret", squarespaceClientSecret));
            }
            if (squarespaceAccessToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "squarespace_access_token", squarespaceAccessToken));
            }
            if (squarespaceRefreshToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "squarespace_refresh_token", squarespaceRefreshToken));
            }
            if (hybrisClientId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "hybris_client_id", hybrisClientId));
            }
            if (hybrisClientSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "hybris_client_secret", hybrisClientSecret));
            }
            if (hybrisUsername != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "hybris_username", hybrisUsername));
            }
            if (hybrisPassword != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "hybris_password", hybrisPassword));
            }
            if (hybrisWebsites != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "hybris_websites", hybrisWebsites));
            }
            if (lightspeedApiKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lightspeed_api_key", lightspeedApiKey));
            }
            if (lightspeedApiSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lightspeed_api_secret", lightspeedApiSecret));
            }
            if (commercehqApiKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "commercehq_api_key", commercehqApiKey));
            }
            if (commercehqApiPassword != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "commercehq_api_password", commercehqApiPassword));
            }
            if (wcConsumerKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "wc_consumer_key", wcConsumerKey));
            }
            if (wcConsumerSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "wc_consumer_secret", wcConsumerSecret));
            }
            if (magentoConsumerKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "magento_consumer_key", magentoConsumerKey));
            }
            if (magentoConsumerSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "magento_consumer_secret", magentoConsumerSecret));
            }
            if (magentoAccessToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "magento_access_token", magentoAccessToken));
            }
            if (magentoTokenSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "magento_token_secret", magentoTokenSecret));
            }
            if (prestashopWebserviceKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "prestashop_webservice_key", prestashopWebserviceKey));
            }
            if (wixAppId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "wix_app_id", wixAppId));
            }
            if (wixAppSecretKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "wix_app_secret_key", wixAppSecretKey));
            }
            if (wixInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "wix_instance_id", wixInstanceId));
            }
            if (wixRefreshToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "wix_refresh_token", wixRefreshToken));
            }
            if (mercadoLibreAppId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "mercado_libre_app_id", mercadoLibreAppId));
            }
            if (mercadoLibreAppSecretKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "mercado_libre_app_secret_key", mercadoLibreAppSecretKey));
            }
            if (mercadoLibreRefreshToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "mercado_libre_refresh_token", mercadoLibreRefreshToken));
            }
            if (zidClientId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "zid_client_id", zidClientId));
            }
            if (zidClientSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "zid_client_secret", zidClientSecret));
            }
            if (zidAccessToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "zid_access_token", zidAccessToken));
            }
            if (zidAuthorization != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "zid_authorization", zidAuthorization));
            }
            if (zidRefreshToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "zid_refresh_token", zidRefreshToken));
            }
            if (flipkartClientId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "flipkart_client_id", flipkartClientId));
            }
            if (flipkartClientSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "flipkart_client_secret", flipkartClientSecret));
            }
            if (allegroClientId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "allegro_client_id", allegroClientId));
            }
            if (allegroClientSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "allegro_client_secret", allegroClientSecret));
            }
            if (allegroAccessToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "allegro_access_token", allegroAccessToken));
            }
            if (allegroRefreshToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "allegro_refresh_token", allegroRefreshToken));
            }
            if (allegroEnvironment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "allegro_environment", allegroEnvironment));
            }
            if (zohoClientId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "zoho_client_id", zohoClientId));
            }
            if (zohoClientSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "zoho_client_secret", zohoClientSecret));
            }
            if (zohoRefreshToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "zoho_refresh_token", zohoRefreshToken));
            }
            if (zohoRegion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "zoho_region", zohoRegion));
            }
            if (tiendanubeUserId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tiendanube_user_id", tiendanubeUserId));
            }
            if (tiendanubeAccessToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tiendanube_access_token", tiendanubeAccessToken));
            }
            if (tiendanubeClientSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tiendanube_client_secret", tiendanubeClientSecret));
            }
            if (ottoClientId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "otto_client_id", ottoClientId));
            }
            if (ottoClientSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "otto_client_secret", ottoClientSecret));
            }
            if (ottoAppId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "otto_app_id", ottoAppId));
            }
            if (ottoRefreshToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "otto_refresh_token", ottoRefreshToken));
            }
            if (ottoEnvironment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "otto_environment", ottoEnvironment));
            }
            if (ottoAccessToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "otto_access_token", ottoAccessToken));
            }
            if (tiktokshopAppKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tiktokshop_app_key", tiktokshopAppKey));
            }
            if (tiktokshopAppSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tiktokshop_app_secret", tiktokshopAppSecret));
            }
            if (tiktokshopRefreshToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tiktokshop_refresh_token", tiktokshopRefreshToken));
            }
            if (tiktokshopAccessToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tiktokshop_access_token", tiktokshopAccessToken));
            }
            if (sallaClientId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "salla_client_id", sallaClientId));
            }
            if (sallaClientSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "salla_client_secret", sallaClientSecret));
            }
            if (sallaRefreshToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "salla_refresh_token", sallaRefreshToken));
            }
            if (sallaAccessToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "salla_access_token", sallaAccessToken));
            }

            localVarRequestOptions.Operation = "AccountApi.AccountConfigUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<AccountConfigUpdate200Response>("/account.config.update.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountConfigUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// account.failed_webhooks If the callback of your service for some reason could not accept webhooks from API2Cart, then with the help of this method you can get a list of missed webhooks to perform synchronization again using entity_id. Please note that we keep such records for 24 hours.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="ids">List of сomma-separated webhook ids (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountFailedWebhooks200Response</returns>
        public AccountFailedWebhooks200Response AccountFailedWebhooks(int? start = default(int?), int? count = default(int?), string? ids = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AccountFailedWebhooks200Response> localVarResponse = AccountFailedWebhooksWithHttpInfo(start, count, ids);
            return localVarResponse.Data;
        }

        /// <summary>
        /// account.failed_webhooks If the callback of your service for some reason could not accept webhooks from API2Cart, then with the help of this method you can get a list of missed webhooks to perform synchronization again using entity_id. Please note that we keep such records for 24 hours.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="ids">List of сomma-separated webhook ids (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountFailedWebhooks200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<AccountFailedWebhooks200Response> AccountFailedWebhooksWithHttpInfo(int? start = default(int?), int? count = default(int?), string? ids = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }

            localVarRequestOptions.Operation = "AccountApi.AccountFailedWebhooks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AccountFailedWebhooks200Response>("/account.failed_webhooks.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountFailedWebhooks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// account.failed_webhooks If the callback of your service for some reason could not accept webhooks from API2Cart, then with the help of this method you can get a list of missed webhooks to perform synchronization again using entity_id. Please note that we keep such records for 24 hours.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="ids">List of сomma-separated webhook ids (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountFailedWebhooks200Response</returns>
        public async System.Threading.Tasks.Task<AccountFailedWebhooks200Response> AccountFailedWebhooksAsync(int? start = default(int?), int? count = default(int?), string? ids = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AccountFailedWebhooks200Response> localVarResponse = await AccountFailedWebhooksWithHttpInfoAsync(start, count, ids, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// account.failed_webhooks If the callback of your service for some reason could not accept webhooks from API2Cart, then with the help of this method you can get a list of missed webhooks to perform synchronization again using entity_id. Please note that we keep such records for 24 hours.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="ids">List of сomma-separated webhook ids (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountFailedWebhooks200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AccountFailedWebhooks200Response>> AccountFailedWebhooksWithHttpInfoAsync(int? start = default(int?), int? count = default(int?), string? ids = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }

            localVarRequestOptions.Operation = "AccountApi.AccountFailedWebhooks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AccountFailedWebhooks200Response>("/account.failed_webhooks.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountFailedWebhooks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// account.supported_platforms Use this method to retrieve a list of supported platforms and the sets of parameters required for connecting to each of them. Note: some platforms may have multiple connection methods so that the response will contain multiple sets of parameters.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountSupportedPlatforms200Response</returns>
        public AccountSupportedPlatforms200Response AccountSupportedPlatforms(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AccountSupportedPlatforms200Response> localVarResponse = AccountSupportedPlatformsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// account.supported_platforms Use this method to retrieve a list of supported platforms and the sets of parameters required for connecting to each of them. Note: some platforms may have multiple connection methods so that the response will contain multiple sets of parameters.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountSupportedPlatforms200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<AccountSupportedPlatforms200Response> AccountSupportedPlatformsWithHttpInfo(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AccountApi.AccountSupportedPlatforms";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AccountSupportedPlatforms200Response>("/account.supported_platforms.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountSupportedPlatforms", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// account.supported_platforms Use this method to retrieve a list of supported platforms and the sets of parameters required for connecting to each of them. Note: some platforms may have multiple connection methods so that the response will contain multiple sets of parameters.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountSupportedPlatforms200Response</returns>
        public async System.Threading.Tasks.Task<AccountSupportedPlatforms200Response> AccountSupportedPlatformsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AccountSupportedPlatforms200Response> localVarResponse = await AccountSupportedPlatformsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// account.supported_platforms Use this method to retrieve a list of supported platforms and the sets of parameters required for connecting to each of them. Note: some platforms may have multiple connection methods so that the response will contain multiple sets of parameters.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountSupportedPlatforms200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AccountSupportedPlatforms200Response>> AccountSupportedPlatformsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AccountApi.AccountSupportedPlatforms";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AccountSupportedPlatforms200Response>("/account.supported_platforms.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountSupportedPlatforms", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
