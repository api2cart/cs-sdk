/*
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAttributeApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// attribute.add
        /// </summary>
        /// <remarks>
        /// Add new attribute
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Defines attribute&#39;s type</param>
        /// <param name="name">Defines attributes&#39;s name</param>
        /// <param name="code">Entity code (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="visible">Set visibility status (optional, default to false)</param>
        /// <param name="required">Defines if the option is required (optional, default to false)</param>
        /// <param name="position">Attribute&#x60;s position (optional, default to 0)</param>
        /// <param name="attributeGroupId">Filter by attribute_group_id (optional)</param>
        /// <param name="isGlobal">Attribute saving scope (optional, default to &quot;Store&quot;)</param>
        /// <param name="isSearchable">Use attribute in Quick Search (optional, default to false)</param>
        /// <param name="isFilterable">Use In Layered Navigation (optional, default to &quot;No&quot;)</param>
        /// <param name="isComparable">Comparable on Front-end (optional, default to false)</param>
        /// <param name="isHtmlAllowedOnFront">Allow HTML Tags on Frontend (optional, default to false)</param>
        /// <param name="isFilterableInSearch">Use In Search Results Layered Navigation (optional, default to false)</param>
        /// <param name="isConfigurable">Use To Create Configurable Product (optional, default to false)</param>
        /// <param name="isVisibleInAdvancedSearch">Use in Advanced Search (optional, default to false)</param>
        /// <param name="isUsedForPromoRules">Use for Promo Rule Conditions (optional, default to false)</param>
        /// <param name="usedInProductListing">Used in Product Listing (optional, default to false)</param>
        /// <param name="usedForSortBy">Used for Sorting in Product Listing (optional, default to false)</param>
        /// <param name="applyTo">Types of products which can have this attribute (optional, default to &quot;all_types&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttributeAdd200Response</returns>
        AttributeAdd200Response AttributeAdd(string type, string name, string? code = default(string?), string? storeId = default(string?), string? langId = default(string?), bool? visible = default(bool?), bool? required = default(bool?), int? position = default(int?), string? attributeGroupId = default(string?), string? isGlobal = default(string?), bool? isSearchable = default(bool?), string? isFilterable = default(string?), bool? isComparable = default(bool?), bool? isHtmlAllowedOnFront = default(bool?), bool? isFilterableInSearch = default(bool?), bool? isConfigurable = default(bool?), bool? isVisibleInAdvancedSearch = default(bool?), bool? isUsedForPromoRules = default(bool?), bool? usedInProductListing = default(bool?), bool? usedForSortBy = default(bool?), string? applyTo = default(string?), int operationIndex = 0);

        /// <summary>
        /// attribute.add
        /// </summary>
        /// <remarks>
        /// Add new attribute
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Defines attribute&#39;s type</param>
        /// <param name="name">Defines attributes&#39;s name</param>
        /// <param name="code">Entity code (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="visible">Set visibility status (optional, default to false)</param>
        /// <param name="required">Defines if the option is required (optional, default to false)</param>
        /// <param name="position">Attribute&#x60;s position (optional, default to 0)</param>
        /// <param name="attributeGroupId">Filter by attribute_group_id (optional)</param>
        /// <param name="isGlobal">Attribute saving scope (optional, default to &quot;Store&quot;)</param>
        /// <param name="isSearchable">Use attribute in Quick Search (optional, default to false)</param>
        /// <param name="isFilterable">Use In Layered Navigation (optional, default to &quot;No&quot;)</param>
        /// <param name="isComparable">Comparable on Front-end (optional, default to false)</param>
        /// <param name="isHtmlAllowedOnFront">Allow HTML Tags on Frontend (optional, default to false)</param>
        /// <param name="isFilterableInSearch">Use In Search Results Layered Navigation (optional, default to false)</param>
        /// <param name="isConfigurable">Use To Create Configurable Product (optional, default to false)</param>
        /// <param name="isVisibleInAdvancedSearch">Use in Advanced Search (optional, default to false)</param>
        /// <param name="isUsedForPromoRules">Use for Promo Rule Conditions (optional, default to false)</param>
        /// <param name="usedInProductListing">Used in Product Listing (optional, default to false)</param>
        /// <param name="usedForSortBy">Used for Sorting in Product Listing (optional, default to false)</param>
        /// <param name="applyTo">Types of products which can have this attribute (optional, default to &quot;all_types&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttributeAdd200Response</returns>
        ApiResponse<AttributeAdd200Response> AttributeAddWithHttpInfo(string type, string name, string? code = default(string?), string? storeId = default(string?), string? langId = default(string?), bool? visible = default(bool?), bool? required = default(bool?), int? position = default(int?), string? attributeGroupId = default(string?), string? isGlobal = default(string?), bool? isSearchable = default(bool?), string? isFilterable = default(string?), bool? isComparable = default(bool?), bool? isHtmlAllowedOnFront = default(bool?), bool? isFilterableInSearch = default(bool?), bool? isConfigurable = default(bool?), bool? isVisibleInAdvancedSearch = default(bool?), bool? isUsedForPromoRules = default(bool?), bool? usedInProductListing = default(bool?), bool? usedForSortBy = default(bool?), string? applyTo = default(string?), int operationIndex = 0);
        /// <summary>
        /// attribute.assign.group
        /// </summary>
        /// <remarks>
        /// Assign attribute to the group
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="groupId">Attribute group_id</param>
        /// <param name="attributeSetId">Attribute set id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttributeAssignGroup200Response</returns>
        AttributeAssignGroup200Response AttributeAssignGroup(string id, string groupId, string? attributeSetId = default(string?), int operationIndex = 0);

        /// <summary>
        /// attribute.assign.group
        /// </summary>
        /// <remarks>
        /// Assign attribute to the group
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="groupId">Attribute group_id</param>
        /// <param name="attributeSetId">Attribute set id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttributeAssignGroup200Response</returns>
        ApiResponse<AttributeAssignGroup200Response> AttributeAssignGroupWithHttpInfo(string id, string groupId, string? attributeSetId = default(string?), int operationIndex = 0);
        /// <summary>
        /// attribute.assign.set
        /// </summary>
        /// <remarks>
        /// Assign attribute to the attribute set
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="attributeSetId">Attribute set id</param>
        /// <param name="groupId">Attribute group_id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttributeAssignGroup200Response</returns>
        AttributeAssignGroup200Response AttributeAssignSet(string id, string attributeSetId, string? groupId = default(string?), int operationIndex = 0);

        /// <summary>
        /// attribute.assign.set
        /// </summary>
        /// <remarks>
        /// Assign attribute to the attribute set
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="attributeSetId">Attribute set id</param>
        /// <param name="groupId">Attribute group_id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttributeAssignGroup200Response</returns>
        ApiResponse<AttributeAssignGroup200Response> AttributeAssignSetWithHttpInfo(string id, string attributeSetId, string? groupId = default(string?), int operationIndex = 0);
        /// <summary>
        /// attribute.attributeset.list
        /// </summary>
        /// <remarks>
        /// Get attribute_set list
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelResponseAttributeAttributesetList</returns>
        ModelResponseAttributeAttributesetList AttributeAttributesetList(int? start = default(int?), int? count = default(int?), string? varParams = default(string?), string? exclude = default(string?), string? responseFields = default(string?), int operationIndex = 0);

        /// <summary>
        /// attribute.attributeset.list
        /// </summary>
        /// <remarks>
        /// Get attribute_set list
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelResponseAttributeAttributesetList</returns>
        ApiResponse<ModelResponseAttributeAttributesetList> AttributeAttributesetListWithHttpInfo(int? start = default(int?), int? count = default(int?), string? varParams = default(string?), string? exclude = default(string?), string? responseFields = default(string?), int operationIndex = 0);
        /// <summary>
        /// attribute.count
        /// </summary>
        /// <remarks>
        /// Get attributes count
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Defines attribute&#39;s type (optional)</param>
        /// <param name="attributeSetId">Filter items by attribute set id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="visible">Filter items by visibility status (optional)</param>
        /// <param name="required">Defines if the option is required (optional)</param>
        /// <param name="varSystem">True if attribute is system (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttributeCount200Response</returns>
        AttributeCount200Response AttributeCount(string? type = default(string?), string? attributeSetId = default(string?), string? storeId = default(string?), string? langId = default(string?), bool? visible = default(bool?), bool? required = default(bool?), bool? varSystem = default(bool?), int operationIndex = 0);

        /// <summary>
        /// attribute.count
        /// </summary>
        /// <remarks>
        /// Get attributes count
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Defines attribute&#39;s type (optional)</param>
        /// <param name="attributeSetId">Filter items by attribute set id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="visible">Filter items by visibility status (optional)</param>
        /// <param name="required">Defines if the option is required (optional)</param>
        /// <param name="varSystem">True if attribute is system (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttributeCount200Response</returns>
        ApiResponse<AttributeCount200Response> AttributeCountWithHttpInfo(string? type = default(string?), string? attributeSetId = default(string?), string? storeId = default(string?), string? langId = default(string?), bool? visible = default(bool?), bool? required = default(bool?), bool? varSystem = default(bool?), int operationIndex = 0);
        /// <summary>
        /// attribute.delete
        /// </summary>
        /// <remarks>
        /// Delete attribute from store
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttributeDelete200Response</returns>
        AttributeDelete200Response AttributeDelete(string id, string? storeId = default(string?), int operationIndex = 0);

        /// <summary>
        /// attribute.delete
        /// </summary>
        /// <remarks>
        /// Delete attribute from store
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttributeDelete200Response</returns>
        ApiResponse<AttributeDelete200Response> AttributeDeleteWithHttpInfo(string id, string? storeId = default(string?), int operationIndex = 0);
        /// <summary>
        /// attribute.group.list
        /// </summary>
        /// <remarks>
        /// Get attribute group list
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="attributeSetId">Attribute set id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelResponseAttributeGroupList</returns>
        ModelResponseAttributeGroupList AttributeGroupList(int? start = default(int?), int? count = default(int?), string? langId = default(string?), string? varParams = default(string?), string? exclude = default(string?), string? responseFields = default(string?), string? attributeSetId = default(string?), int operationIndex = 0);

        /// <summary>
        /// attribute.group.list
        /// </summary>
        /// <remarks>
        /// Get attribute group list
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="attributeSetId">Attribute set id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelResponseAttributeGroupList</returns>
        ApiResponse<ModelResponseAttributeGroupList> AttributeGroupListWithHttpInfo(int? start = default(int?), int? count = default(int?), string? langId = default(string?), string? varParams = default(string?), string? exclude = default(string?), string? responseFields = default(string?), string? attributeSetId = default(string?), int operationIndex = 0);
        /// <summary>
        /// attribute.info
        /// </summary>
        /// <remarks>
        /// Get information about a specific global attribute by its ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="attributeSetId">Attribute set id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttributeInfo200Response</returns>
        AttributeInfo200Response AttributeInfo(string id, string? attributeSetId = default(string?), string? storeId = default(string?), string? langId = default(string?), string? varParams = default(string?), string? exclude = default(string?), string? responseFields = default(string?), int operationIndex = 0);

        /// <summary>
        /// attribute.info
        /// </summary>
        /// <remarks>
        /// Get information about a specific global attribute by its ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="attributeSetId">Attribute set id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttributeInfo200Response</returns>
        ApiResponse<AttributeInfo200Response> AttributeInfoWithHttpInfo(string id, string? attributeSetId = default(string?), string? storeId = default(string?), string? langId = default(string?), string? varParams = default(string?), string? exclude = default(string?), string? responseFields = default(string?), int operationIndex = 0);
        /// <summary>
        /// attribute.list
        /// </summary>
        /// <remarks>
        /// Get a list of global attributes.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="type">Defines attribute&#39;s type (optional)</param>
        /// <param name="attributeIds">Filter attributes by ids (optional)</param>
        /// <param name="attributeSetId">Filter items by attribute set id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Retrieves attributes on specified language id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name,code,type&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="visible">Filter items by visibility status (optional)</param>
        /// <param name="required">Defines if the option is required (optional)</param>
        /// <param name="varSystem">True if attribute is system (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelResponseAttributeList</returns>
        ModelResponseAttributeList AttributeList(int? start = default(int?), int? count = default(int?), string? type = default(string?), string? attributeIds = default(string?), string? attributeSetId = default(string?), string? storeId = default(string?), string? langId = default(string?), string? varParams = default(string?), string? exclude = default(string?), string? responseFields = default(string?), bool? visible = default(bool?), bool? required = default(bool?), bool? varSystem = default(bool?), int operationIndex = 0);

        /// <summary>
        /// attribute.list
        /// </summary>
        /// <remarks>
        /// Get a list of global attributes.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="type">Defines attribute&#39;s type (optional)</param>
        /// <param name="attributeIds">Filter attributes by ids (optional)</param>
        /// <param name="attributeSetId">Filter items by attribute set id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Retrieves attributes on specified language id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name,code,type&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="visible">Filter items by visibility status (optional)</param>
        /// <param name="required">Defines if the option is required (optional)</param>
        /// <param name="varSystem">True if attribute is system (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelResponseAttributeList</returns>
        ApiResponse<ModelResponseAttributeList> AttributeListWithHttpInfo(int? start = default(int?), int? count = default(int?), string? type = default(string?), string? attributeIds = default(string?), string? attributeSetId = default(string?), string? storeId = default(string?), string? langId = default(string?), string? varParams = default(string?), string? exclude = default(string?), string? responseFields = default(string?), bool? visible = default(bool?), bool? required = default(bool?), bool? varSystem = default(bool?), int operationIndex = 0);
        /// <summary>
        /// attribute.type.list
        /// </summary>
        /// <remarks>
        /// Get list of supported attributes types
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttributeTypeList200Response</returns>
        AttributeTypeList200Response AttributeTypeList(int operationIndex = 0);

        /// <summary>
        /// attribute.type.list
        /// </summary>
        /// <remarks>
        /// Get list of supported attributes types
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttributeTypeList200Response</returns>
        ApiResponse<AttributeTypeList200Response> AttributeTypeListWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// attribute.unassign.group
        /// </summary>
        /// <remarks>
        /// Unassign attribute from group
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="groupId">Customer group_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttributeUnassignGroup200Response</returns>
        AttributeUnassignGroup200Response AttributeUnassignGroup(string id, string groupId, int operationIndex = 0);

        /// <summary>
        /// attribute.unassign.group
        /// </summary>
        /// <remarks>
        /// Unassign attribute from group
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="groupId">Customer group_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttributeUnassignGroup200Response</returns>
        ApiResponse<AttributeUnassignGroup200Response> AttributeUnassignGroupWithHttpInfo(string id, string groupId, int operationIndex = 0);
        /// <summary>
        /// attribute.unassign.set
        /// </summary>
        /// <remarks>
        /// Unassign attribute from attribute set
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="attributeSetId">Attribute set id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttributeUnassignGroup200Response</returns>
        AttributeUnassignGroup200Response AttributeUnassignSet(string id, string attributeSetId, int operationIndex = 0);

        /// <summary>
        /// attribute.unassign.set
        /// </summary>
        /// <remarks>
        /// Unassign attribute from attribute set
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="attributeSetId">Attribute set id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttributeUnassignGroup200Response</returns>
        ApiResponse<AttributeUnassignGroup200Response> AttributeUnassignSetWithHttpInfo(string id, string attributeSetId, int operationIndex = 0);
        /// <summary>
        /// attribute.update
        /// </summary>
        /// <remarks>
        /// Update attribute data
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="name">Defines new attributes&#39;s name</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttributeUpdate200Response</returns>
        AttributeUpdate200Response AttributeUpdate(string id, string name, string? storeId = default(string?), string? langId = default(string?), int operationIndex = 0);

        /// <summary>
        /// attribute.update
        /// </summary>
        /// <remarks>
        /// Update attribute data
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="name">Defines new attributes&#39;s name</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttributeUpdate200Response</returns>
        ApiResponse<AttributeUpdate200Response> AttributeUpdateWithHttpInfo(string id, string name, string? storeId = default(string?), string? langId = default(string?), int operationIndex = 0);
        /// <summary>
        /// attribute.value.add
        /// </summary>
        /// <remarks>
        /// Add new value to attribute.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">Attribute Id</param>
        /// <param name="name">Defines attribute value&#39;s name</param>
        /// <param name="code">Entity code (optional)</param>
        /// <param name="description">Defines attribute value&#39;s description (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttributeAdd200Response</returns>
        AttributeAdd200Response AttributeValueAdd(string attributeId, string name, string? code = default(string?), string? description = default(string?), string? storeId = default(string?), string? langId = default(string?), int operationIndex = 0);

        /// <summary>
        /// attribute.value.add
        /// </summary>
        /// <remarks>
        /// Add new value to attribute.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">Attribute Id</param>
        /// <param name="name">Defines attribute value&#39;s name</param>
        /// <param name="code">Entity code (optional)</param>
        /// <param name="description">Defines attribute value&#39;s description (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttributeAdd200Response</returns>
        ApiResponse<AttributeAdd200Response> AttributeValueAddWithHttpInfo(string attributeId, string name, string? code = default(string?), string? description = default(string?), string? storeId = default(string?), string? langId = default(string?), int operationIndex = 0);
        /// <summary>
        /// attribute.value.delete
        /// </summary>
        /// <remarks>
        /// Delete attribute value.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="attributeId">Attribute Id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttributeValueDelete200Response</returns>
        AttributeValueDelete200Response AttributeValueDelete(string id, string attributeId, string? storeId = default(string?), int operationIndex = 0);

        /// <summary>
        /// attribute.value.delete
        /// </summary>
        /// <remarks>
        /// Delete attribute value.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="attributeId">Attribute Id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttributeValueDelete200Response</returns>
        ApiResponse<AttributeValueDelete200Response> AttributeValueDeleteWithHttpInfo(string id, string attributeId, string? storeId = default(string?), int operationIndex = 0);
        /// <summary>
        /// attribute.value.update
        /// </summary>
        /// <remarks>
        /// Update attribute value.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Defines attribute value&#39;s id</param>
        /// <param name="attributeId">Attribute Id</param>
        /// <param name="name">Defines attribute value&#39;s name (optional)</param>
        /// <param name="description">Defines new attribute value&#39;s description (optional)</param>
        /// <param name="code">Entity code (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttributeUpdate200Response</returns>
        AttributeUpdate200Response AttributeValueUpdate(string id, string attributeId, string? name = default(string?), string? description = default(string?), string? code = default(string?), string? storeId = default(string?), string? langId = default(string?), int operationIndex = 0);

        /// <summary>
        /// attribute.value.update
        /// </summary>
        /// <remarks>
        /// Update attribute value.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Defines attribute value&#39;s id</param>
        /// <param name="attributeId">Attribute Id</param>
        /// <param name="name">Defines attribute value&#39;s name (optional)</param>
        /// <param name="description">Defines new attribute value&#39;s description (optional)</param>
        /// <param name="code">Entity code (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttributeUpdate200Response</returns>
        ApiResponse<AttributeUpdate200Response> AttributeValueUpdateWithHttpInfo(string id, string attributeId, string? name = default(string?), string? description = default(string?), string? code = default(string?), string? storeId = default(string?), string? langId = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAttributeApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// attribute.add
        /// </summary>
        /// <remarks>
        /// Add new attribute
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Defines attribute&#39;s type</param>
        /// <param name="name">Defines attributes&#39;s name</param>
        /// <param name="code">Entity code (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="visible">Set visibility status (optional, default to false)</param>
        /// <param name="required">Defines if the option is required (optional, default to false)</param>
        /// <param name="position">Attribute&#x60;s position (optional, default to 0)</param>
        /// <param name="attributeGroupId">Filter by attribute_group_id (optional)</param>
        /// <param name="isGlobal">Attribute saving scope (optional, default to &quot;Store&quot;)</param>
        /// <param name="isSearchable">Use attribute in Quick Search (optional, default to false)</param>
        /// <param name="isFilterable">Use In Layered Navigation (optional, default to &quot;No&quot;)</param>
        /// <param name="isComparable">Comparable on Front-end (optional, default to false)</param>
        /// <param name="isHtmlAllowedOnFront">Allow HTML Tags on Frontend (optional, default to false)</param>
        /// <param name="isFilterableInSearch">Use In Search Results Layered Navigation (optional, default to false)</param>
        /// <param name="isConfigurable">Use To Create Configurable Product (optional, default to false)</param>
        /// <param name="isVisibleInAdvancedSearch">Use in Advanced Search (optional, default to false)</param>
        /// <param name="isUsedForPromoRules">Use for Promo Rule Conditions (optional, default to false)</param>
        /// <param name="usedInProductListing">Used in Product Listing (optional, default to false)</param>
        /// <param name="usedForSortBy">Used for Sorting in Product Listing (optional, default to false)</param>
        /// <param name="applyTo">Types of products which can have this attribute (optional, default to &quot;all_types&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttributeAdd200Response</returns>
        System.Threading.Tasks.Task<AttributeAdd200Response> AttributeAddAsync(string type, string name, string? code = default(string?), string? storeId = default(string?), string? langId = default(string?), bool? visible = default(bool?), bool? required = default(bool?), int? position = default(int?), string? attributeGroupId = default(string?), string? isGlobal = default(string?), bool? isSearchable = default(bool?), string? isFilterable = default(string?), bool? isComparable = default(bool?), bool? isHtmlAllowedOnFront = default(bool?), bool? isFilterableInSearch = default(bool?), bool? isConfigurable = default(bool?), bool? isVisibleInAdvancedSearch = default(bool?), bool? isUsedForPromoRules = default(bool?), bool? usedInProductListing = default(bool?), bool? usedForSortBy = default(bool?), string? applyTo = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// attribute.add
        /// </summary>
        /// <remarks>
        /// Add new attribute
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Defines attribute&#39;s type</param>
        /// <param name="name">Defines attributes&#39;s name</param>
        /// <param name="code">Entity code (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="visible">Set visibility status (optional, default to false)</param>
        /// <param name="required">Defines if the option is required (optional, default to false)</param>
        /// <param name="position">Attribute&#x60;s position (optional, default to 0)</param>
        /// <param name="attributeGroupId">Filter by attribute_group_id (optional)</param>
        /// <param name="isGlobal">Attribute saving scope (optional, default to &quot;Store&quot;)</param>
        /// <param name="isSearchable">Use attribute in Quick Search (optional, default to false)</param>
        /// <param name="isFilterable">Use In Layered Navigation (optional, default to &quot;No&quot;)</param>
        /// <param name="isComparable">Comparable on Front-end (optional, default to false)</param>
        /// <param name="isHtmlAllowedOnFront">Allow HTML Tags on Frontend (optional, default to false)</param>
        /// <param name="isFilterableInSearch">Use In Search Results Layered Navigation (optional, default to false)</param>
        /// <param name="isConfigurable">Use To Create Configurable Product (optional, default to false)</param>
        /// <param name="isVisibleInAdvancedSearch">Use in Advanced Search (optional, default to false)</param>
        /// <param name="isUsedForPromoRules">Use for Promo Rule Conditions (optional, default to false)</param>
        /// <param name="usedInProductListing">Used in Product Listing (optional, default to false)</param>
        /// <param name="usedForSortBy">Used for Sorting in Product Listing (optional, default to false)</param>
        /// <param name="applyTo">Types of products which can have this attribute (optional, default to &quot;all_types&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttributeAdd200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttributeAdd200Response>> AttributeAddWithHttpInfoAsync(string type, string name, string? code = default(string?), string? storeId = default(string?), string? langId = default(string?), bool? visible = default(bool?), bool? required = default(bool?), int? position = default(int?), string? attributeGroupId = default(string?), string? isGlobal = default(string?), bool? isSearchable = default(bool?), string? isFilterable = default(string?), bool? isComparable = default(bool?), bool? isHtmlAllowedOnFront = default(bool?), bool? isFilterableInSearch = default(bool?), bool? isConfigurable = default(bool?), bool? isVisibleInAdvancedSearch = default(bool?), bool? isUsedForPromoRules = default(bool?), bool? usedInProductListing = default(bool?), bool? usedForSortBy = default(bool?), string? applyTo = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// attribute.assign.group
        /// </summary>
        /// <remarks>
        /// Assign attribute to the group
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="groupId">Attribute group_id</param>
        /// <param name="attributeSetId">Attribute set id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttributeAssignGroup200Response</returns>
        System.Threading.Tasks.Task<AttributeAssignGroup200Response> AttributeAssignGroupAsync(string id, string groupId, string? attributeSetId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// attribute.assign.group
        /// </summary>
        /// <remarks>
        /// Assign attribute to the group
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="groupId">Attribute group_id</param>
        /// <param name="attributeSetId">Attribute set id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttributeAssignGroup200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttributeAssignGroup200Response>> AttributeAssignGroupWithHttpInfoAsync(string id, string groupId, string? attributeSetId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// attribute.assign.set
        /// </summary>
        /// <remarks>
        /// Assign attribute to the attribute set
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="attributeSetId">Attribute set id</param>
        /// <param name="groupId">Attribute group_id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttributeAssignGroup200Response</returns>
        System.Threading.Tasks.Task<AttributeAssignGroup200Response> AttributeAssignSetAsync(string id, string attributeSetId, string? groupId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// attribute.assign.set
        /// </summary>
        /// <remarks>
        /// Assign attribute to the attribute set
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="attributeSetId">Attribute set id</param>
        /// <param name="groupId">Attribute group_id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttributeAssignGroup200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttributeAssignGroup200Response>> AttributeAssignSetWithHttpInfoAsync(string id, string attributeSetId, string? groupId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// attribute.attributeset.list
        /// </summary>
        /// <remarks>
        /// Get attribute_set list
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelResponseAttributeAttributesetList</returns>
        System.Threading.Tasks.Task<ModelResponseAttributeAttributesetList> AttributeAttributesetListAsync(int? start = default(int?), int? count = default(int?), string? varParams = default(string?), string? exclude = default(string?), string? responseFields = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// attribute.attributeset.list
        /// </summary>
        /// <remarks>
        /// Get attribute_set list
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelResponseAttributeAttributesetList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelResponseAttributeAttributesetList>> AttributeAttributesetListWithHttpInfoAsync(int? start = default(int?), int? count = default(int?), string? varParams = default(string?), string? exclude = default(string?), string? responseFields = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// attribute.count
        /// </summary>
        /// <remarks>
        /// Get attributes count
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Defines attribute&#39;s type (optional)</param>
        /// <param name="attributeSetId">Filter items by attribute set id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="visible">Filter items by visibility status (optional)</param>
        /// <param name="required">Defines if the option is required (optional)</param>
        /// <param name="varSystem">True if attribute is system (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttributeCount200Response</returns>
        System.Threading.Tasks.Task<AttributeCount200Response> AttributeCountAsync(string? type = default(string?), string? attributeSetId = default(string?), string? storeId = default(string?), string? langId = default(string?), bool? visible = default(bool?), bool? required = default(bool?), bool? varSystem = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// attribute.count
        /// </summary>
        /// <remarks>
        /// Get attributes count
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Defines attribute&#39;s type (optional)</param>
        /// <param name="attributeSetId">Filter items by attribute set id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="visible">Filter items by visibility status (optional)</param>
        /// <param name="required">Defines if the option is required (optional)</param>
        /// <param name="varSystem">True if attribute is system (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttributeCount200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttributeCount200Response>> AttributeCountWithHttpInfoAsync(string? type = default(string?), string? attributeSetId = default(string?), string? storeId = default(string?), string? langId = default(string?), bool? visible = default(bool?), bool? required = default(bool?), bool? varSystem = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// attribute.delete
        /// </summary>
        /// <remarks>
        /// Delete attribute from store
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttributeDelete200Response</returns>
        System.Threading.Tasks.Task<AttributeDelete200Response> AttributeDeleteAsync(string id, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// attribute.delete
        /// </summary>
        /// <remarks>
        /// Delete attribute from store
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttributeDelete200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttributeDelete200Response>> AttributeDeleteWithHttpInfoAsync(string id, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// attribute.group.list
        /// </summary>
        /// <remarks>
        /// Get attribute group list
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="attributeSetId">Attribute set id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelResponseAttributeGroupList</returns>
        System.Threading.Tasks.Task<ModelResponseAttributeGroupList> AttributeGroupListAsync(int? start = default(int?), int? count = default(int?), string? langId = default(string?), string? varParams = default(string?), string? exclude = default(string?), string? responseFields = default(string?), string? attributeSetId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// attribute.group.list
        /// </summary>
        /// <remarks>
        /// Get attribute group list
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="attributeSetId">Attribute set id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelResponseAttributeGroupList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelResponseAttributeGroupList>> AttributeGroupListWithHttpInfoAsync(int? start = default(int?), int? count = default(int?), string? langId = default(string?), string? varParams = default(string?), string? exclude = default(string?), string? responseFields = default(string?), string? attributeSetId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// attribute.info
        /// </summary>
        /// <remarks>
        /// Get information about a specific global attribute by its ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="attributeSetId">Attribute set id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttributeInfo200Response</returns>
        System.Threading.Tasks.Task<AttributeInfo200Response> AttributeInfoAsync(string id, string? attributeSetId = default(string?), string? storeId = default(string?), string? langId = default(string?), string? varParams = default(string?), string? exclude = default(string?), string? responseFields = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// attribute.info
        /// </summary>
        /// <remarks>
        /// Get information about a specific global attribute by its ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="attributeSetId">Attribute set id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttributeInfo200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttributeInfo200Response>> AttributeInfoWithHttpInfoAsync(string id, string? attributeSetId = default(string?), string? storeId = default(string?), string? langId = default(string?), string? varParams = default(string?), string? exclude = default(string?), string? responseFields = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// attribute.list
        /// </summary>
        /// <remarks>
        /// Get a list of global attributes.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="type">Defines attribute&#39;s type (optional)</param>
        /// <param name="attributeIds">Filter attributes by ids (optional)</param>
        /// <param name="attributeSetId">Filter items by attribute set id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Retrieves attributes on specified language id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name,code,type&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="visible">Filter items by visibility status (optional)</param>
        /// <param name="required">Defines if the option is required (optional)</param>
        /// <param name="varSystem">True if attribute is system (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelResponseAttributeList</returns>
        System.Threading.Tasks.Task<ModelResponseAttributeList> AttributeListAsync(int? start = default(int?), int? count = default(int?), string? type = default(string?), string? attributeIds = default(string?), string? attributeSetId = default(string?), string? storeId = default(string?), string? langId = default(string?), string? varParams = default(string?), string? exclude = default(string?), string? responseFields = default(string?), bool? visible = default(bool?), bool? required = default(bool?), bool? varSystem = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// attribute.list
        /// </summary>
        /// <remarks>
        /// Get a list of global attributes.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="type">Defines attribute&#39;s type (optional)</param>
        /// <param name="attributeIds">Filter attributes by ids (optional)</param>
        /// <param name="attributeSetId">Filter items by attribute set id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Retrieves attributes on specified language id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name,code,type&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="visible">Filter items by visibility status (optional)</param>
        /// <param name="required">Defines if the option is required (optional)</param>
        /// <param name="varSystem">True if attribute is system (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelResponseAttributeList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelResponseAttributeList>> AttributeListWithHttpInfoAsync(int? start = default(int?), int? count = default(int?), string? type = default(string?), string? attributeIds = default(string?), string? attributeSetId = default(string?), string? storeId = default(string?), string? langId = default(string?), string? varParams = default(string?), string? exclude = default(string?), string? responseFields = default(string?), bool? visible = default(bool?), bool? required = default(bool?), bool? varSystem = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// attribute.type.list
        /// </summary>
        /// <remarks>
        /// Get list of supported attributes types
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttributeTypeList200Response</returns>
        System.Threading.Tasks.Task<AttributeTypeList200Response> AttributeTypeListAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// attribute.type.list
        /// </summary>
        /// <remarks>
        /// Get list of supported attributes types
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttributeTypeList200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttributeTypeList200Response>> AttributeTypeListWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// attribute.unassign.group
        /// </summary>
        /// <remarks>
        /// Unassign attribute from group
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="groupId">Customer group_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttributeUnassignGroup200Response</returns>
        System.Threading.Tasks.Task<AttributeUnassignGroup200Response> AttributeUnassignGroupAsync(string id, string groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// attribute.unassign.group
        /// </summary>
        /// <remarks>
        /// Unassign attribute from group
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="groupId">Customer group_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttributeUnassignGroup200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttributeUnassignGroup200Response>> AttributeUnassignGroupWithHttpInfoAsync(string id, string groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// attribute.unassign.set
        /// </summary>
        /// <remarks>
        /// Unassign attribute from attribute set
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="attributeSetId">Attribute set id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttributeUnassignGroup200Response</returns>
        System.Threading.Tasks.Task<AttributeUnassignGroup200Response> AttributeUnassignSetAsync(string id, string attributeSetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// attribute.unassign.set
        /// </summary>
        /// <remarks>
        /// Unassign attribute from attribute set
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="attributeSetId">Attribute set id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttributeUnassignGroup200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttributeUnassignGroup200Response>> AttributeUnassignSetWithHttpInfoAsync(string id, string attributeSetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// attribute.update
        /// </summary>
        /// <remarks>
        /// Update attribute data
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="name">Defines new attributes&#39;s name</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttributeUpdate200Response</returns>
        System.Threading.Tasks.Task<AttributeUpdate200Response> AttributeUpdateAsync(string id, string name, string? storeId = default(string?), string? langId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// attribute.update
        /// </summary>
        /// <remarks>
        /// Update attribute data
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="name">Defines new attributes&#39;s name</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttributeUpdate200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttributeUpdate200Response>> AttributeUpdateWithHttpInfoAsync(string id, string name, string? storeId = default(string?), string? langId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// attribute.value.add
        /// </summary>
        /// <remarks>
        /// Add new value to attribute.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">Attribute Id</param>
        /// <param name="name">Defines attribute value&#39;s name</param>
        /// <param name="code">Entity code (optional)</param>
        /// <param name="description">Defines attribute value&#39;s description (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttributeAdd200Response</returns>
        System.Threading.Tasks.Task<AttributeAdd200Response> AttributeValueAddAsync(string attributeId, string name, string? code = default(string?), string? description = default(string?), string? storeId = default(string?), string? langId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// attribute.value.add
        /// </summary>
        /// <remarks>
        /// Add new value to attribute.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">Attribute Id</param>
        /// <param name="name">Defines attribute value&#39;s name</param>
        /// <param name="code">Entity code (optional)</param>
        /// <param name="description">Defines attribute value&#39;s description (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttributeAdd200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttributeAdd200Response>> AttributeValueAddWithHttpInfoAsync(string attributeId, string name, string? code = default(string?), string? description = default(string?), string? storeId = default(string?), string? langId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// attribute.value.delete
        /// </summary>
        /// <remarks>
        /// Delete attribute value.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="attributeId">Attribute Id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttributeValueDelete200Response</returns>
        System.Threading.Tasks.Task<AttributeValueDelete200Response> AttributeValueDeleteAsync(string id, string attributeId, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// attribute.value.delete
        /// </summary>
        /// <remarks>
        /// Delete attribute value.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="attributeId">Attribute Id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttributeValueDelete200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttributeValueDelete200Response>> AttributeValueDeleteWithHttpInfoAsync(string id, string attributeId, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// attribute.value.update
        /// </summary>
        /// <remarks>
        /// Update attribute value.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Defines attribute value&#39;s id</param>
        /// <param name="attributeId">Attribute Id</param>
        /// <param name="name">Defines attribute value&#39;s name (optional)</param>
        /// <param name="description">Defines new attribute value&#39;s description (optional)</param>
        /// <param name="code">Entity code (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttributeUpdate200Response</returns>
        System.Threading.Tasks.Task<AttributeUpdate200Response> AttributeValueUpdateAsync(string id, string attributeId, string? name = default(string?), string? description = default(string?), string? code = default(string?), string? storeId = default(string?), string? langId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// attribute.value.update
        /// </summary>
        /// <remarks>
        /// Update attribute value.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Defines attribute value&#39;s id</param>
        /// <param name="attributeId">Attribute Id</param>
        /// <param name="name">Defines attribute value&#39;s name (optional)</param>
        /// <param name="description">Defines new attribute value&#39;s description (optional)</param>
        /// <param name="code">Entity code (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttributeUpdate200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttributeUpdate200Response>> AttributeValueUpdateWithHttpInfoAsync(string id, string attributeId, string? name = default(string?), string? description = default(string?), string? code = default(string?), string? storeId = default(string?), string? langId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAttributeApi : IAttributeApiSync, IAttributeApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AttributeApi : IAttributeApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AttributeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AttributeApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AttributeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AttributeApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AttributeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AttributeApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AttributeApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AttributeApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// attribute.add Add new attribute
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Defines attribute&#39;s type</param>
        /// <param name="name">Defines attributes&#39;s name</param>
        /// <param name="code">Entity code (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="visible">Set visibility status (optional, default to false)</param>
        /// <param name="required">Defines if the option is required (optional, default to false)</param>
        /// <param name="position">Attribute&#x60;s position (optional, default to 0)</param>
        /// <param name="attributeGroupId">Filter by attribute_group_id (optional)</param>
        /// <param name="isGlobal">Attribute saving scope (optional, default to &quot;Store&quot;)</param>
        /// <param name="isSearchable">Use attribute in Quick Search (optional, default to false)</param>
        /// <param name="isFilterable">Use In Layered Navigation (optional, default to &quot;No&quot;)</param>
        /// <param name="isComparable">Comparable on Front-end (optional, default to false)</param>
        /// <param name="isHtmlAllowedOnFront">Allow HTML Tags on Frontend (optional, default to false)</param>
        /// <param name="isFilterableInSearch">Use In Search Results Layered Navigation (optional, default to false)</param>
        /// <param name="isConfigurable">Use To Create Configurable Product (optional, default to false)</param>
        /// <param name="isVisibleInAdvancedSearch">Use in Advanced Search (optional, default to false)</param>
        /// <param name="isUsedForPromoRules">Use for Promo Rule Conditions (optional, default to false)</param>
        /// <param name="usedInProductListing">Used in Product Listing (optional, default to false)</param>
        /// <param name="usedForSortBy">Used for Sorting in Product Listing (optional, default to false)</param>
        /// <param name="applyTo">Types of products which can have this attribute (optional, default to &quot;all_types&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttributeAdd200Response</returns>
        public AttributeAdd200Response AttributeAdd(string type, string name, string? code = default(string?), string? storeId = default(string?), string? langId = default(string?), bool? visible = default(bool?), bool? required = default(bool?), int? position = default(int?), string? attributeGroupId = default(string?), string? isGlobal = default(string?), bool? isSearchable = default(bool?), string? isFilterable = default(string?), bool? isComparable = default(bool?), bool? isHtmlAllowedOnFront = default(bool?), bool? isFilterableInSearch = default(bool?), bool? isConfigurable = default(bool?), bool? isVisibleInAdvancedSearch = default(bool?), bool? isUsedForPromoRules = default(bool?), bool? usedInProductListing = default(bool?), bool? usedForSortBy = default(bool?), string? applyTo = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AttributeAdd200Response> localVarResponse = AttributeAddWithHttpInfo(type, name, code, storeId, langId, visible, required, position, attributeGroupId, isGlobal, isSearchable, isFilterable, isComparable, isHtmlAllowedOnFront, isFilterableInSearch, isConfigurable, isVisibleInAdvancedSearch, isUsedForPromoRules, usedInProductListing, usedForSortBy, applyTo);
            return localVarResponse.Data;
        }

        /// <summary>
        /// attribute.add Add new attribute
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Defines attribute&#39;s type</param>
        /// <param name="name">Defines attributes&#39;s name</param>
        /// <param name="code">Entity code (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="visible">Set visibility status (optional, default to false)</param>
        /// <param name="required">Defines if the option is required (optional, default to false)</param>
        /// <param name="position">Attribute&#x60;s position (optional, default to 0)</param>
        /// <param name="attributeGroupId">Filter by attribute_group_id (optional)</param>
        /// <param name="isGlobal">Attribute saving scope (optional, default to &quot;Store&quot;)</param>
        /// <param name="isSearchable">Use attribute in Quick Search (optional, default to false)</param>
        /// <param name="isFilterable">Use In Layered Navigation (optional, default to &quot;No&quot;)</param>
        /// <param name="isComparable">Comparable on Front-end (optional, default to false)</param>
        /// <param name="isHtmlAllowedOnFront">Allow HTML Tags on Frontend (optional, default to false)</param>
        /// <param name="isFilterableInSearch">Use In Search Results Layered Navigation (optional, default to false)</param>
        /// <param name="isConfigurable">Use To Create Configurable Product (optional, default to false)</param>
        /// <param name="isVisibleInAdvancedSearch">Use in Advanced Search (optional, default to false)</param>
        /// <param name="isUsedForPromoRules">Use for Promo Rule Conditions (optional, default to false)</param>
        /// <param name="usedInProductListing">Used in Product Listing (optional, default to false)</param>
        /// <param name="usedForSortBy">Used for Sorting in Product Listing (optional, default to false)</param>
        /// <param name="applyTo">Types of products which can have this attribute (optional, default to &quot;all_types&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttributeAdd200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<AttributeAdd200Response> AttributeAddWithHttpInfo(string type, string name, string? code = default(string?), string? storeId = default(string?), string? langId = default(string?), bool? visible = default(bool?), bool? required = default(bool?), int? position = default(int?), string? attributeGroupId = default(string?), string? isGlobal = default(string?), bool? isSearchable = default(bool?), string? isFilterable = default(string?), bool? isComparable = default(bool?), bool? isHtmlAllowedOnFront = default(bool?), bool? isFilterableInSearch = default(bool?), bool? isConfigurable = default(bool?), bool? isVisibleInAdvancedSearch = default(bool?), bool? isUsedForPromoRules = default(bool?), bool? usedInProductListing = default(bool?), bool? usedForSortBy = default(bool?), string? applyTo = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'type' when calling AttributeApi->AttributeAdd");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'name' when calling AttributeApi->AttributeAdd");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            if (code != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "code", code));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }
            if (visible != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "visible", visible));
            }
            if (required != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "required", required));
            }
            if (position != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "position", position));
            }
            if (attributeGroupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "attribute_group_id", attributeGroupId));
            }
            if (isGlobal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "is_global", isGlobal));
            }
            if (isSearchable != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "is_searchable", isSearchable));
            }
            if (isFilterable != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "is_filterable", isFilterable));
            }
            if (isComparable != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "is_comparable", isComparable));
            }
            if (isHtmlAllowedOnFront != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "is_html_allowed_on_front", isHtmlAllowedOnFront));
            }
            if (isFilterableInSearch != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "is_filterable_in_search", isFilterableInSearch));
            }
            if (isConfigurable != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "is_configurable", isConfigurable));
            }
            if (isVisibleInAdvancedSearch != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "is_visible_in_advanced_search", isVisibleInAdvancedSearch));
            }
            if (isUsedForPromoRules != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "is_used_for_promo_rules", isUsedForPromoRules));
            }
            if (usedInProductListing != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "used_in_product_listing", usedInProductListing));
            }
            if (usedForSortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "used_for_sort_by", usedForSortBy));
            }
            if (applyTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "apply_to", applyTo));
            }

            localVarRequestOptions.Operation = "AttributeApi.AttributeAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AttributeAdd200Response>("/attribute.add.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AttributeAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// attribute.add Add new attribute
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Defines attribute&#39;s type</param>
        /// <param name="name">Defines attributes&#39;s name</param>
        /// <param name="code">Entity code (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="visible">Set visibility status (optional, default to false)</param>
        /// <param name="required">Defines if the option is required (optional, default to false)</param>
        /// <param name="position">Attribute&#x60;s position (optional, default to 0)</param>
        /// <param name="attributeGroupId">Filter by attribute_group_id (optional)</param>
        /// <param name="isGlobal">Attribute saving scope (optional, default to &quot;Store&quot;)</param>
        /// <param name="isSearchable">Use attribute in Quick Search (optional, default to false)</param>
        /// <param name="isFilterable">Use In Layered Navigation (optional, default to &quot;No&quot;)</param>
        /// <param name="isComparable">Comparable on Front-end (optional, default to false)</param>
        /// <param name="isHtmlAllowedOnFront">Allow HTML Tags on Frontend (optional, default to false)</param>
        /// <param name="isFilterableInSearch">Use In Search Results Layered Navigation (optional, default to false)</param>
        /// <param name="isConfigurable">Use To Create Configurable Product (optional, default to false)</param>
        /// <param name="isVisibleInAdvancedSearch">Use in Advanced Search (optional, default to false)</param>
        /// <param name="isUsedForPromoRules">Use for Promo Rule Conditions (optional, default to false)</param>
        /// <param name="usedInProductListing">Used in Product Listing (optional, default to false)</param>
        /// <param name="usedForSortBy">Used for Sorting in Product Listing (optional, default to false)</param>
        /// <param name="applyTo">Types of products which can have this attribute (optional, default to &quot;all_types&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttributeAdd200Response</returns>
        public async System.Threading.Tasks.Task<AttributeAdd200Response> AttributeAddAsync(string type, string name, string? code = default(string?), string? storeId = default(string?), string? langId = default(string?), bool? visible = default(bool?), bool? required = default(bool?), int? position = default(int?), string? attributeGroupId = default(string?), string? isGlobal = default(string?), bool? isSearchable = default(bool?), string? isFilterable = default(string?), bool? isComparable = default(bool?), bool? isHtmlAllowedOnFront = default(bool?), bool? isFilterableInSearch = default(bool?), bool? isConfigurable = default(bool?), bool? isVisibleInAdvancedSearch = default(bool?), bool? isUsedForPromoRules = default(bool?), bool? usedInProductListing = default(bool?), bool? usedForSortBy = default(bool?), string? applyTo = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AttributeAdd200Response> localVarResponse = await AttributeAddWithHttpInfoAsync(type, name, code, storeId, langId, visible, required, position, attributeGroupId, isGlobal, isSearchable, isFilterable, isComparable, isHtmlAllowedOnFront, isFilterableInSearch, isConfigurable, isVisibleInAdvancedSearch, isUsedForPromoRules, usedInProductListing, usedForSortBy, applyTo, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// attribute.add Add new attribute
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Defines attribute&#39;s type</param>
        /// <param name="name">Defines attributes&#39;s name</param>
        /// <param name="code">Entity code (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="visible">Set visibility status (optional, default to false)</param>
        /// <param name="required">Defines if the option is required (optional, default to false)</param>
        /// <param name="position">Attribute&#x60;s position (optional, default to 0)</param>
        /// <param name="attributeGroupId">Filter by attribute_group_id (optional)</param>
        /// <param name="isGlobal">Attribute saving scope (optional, default to &quot;Store&quot;)</param>
        /// <param name="isSearchable">Use attribute in Quick Search (optional, default to false)</param>
        /// <param name="isFilterable">Use In Layered Navigation (optional, default to &quot;No&quot;)</param>
        /// <param name="isComparable">Comparable on Front-end (optional, default to false)</param>
        /// <param name="isHtmlAllowedOnFront">Allow HTML Tags on Frontend (optional, default to false)</param>
        /// <param name="isFilterableInSearch">Use In Search Results Layered Navigation (optional, default to false)</param>
        /// <param name="isConfigurable">Use To Create Configurable Product (optional, default to false)</param>
        /// <param name="isVisibleInAdvancedSearch">Use in Advanced Search (optional, default to false)</param>
        /// <param name="isUsedForPromoRules">Use for Promo Rule Conditions (optional, default to false)</param>
        /// <param name="usedInProductListing">Used in Product Listing (optional, default to false)</param>
        /// <param name="usedForSortBy">Used for Sorting in Product Listing (optional, default to false)</param>
        /// <param name="applyTo">Types of products which can have this attribute (optional, default to &quot;all_types&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttributeAdd200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AttributeAdd200Response>> AttributeAddWithHttpInfoAsync(string type, string name, string? code = default(string?), string? storeId = default(string?), string? langId = default(string?), bool? visible = default(bool?), bool? required = default(bool?), int? position = default(int?), string? attributeGroupId = default(string?), string? isGlobal = default(string?), bool? isSearchable = default(bool?), string? isFilterable = default(string?), bool? isComparable = default(bool?), bool? isHtmlAllowedOnFront = default(bool?), bool? isFilterableInSearch = default(bool?), bool? isConfigurable = default(bool?), bool? isVisibleInAdvancedSearch = default(bool?), bool? isUsedForPromoRules = default(bool?), bool? usedInProductListing = default(bool?), bool? usedForSortBy = default(bool?), string? applyTo = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'type' when calling AttributeApi->AttributeAdd");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'name' when calling AttributeApi->AttributeAdd");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            if (code != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "code", code));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }
            if (visible != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "visible", visible));
            }
            if (required != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "required", required));
            }
            if (position != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "position", position));
            }
            if (attributeGroupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "attribute_group_id", attributeGroupId));
            }
            if (isGlobal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "is_global", isGlobal));
            }
            if (isSearchable != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "is_searchable", isSearchable));
            }
            if (isFilterable != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "is_filterable", isFilterable));
            }
            if (isComparable != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "is_comparable", isComparable));
            }
            if (isHtmlAllowedOnFront != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "is_html_allowed_on_front", isHtmlAllowedOnFront));
            }
            if (isFilterableInSearch != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "is_filterable_in_search", isFilterableInSearch));
            }
            if (isConfigurable != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "is_configurable", isConfigurable));
            }
            if (isVisibleInAdvancedSearch != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "is_visible_in_advanced_search", isVisibleInAdvancedSearch));
            }
            if (isUsedForPromoRules != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "is_used_for_promo_rules", isUsedForPromoRules));
            }
            if (usedInProductListing != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "used_in_product_listing", usedInProductListing));
            }
            if (usedForSortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "used_for_sort_by", usedForSortBy));
            }
            if (applyTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "apply_to", applyTo));
            }

            localVarRequestOptions.Operation = "AttributeApi.AttributeAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AttributeAdd200Response>("/attribute.add.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AttributeAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// attribute.assign.group Assign attribute to the group
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="groupId">Attribute group_id</param>
        /// <param name="attributeSetId">Attribute set id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttributeAssignGroup200Response</returns>
        public AttributeAssignGroup200Response AttributeAssignGroup(string id, string groupId, string? attributeSetId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AttributeAssignGroup200Response> localVarResponse = AttributeAssignGroupWithHttpInfo(id, groupId, attributeSetId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// attribute.assign.group Assign attribute to the group
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="groupId">Attribute group_id</param>
        /// <param name="attributeSetId">Attribute set id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttributeAssignGroup200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<AttributeAssignGroup200Response> AttributeAssignGroupWithHttpInfo(string id, string groupId, string? attributeSetId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling AttributeApi->AttributeAssignGroup");
            }

            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'groupId' when calling AttributeApi->AttributeAssignGroup");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "group_id", groupId));
            if (attributeSetId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "attribute_set_id", attributeSetId));
            }

            localVarRequestOptions.Operation = "AttributeApi.AttributeAssignGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AttributeAssignGroup200Response>("/attribute.assign.group.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AttributeAssignGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// attribute.assign.group Assign attribute to the group
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="groupId">Attribute group_id</param>
        /// <param name="attributeSetId">Attribute set id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttributeAssignGroup200Response</returns>
        public async System.Threading.Tasks.Task<AttributeAssignGroup200Response> AttributeAssignGroupAsync(string id, string groupId, string? attributeSetId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AttributeAssignGroup200Response> localVarResponse = await AttributeAssignGroupWithHttpInfoAsync(id, groupId, attributeSetId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// attribute.assign.group Assign attribute to the group
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="groupId">Attribute group_id</param>
        /// <param name="attributeSetId">Attribute set id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttributeAssignGroup200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AttributeAssignGroup200Response>> AttributeAssignGroupWithHttpInfoAsync(string id, string groupId, string? attributeSetId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling AttributeApi->AttributeAssignGroup");
            }

            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'groupId' when calling AttributeApi->AttributeAssignGroup");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "group_id", groupId));
            if (attributeSetId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "attribute_set_id", attributeSetId));
            }

            localVarRequestOptions.Operation = "AttributeApi.AttributeAssignGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AttributeAssignGroup200Response>("/attribute.assign.group.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AttributeAssignGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// attribute.assign.set Assign attribute to the attribute set
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="attributeSetId">Attribute set id</param>
        /// <param name="groupId">Attribute group_id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttributeAssignGroup200Response</returns>
        public AttributeAssignGroup200Response AttributeAssignSet(string id, string attributeSetId, string? groupId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AttributeAssignGroup200Response> localVarResponse = AttributeAssignSetWithHttpInfo(id, attributeSetId, groupId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// attribute.assign.set Assign attribute to the attribute set
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="attributeSetId">Attribute set id</param>
        /// <param name="groupId">Attribute group_id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttributeAssignGroup200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<AttributeAssignGroup200Response> AttributeAssignSetWithHttpInfo(string id, string attributeSetId, string? groupId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling AttributeApi->AttributeAssignSet");
            }

            // verify the required parameter 'attributeSetId' is set
            if (attributeSetId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'attributeSetId' when calling AttributeApi->AttributeAssignSet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (groupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "group_id", groupId));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "attribute_set_id", attributeSetId));

            localVarRequestOptions.Operation = "AttributeApi.AttributeAssignSet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AttributeAssignGroup200Response>("/attribute.assign.set.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AttributeAssignSet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// attribute.assign.set Assign attribute to the attribute set
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="attributeSetId">Attribute set id</param>
        /// <param name="groupId">Attribute group_id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttributeAssignGroup200Response</returns>
        public async System.Threading.Tasks.Task<AttributeAssignGroup200Response> AttributeAssignSetAsync(string id, string attributeSetId, string? groupId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AttributeAssignGroup200Response> localVarResponse = await AttributeAssignSetWithHttpInfoAsync(id, attributeSetId, groupId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// attribute.assign.set Assign attribute to the attribute set
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="attributeSetId">Attribute set id</param>
        /// <param name="groupId">Attribute group_id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttributeAssignGroup200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AttributeAssignGroup200Response>> AttributeAssignSetWithHttpInfoAsync(string id, string attributeSetId, string? groupId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling AttributeApi->AttributeAssignSet");
            }

            // verify the required parameter 'attributeSetId' is set
            if (attributeSetId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'attributeSetId' when calling AttributeApi->AttributeAssignSet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (groupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "group_id", groupId));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "attribute_set_id", attributeSetId));

            localVarRequestOptions.Operation = "AttributeApi.AttributeAssignSet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AttributeAssignGroup200Response>("/attribute.assign.set.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AttributeAssignSet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// attribute.attributeset.list Get attribute_set list
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelResponseAttributeAttributesetList</returns>
        public ModelResponseAttributeAttributesetList AttributeAttributesetList(int? start = default(int?), int? count = default(int?), string? varParams = default(string?), string? exclude = default(string?), string? responseFields = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModelResponseAttributeAttributesetList> localVarResponse = AttributeAttributesetListWithHttpInfo(start, count, varParams, exclude, responseFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// attribute.attributeset.list Get attribute_set list
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelResponseAttributeAttributesetList</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModelResponseAttributeAttributesetList> AttributeAttributesetListWithHttpInfo(int? start = default(int?), int? count = default(int?), string? varParams = default(string?), string? exclude = default(string?), string? responseFields = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }

            localVarRequestOptions.Operation = "AttributeApi.AttributeAttributesetList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ModelResponseAttributeAttributesetList>("/attribute.attributeset.list.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AttributeAttributesetList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// attribute.attributeset.list Get attribute_set list
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelResponseAttributeAttributesetList</returns>
        public async System.Threading.Tasks.Task<ModelResponseAttributeAttributesetList> AttributeAttributesetListAsync(int? start = default(int?), int? count = default(int?), string? varParams = default(string?), string? exclude = default(string?), string? responseFields = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModelResponseAttributeAttributesetList> localVarResponse = await AttributeAttributesetListWithHttpInfoAsync(start, count, varParams, exclude, responseFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// attribute.attributeset.list Get attribute_set list
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelResponseAttributeAttributesetList)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModelResponseAttributeAttributesetList>> AttributeAttributesetListWithHttpInfoAsync(int? start = default(int?), int? count = default(int?), string? varParams = default(string?), string? exclude = default(string?), string? responseFields = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }

            localVarRequestOptions.Operation = "AttributeApi.AttributeAttributesetList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ModelResponseAttributeAttributesetList>("/attribute.attributeset.list.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AttributeAttributesetList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// attribute.count Get attributes count
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Defines attribute&#39;s type (optional)</param>
        /// <param name="attributeSetId">Filter items by attribute set id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="visible">Filter items by visibility status (optional)</param>
        /// <param name="required">Defines if the option is required (optional)</param>
        /// <param name="varSystem">True if attribute is system (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttributeCount200Response</returns>
        public AttributeCount200Response AttributeCount(string? type = default(string?), string? attributeSetId = default(string?), string? storeId = default(string?), string? langId = default(string?), bool? visible = default(bool?), bool? required = default(bool?), bool? varSystem = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AttributeCount200Response> localVarResponse = AttributeCountWithHttpInfo(type, attributeSetId, storeId, langId, visible, required, varSystem);
            return localVarResponse.Data;
        }

        /// <summary>
        /// attribute.count Get attributes count
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Defines attribute&#39;s type (optional)</param>
        /// <param name="attributeSetId">Filter items by attribute set id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="visible">Filter items by visibility status (optional)</param>
        /// <param name="required">Defines if the option is required (optional)</param>
        /// <param name="varSystem">True if attribute is system (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttributeCount200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<AttributeCount200Response> AttributeCountWithHttpInfo(string? type = default(string?), string? attributeSetId = default(string?), string? storeId = default(string?), string? langId = default(string?), bool? visible = default(bool?), bool? required = default(bool?), bool? varSystem = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (attributeSetId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "attribute_set_id", attributeSetId));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }
            if (visible != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "visible", visible));
            }
            if (required != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "required", required));
            }
            if (varSystem != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "system", varSystem));
            }

            localVarRequestOptions.Operation = "AttributeApi.AttributeCount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AttributeCount200Response>("/attribute.count.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AttributeCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// attribute.count Get attributes count
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Defines attribute&#39;s type (optional)</param>
        /// <param name="attributeSetId">Filter items by attribute set id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="visible">Filter items by visibility status (optional)</param>
        /// <param name="required">Defines if the option is required (optional)</param>
        /// <param name="varSystem">True if attribute is system (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttributeCount200Response</returns>
        public async System.Threading.Tasks.Task<AttributeCount200Response> AttributeCountAsync(string? type = default(string?), string? attributeSetId = default(string?), string? storeId = default(string?), string? langId = default(string?), bool? visible = default(bool?), bool? required = default(bool?), bool? varSystem = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AttributeCount200Response> localVarResponse = await AttributeCountWithHttpInfoAsync(type, attributeSetId, storeId, langId, visible, required, varSystem, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// attribute.count Get attributes count
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Defines attribute&#39;s type (optional)</param>
        /// <param name="attributeSetId">Filter items by attribute set id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="visible">Filter items by visibility status (optional)</param>
        /// <param name="required">Defines if the option is required (optional)</param>
        /// <param name="varSystem">True if attribute is system (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttributeCount200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AttributeCount200Response>> AttributeCountWithHttpInfoAsync(string? type = default(string?), string? attributeSetId = default(string?), string? storeId = default(string?), string? langId = default(string?), bool? visible = default(bool?), bool? required = default(bool?), bool? varSystem = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (attributeSetId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "attribute_set_id", attributeSetId));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }
            if (visible != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "visible", visible));
            }
            if (required != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "required", required));
            }
            if (varSystem != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "system", varSystem));
            }

            localVarRequestOptions.Operation = "AttributeApi.AttributeCount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AttributeCount200Response>("/attribute.count.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AttributeCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// attribute.delete Delete attribute from store
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttributeDelete200Response</returns>
        public AttributeDelete200Response AttributeDelete(string id, string? storeId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AttributeDelete200Response> localVarResponse = AttributeDeleteWithHttpInfo(id, storeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// attribute.delete Delete attribute from store
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttributeDelete200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<AttributeDelete200Response> AttributeDeleteWithHttpInfo(string id, string? storeId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling AttributeApi->AttributeDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));

            localVarRequestOptions.Operation = "AttributeApi.AttributeDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<AttributeDelete200Response>("/attribute.delete.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AttributeDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// attribute.delete Delete attribute from store
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttributeDelete200Response</returns>
        public async System.Threading.Tasks.Task<AttributeDelete200Response> AttributeDeleteAsync(string id, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AttributeDelete200Response> localVarResponse = await AttributeDeleteWithHttpInfoAsync(id, storeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// attribute.delete Delete attribute from store
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttributeDelete200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AttributeDelete200Response>> AttributeDeleteWithHttpInfoAsync(string id, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling AttributeApi->AttributeDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));

            localVarRequestOptions.Operation = "AttributeApi.AttributeDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<AttributeDelete200Response>("/attribute.delete.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AttributeDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// attribute.group.list Get attribute group list
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="attributeSetId">Attribute set id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelResponseAttributeGroupList</returns>
        public ModelResponseAttributeGroupList AttributeGroupList(int? start = default(int?), int? count = default(int?), string? langId = default(string?), string? varParams = default(string?), string? exclude = default(string?), string? responseFields = default(string?), string? attributeSetId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModelResponseAttributeGroupList> localVarResponse = AttributeGroupListWithHttpInfo(start, count, langId, varParams, exclude, responseFields, attributeSetId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// attribute.group.list Get attribute group list
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="attributeSetId">Attribute set id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelResponseAttributeGroupList</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModelResponseAttributeGroupList> AttributeGroupListWithHttpInfo(int? start = default(int?), int? count = default(int?), string? langId = default(string?), string? varParams = default(string?), string? exclude = default(string?), string? responseFields = default(string?), string? attributeSetId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }
            if (attributeSetId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "attribute_set_id", attributeSetId));
            }

            localVarRequestOptions.Operation = "AttributeApi.AttributeGroupList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ModelResponseAttributeGroupList>("/attribute.group.list.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AttributeGroupList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// attribute.group.list Get attribute group list
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="attributeSetId">Attribute set id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelResponseAttributeGroupList</returns>
        public async System.Threading.Tasks.Task<ModelResponseAttributeGroupList> AttributeGroupListAsync(int? start = default(int?), int? count = default(int?), string? langId = default(string?), string? varParams = default(string?), string? exclude = default(string?), string? responseFields = default(string?), string? attributeSetId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModelResponseAttributeGroupList> localVarResponse = await AttributeGroupListWithHttpInfoAsync(start, count, langId, varParams, exclude, responseFields, attributeSetId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// attribute.group.list Get attribute group list
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="attributeSetId">Attribute set id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelResponseAttributeGroupList)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModelResponseAttributeGroupList>> AttributeGroupListWithHttpInfoAsync(int? start = default(int?), int? count = default(int?), string? langId = default(string?), string? varParams = default(string?), string? exclude = default(string?), string? responseFields = default(string?), string? attributeSetId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }
            if (attributeSetId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "attribute_set_id", attributeSetId));
            }

            localVarRequestOptions.Operation = "AttributeApi.AttributeGroupList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ModelResponseAttributeGroupList>("/attribute.group.list.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AttributeGroupList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// attribute.info Get information about a specific global attribute by its ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="attributeSetId">Attribute set id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttributeInfo200Response</returns>
        public AttributeInfo200Response AttributeInfo(string id, string? attributeSetId = default(string?), string? storeId = default(string?), string? langId = default(string?), string? varParams = default(string?), string? exclude = default(string?), string? responseFields = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AttributeInfo200Response> localVarResponse = AttributeInfoWithHttpInfo(id, attributeSetId, storeId, langId, varParams, exclude, responseFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// attribute.info Get information about a specific global attribute by its ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="attributeSetId">Attribute set id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttributeInfo200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<AttributeInfo200Response> AttributeInfoWithHttpInfo(string id, string? attributeSetId = default(string?), string? storeId = default(string?), string? langId = default(string?), string? varParams = default(string?), string? exclude = default(string?), string? responseFields = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling AttributeApi->AttributeInfo");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributeSetId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "attribute_set_id", attributeSetId));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }

            localVarRequestOptions.Operation = "AttributeApi.AttributeInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AttributeInfo200Response>("/attribute.info.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AttributeInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// attribute.info Get information about a specific global attribute by its ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="attributeSetId">Attribute set id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttributeInfo200Response</returns>
        public async System.Threading.Tasks.Task<AttributeInfo200Response> AttributeInfoAsync(string id, string? attributeSetId = default(string?), string? storeId = default(string?), string? langId = default(string?), string? varParams = default(string?), string? exclude = default(string?), string? responseFields = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AttributeInfo200Response> localVarResponse = await AttributeInfoWithHttpInfoAsync(id, attributeSetId, storeId, langId, varParams, exclude, responseFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// attribute.info Get information about a specific global attribute by its ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="attributeSetId">Attribute set id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttributeInfo200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AttributeInfo200Response>> AttributeInfoWithHttpInfoAsync(string id, string? attributeSetId = default(string?), string? storeId = default(string?), string? langId = default(string?), string? varParams = default(string?), string? exclude = default(string?), string? responseFields = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling AttributeApi->AttributeInfo");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributeSetId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "attribute_set_id", attributeSetId));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }

            localVarRequestOptions.Operation = "AttributeApi.AttributeInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AttributeInfo200Response>("/attribute.info.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AttributeInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// attribute.list Get a list of global attributes.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="type">Defines attribute&#39;s type (optional)</param>
        /// <param name="attributeIds">Filter attributes by ids (optional)</param>
        /// <param name="attributeSetId">Filter items by attribute set id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Retrieves attributes on specified language id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name,code,type&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="visible">Filter items by visibility status (optional)</param>
        /// <param name="required">Defines if the option is required (optional)</param>
        /// <param name="varSystem">True if attribute is system (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelResponseAttributeList</returns>
        public ModelResponseAttributeList AttributeList(int? start = default(int?), int? count = default(int?), string? type = default(string?), string? attributeIds = default(string?), string? attributeSetId = default(string?), string? storeId = default(string?), string? langId = default(string?), string? varParams = default(string?), string? exclude = default(string?), string? responseFields = default(string?), bool? visible = default(bool?), bool? required = default(bool?), bool? varSystem = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModelResponseAttributeList> localVarResponse = AttributeListWithHttpInfo(start, count, type, attributeIds, attributeSetId, storeId, langId, varParams, exclude, responseFields, visible, required, varSystem);
            return localVarResponse.Data;
        }

        /// <summary>
        /// attribute.list Get a list of global attributes.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="type">Defines attribute&#39;s type (optional)</param>
        /// <param name="attributeIds">Filter attributes by ids (optional)</param>
        /// <param name="attributeSetId">Filter items by attribute set id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Retrieves attributes on specified language id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name,code,type&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="visible">Filter items by visibility status (optional)</param>
        /// <param name="required">Defines if the option is required (optional)</param>
        /// <param name="varSystem">True if attribute is system (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelResponseAttributeList</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModelResponseAttributeList> AttributeListWithHttpInfo(int? start = default(int?), int? count = default(int?), string? type = default(string?), string? attributeIds = default(string?), string? attributeSetId = default(string?), string? storeId = default(string?), string? langId = default(string?), string? varParams = default(string?), string? exclude = default(string?), string? responseFields = default(string?), bool? visible = default(bool?), bool? required = default(bool?), bool? varSystem = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (attributeIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "attribute_ids", attributeIds));
            }
            if (attributeSetId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "attribute_set_id", attributeSetId));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }
            if (visible != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "visible", visible));
            }
            if (required != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "required", required));
            }
            if (varSystem != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "system", varSystem));
            }

            localVarRequestOptions.Operation = "AttributeApi.AttributeList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ModelResponseAttributeList>("/attribute.list.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AttributeList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// attribute.list Get a list of global attributes.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="type">Defines attribute&#39;s type (optional)</param>
        /// <param name="attributeIds">Filter attributes by ids (optional)</param>
        /// <param name="attributeSetId">Filter items by attribute set id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Retrieves attributes on specified language id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name,code,type&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="visible">Filter items by visibility status (optional)</param>
        /// <param name="required">Defines if the option is required (optional)</param>
        /// <param name="varSystem">True if attribute is system (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelResponseAttributeList</returns>
        public async System.Threading.Tasks.Task<ModelResponseAttributeList> AttributeListAsync(int? start = default(int?), int? count = default(int?), string? type = default(string?), string? attributeIds = default(string?), string? attributeSetId = default(string?), string? storeId = default(string?), string? langId = default(string?), string? varParams = default(string?), string? exclude = default(string?), string? responseFields = default(string?), bool? visible = default(bool?), bool? required = default(bool?), bool? varSystem = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModelResponseAttributeList> localVarResponse = await AttributeListWithHttpInfoAsync(start, count, type, attributeIds, attributeSetId, storeId, langId, varParams, exclude, responseFields, visible, required, varSystem, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// attribute.list Get a list of global attributes.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="type">Defines attribute&#39;s type (optional)</param>
        /// <param name="attributeIds">Filter attributes by ids (optional)</param>
        /// <param name="attributeSetId">Filter items by attribute set id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Retrieves attributes on specified language id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name,code,type&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="visible">Filter items by visibility status (optional)</param>
        /// <param name="required">Defines if the option is required (optional)</param>
        /// <param name="varSystem">True if attribute is system (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelResponseAttributeList)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModelResponseAttributeList>> AttributeListWithHttpInfoAsync(int? start = default(int?), int? count = default(int?), string? type = default(string?), string? attributeIds = default(string?), string? attributeSetId = default(string?), string? storeId = default(string?), string? langId = default(string?), string? varParams = default(string?), string? exclude = default(string?), string? responseFields = default(string?), bool? visible = default(bool?), bool? required = default(bool?), bool? varSystem = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (attributeIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "attribute_ids", attributeIds));
            }
            if (attributeSetId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "attribute_set_id", attributeSetId));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }
            if (visible != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "visible", visible));
            }
            if (required != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "required", required));
            }
            if (varSystem != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "system", varSystem));
            }

            localVarRequestOptions.Operation = "AttributeApi.AttributeList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ModelResponseAttributeList>("/attribute.list.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AttributeList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// attribute.type.list Get list of supported attributes types
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttributeTypeList200Response</returns>
        public AttributeTypeList200Response AttributeTypeList(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AttributeTypeList200Response> localVarResponse = AttributeTypeListWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// attribute.type.list Get list of supported attributes types
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttributeTypeList200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<AttributeTypeList200Response> AttributeTypeListWithHttpInfo(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AttributeApi.AttributeTypeList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AttributeTypeList200Response>("/attribute.type.list.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AttributeTypeList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// attribute.type.list Get list of supported attributes types
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttributeTypeList200Response</returns>
        public async System.Threading.Tasks.Task<AttributeTypeList200Response> AttributeTypeListAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AttributeTypeList200Response> localVarResponse = await AttributeTypeListWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// attribute.type.list Get list of supported attributes types
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttributeTypeList200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AttributeTypeList200Response>> AttributeTypeListWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AttributeApi.AttributeTypeList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AttributeTypeList200Response>("/attribute.type.list.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AttributeTypeList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// attribute.unassign.group Unassign attribute from group
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="groupId">Customer group_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttributeUnassignGroup200Response</returns>
        public AttributeUnassignGroup200Response AttributeUnassignGroup(string id, string groupId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AttributeUnassignGroup200Response> localVarResponse = AttributeUnassignGroupWithHttpInfo(id, groupId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// attribute.unassign.group Unassign attribute from group
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="groupId">Customer group_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttributeUnassignGroup200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<AttributeUnassignGroup200Response> AttributeUnassignGroupWithHttpInfo(string id, string groupId, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling AttributeApi->AttributeUnassignGroup");
            }

            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'groupId' when calling AttributeApi->AttributeUnassignGroup");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "group_id", groupId));

            localVarRequestOptions.Operation = "AttributeApi.AttributeUnassignGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AttributeUnassignGroup200Response>("/attribute.unassign.group.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AttributeUnassignGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// attribute.unassign.group Unassign attribute from group
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="groupId">Customer group_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttributeUnassignGroup200Response</returns>
        public async System.Threading.Tasks.Task<AttributeUnassignGroup200Response> AttributeUnassignGroupAsync(string id, string groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AttributeUnassignGroup200Response> localVarResponse = await AttributeUnassignGroupWithHttpInfoAsync(id, groupId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// attribute.unassign.group Unassign attribute from group
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="groupId">Customer group_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttributeUnassignGroup200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AttributeUnassignGroup200Response>> AttributeUnassignGroupWithHttpInfoAsync(string id, string groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling AttributeApi->AttributeUnassignGroup");
            }

            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'groupId' when calling AttributeApi->AttributeUnassignGroup");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "group_id", groupId));

            localVarRequestOptions.Operation = "AttributeApi.AttributeUnassignGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AttributeUnassignGroup200Response>("/attribute.unassign.group.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AttributeUnassignGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// attribute.unassign.set Unassign attribute from attribute set
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="attributeSetId">Attribute set id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttributeUnassignGroup200Response</returns>
        public AttributeUnassignGroup200Response AttributeUnassignSet(string id, string attributeSetId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AttributeUnassignGroup200Response> localVarResponse = AttributeUnassignSetWithHttpInfo(id, attributeSetId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// attribute.unassign.set Unassign attribute from attribute set
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="attributeSetId">Attribute set id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttributeUnassignGroup200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<AttributeUnassignGroup200Response> AttributeUnassignSetWithHttpInfo(string id, string attributeSetId, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling AttributeApi->AttributeUnassignSet");
            }

            // verify the required parameter 'attributeSetId' is set
            if (attributeSetId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'attributeSetId' when calling AttributeApi->AttributeUnassignSet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "attribute_set_id", attributeSetId));

            localVarRequestOptions.Operation = "AttributeApi.AttributeUnassignSet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AttributeUnassignGroup200Response>("/attribute.unassign.set.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AttributeUnassignSet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// attribute.unassign.set Unassign attribute from attribute set
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="attributeSetId">Attribute set id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttributeUnassignGroup200Response</returns>
        public async System.Threading.Tasks.Task<AttributeUnassignGroup200Response> AttributeUnassignSetAsync(string id, string attributeSetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AttributeUnassignGroup200Response> localVarResponse = await AttributeUnassignSetWithHttpInfoAsync(id, attributeSetId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// attribute.unassign.set Unassign attribute from attribute set
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="attributeSetId">Attribute set id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttributeUnassignGroup200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AttributeUnassignGroup200Response>> AttributeUnassignSetWithHttpInfoAsync(string id, string attributeSetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling AttributeApi->AttributeUnassignSet");
            }

            // verify the required parameter 'attributeSetId' is set
            if (attributeSetId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'attributeSetId' when calling AttributeApi->AttributeUnassignSet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "attribute_set_id", attributeSetId));

            localVarRequestOptions.Operation = "AttributeApi.AttributeUnassignSet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AttributeUnassignGroup200Response>("/attribute.unassign.set.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AttributeUnassignSet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// attribute.update Update attribute data
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="name">Defines new attributes&#39;s name</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttributeUpdate200Response</returns>
        public AttributeUpdate200Response AttributeUpdate(string id, string name, string? storeId = default(string?), string? langId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AttributeUpdate200Response> localVarResponse = AttributeUpdateWithHttpInfo(id, name, storeId, langId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// attribute.update Update attribute data
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="name">Defines new attributes&#39;s name</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttributeUpdate200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<AttributeUpdate200Response> AttributeUpdateWithHttpInfo(string id, string name, string? storeId = default(string?), string? langId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling AttributeApi->AttributeUpdate");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'name' when calling AttributeApi->AttributeUpdate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }

            localVarRequestOptions.Operation = "AttributeApi.AttributeUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<AttributeUpdate200Response>("/attribute.update.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AttributeUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// attribute.update Update attribute data
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="name">Defines new attributes&#39;s name</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttributeUpdate200Response</returns>
        public async System.Threading.Tasks.Task<AttributeUpdate200Response> AttributeUpdateAsync(string id, string name, string? storeId = default(string?), string? langId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AttributeUpdate200Response> localVarResponse = await AttributeUpdateWithHttpInfoAsync(id, name, storeId, langId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// attribute.update Update attribute data
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="name">Defines new attributes&#39;s name</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttributeUpdate200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AttributeUpdate200Response>> AttributeUpdateWithHttpInfoAsync(string id, string name, string? storeId = default(string?), string? langId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling AttributeApi->AttributeUpdate");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'name' when calling AttributeApi->AttributeUpdate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }

            localVarRequestOptions.Operation = "AttributeApi.AttributeUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<AttributeUpdate200Response>("/attribute.update.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AttributeUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// attribute.value.add Add new value to attribute.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">Attribute Id</param>
        /// <param name="name">Defines attribute value&#39;s name</param>
        /// <param name="code">Entity code (optional)</param>
        /// <param name="description">Defines attribute value&#39;s description (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttributeAdd200Response</returns>
        public AttributeAdd200Response AttributeValueAdd(string attributeId, string name, string? code = default(string?), string? description = default(string?), string? storeId = default(string?), string? langId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AttributeAdd200Response> localVarResponse = AttributeValueAddWithHttpInfo(attributeId, name, code, description, storeId, langId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// attribute.value.add Add new value to attribute.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">Attribute Id</param>
        /// <param name="name">Defines attribute value&#39;s name</param>
        /// <param name="code">Entity code (optional)</param>
        /// <param name="description">Defines attribute value&#39;s description (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttributeAdd200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<AttributeAdd200Response> AttributeValueAddWithHttpInfo(string attributeId, string name, string? code = default(string?), string? description = default(string?), string? storeId = default(string?), string? langId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'attributeId' is set
            if (attributeId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'attributeId' when calling AttributeApi->AttributeValueAdd");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'name' when calling AttributeApi->AttributeValueAdd");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "attribute_id", attributeId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            if (code != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "code", code));
            }
            if (description != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "description", description));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }

            localVarRequestOptions.Operation = "AttributeApi.AttributeValueAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AttributeAdd200Response>("/attribute.value.add.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AttributeValueAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// attribute.value.add Add new value to attribute.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">Attribute Id</param>
        /// <param name="name">Defines attribute value&#39;s name</param>
        /// <param name="code">Entity code (optional)</param>
        /// <param name="description">Defines attribute value&#39;s description (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttributeAdd200Response</returns>
        public async System.Threading.Tasks.Task<AttributeAdd200Response> AttributeValueAddAsync(string attributeId, string name, string? code = default(string?), string? description = default(string?), string? storeId = default(string?), string? langId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AttributeAdd200Response> localVarResponse = await AttributeValueAddWithHttpInfoAsync(attributeId, name, code, description, storeId, langId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// attribute.value.add Add new value to attribute.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId">Attribute Id</param>
        /// <param name="name">Defines attribute value&#39;s name</param>
        /// <param name="code">Entity code (optional)</param>
        /// <param name="description">Defines attribute value&#39;s description (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttributeAdd200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AttributeAdd200Response>> AttributeValueAddWithHttpInfoAsync(string attributeId, string name, string? code = default(string?), string? description = default(string?), string? storeId = default(string?), string? langId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'attributeId' is set
            if (attributeId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'attributeId' when calling AttributeApi->AttributeValueAdd");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'name' when calling AttributeApi->AttributeValueAdd");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "attribute_id", attributeId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            if (code != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "code", code));
            }
            if (description != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "description", description));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }

            localVarRequestOptions.Operation = "AttributeApi.AttributeValueAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AttributeAdd200Response>("/attribute.value.add.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AttributeValueAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// attribute.value.delete Delete attribute value.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="attributeId">Attribute Id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttributeValueDelete200Response</returns>
        public AttributeValueDelete200Response AttributeValueDelete(string id, string attributeId, string? storeId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AttributeValueDelete200Response> localVarResponse = AttributeValueDeleteWithHttpInfo(id, attributeId, storeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// attribute.value.delete Delete attribute value.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="attributeId">Attribute Id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttributeValueDelete200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<AttributeValueDelete200Response> AttributeValueDeleteWithHttpInfo(string id, string attributeId, string? storeId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling AttributeApi->AttributeValueDelete");
            }

            // verify the required parameter 'attributeId' is set
            if (attributeId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'attributeId' when calling AttributeApi->AttributeValueDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "attribute_id", attributeId));
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }

            localVarRequestOptions.Operation = "AttributeApi.AttributeValueDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<AttributeValueDelete200Response>("/attribute.value.delete.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AttributeValueDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// attribute.value.delete Delete attribute value.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="attributeId">Attribute Id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttributeValueDelete200Response</returns>
        public async System.Threading.Tasks.Task<AttributeValueDelete200Response> AttributeValueDeleteAsync(string id, string attributeId, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AttributeValueDelete200Response> localVarResponse = await AttributeValueDeleteWithHttpInfoAsync(id, attributeId, storeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// attribute.value.delete Delete attribute value.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="attributeId">Attribute Id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttributeValueDelete200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AttributeValueDelete200Response>> AttributeValueDeleteWithHttpInfoAsync(string id, string attributeId, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling AttributeApi->AttributeValueDelete");
            }

            // verify the required parameter 'attributeId' is set
            if (attributeId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'attributeId' when calling AttributeApi->AttributeValueDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "attribute_id", attributeId));
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }

            localVarRequestOptions.Operation = "AttributeApi.AttributeValueDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<AttributeValueDelete200Response>("/attribute.value.delete.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AttributeValueDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// attribute.value.update Update attribute value.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Defines attribute value&#39;s id</param>
        /// <param name="attributeId">Attribute Id</param>
        /// <param name="name">Defines attribute value&#39;s name (optional)</param>
        /// <param name="description">Defines new attribute value&#39;s description (optional)</param>
        /// <param name="code">Entity code (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttributeUpdate200Response</returns>
        public AttributeUpdate200Response AttributeValueUpdate(string id, string attributeId, string? name = default(string?), string? description = default(string?), string? code = default(string?), string? storeId = default(string?), string? langId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AttributeUpdate200Response> localVarResponse = AttributeValueUpdateWithHttpInfo(id, attributeId, name, description, code, storeId, langId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// attribute.value.update Update attribute value.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Defines attribute value&#39;s id</param>
        /// <param name="attributeId">Attribute Id</param>
        /// <param name="name">Defines attribute value&#39;s name (optional)</param>
        /// <param name="description">Defines new attribute value&#39;s description (optional)</param>
        /// <param name="code">Entity code (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttributeUpdate200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<AttributeUpdate200Response> AttributeValueUpdateWithHttpInfo(string id, string attributeId, string? name = default(string?), string? description = default(string?), string? code = default(string?), string? storeId = default(string?), string? langId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling AttributeApi->AttributeValueUpdate");
            }

            // verify the required parameter 'attributeId' is set
            if (attributeId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'attributeId' when calling AttributeApi->AttributeValueUpdate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "attribute_id", attributeId));
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (description != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "description", description));
            }
            if (code != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "code", code));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }

            localVarRequestOptions.Operation = "AttributeApi.AttributeValueUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<AttributeUpdate200Response>("/attribute.value.update.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AttributeValueUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// attribute.value.update Update attribute value.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Defines attribute value&#39;s id</param>
        /// <param name="attributeId">Attribute Id</param>
        /// <param name="name">Defines attribute value&#39;s name (optional)</param>
        /// <param name="description">Defines new attribute value&#39;s description (optional)</param>
        /// <param name="code">Entity code (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttributeUpdate200Response</returns>
        public async System.Threading.Tasks.Task<AttributeUpdate200Response> AttributeValueUpdateAsync(string id, string attributeId, string? name = default(string?), string? description = default(string?), string? code = default(string?), string? storeId = default(string?), string? langId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AttributeUpdate200Response> localVarResponse = await AttributeValueUpdateWithHttpInfoAsync(id, attributeId, name, description, code, storeId, langId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// attribute.value.update Update attribute value.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Defines attribute value&#39;s id</param>
        /// <param name="attributeId">Attribute Id</param>
        /// <param name="name">Defines attribute value&#39;s name (optional)</param>
        /// <param name="description">Defines new attribute value&#39;s description (optional)</param>
        /// <param name="code">Entity code (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttributeUpdate200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AttributeUpdate200Response>> AttributeValueUpdateWithHttpInfoAsync(string id, string attributeId, string? name = default(string?), string? description = default(string?), string? code = default(string?), string? storeId = default(string?), string? langId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling AttributeApi->AttributeValueUpdate");
            }

            // verify the required parameter 'attributeId' is set
            if (attributeId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'attributeId' when calling AttributeApi->AttributeValueUpdate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "attribute_id", attributeId));
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (description != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "description", description));
            }
            if (code != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "code", code));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }

            localVarRequestOptions.Operation = "AttributeApi.AttributeValueUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<AttributeUpdate200Response>("/attribute.value.update.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AttributeValueUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
