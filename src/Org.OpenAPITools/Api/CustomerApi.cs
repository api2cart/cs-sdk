/*
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomerApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// customer.add
        /// </summary>
        /// <remarks>
        /// Add customer into store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomerAdd200Response</returns>
        CustomerAdd200Response CustomerAdd(CustomerAdd customerAdd, int operationIndex = 0);

        /// <summary>
        /// customer.add
        /// </summary>
        /// <remarks>
        /// Add customer into store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomerAdd200Response</returns>
        ApiResponse<CustomerAdd200Response> CustomerAddWithHttpInfo(CustomerAdd customerAdd, int operationIndex = 0);
        /// <summary>
        /// customer.address.add
        /// </summary>
        /// <remarks>
        /// Add customer address.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerAddressAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttributeAdd200Response</returns>
        AttributeAdd200Response CustomerAddressAdd(CustomerAddressAdd customerAddressAdd, int operationIndex = 0);

        /// <summary>
        /// customer.address.add
        /// </summary>
        /// <remarks>
        /// Add customer address.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerAddressAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttributeAdd200Response</returns>
        ApiResponse<AttributeAdd200Response> CustomerAddressAddWithHttpInfo(CustomerAddressAdd customerAddressAdd, int operationIndex = 0);
        /// <summary>
        /// customer.attribute.list
        /// </summary>
        /// <remarks>
        /// Get attributes for specific customer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Retrieves orders specified by customer id</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelResponseCustomerAttributeList</returns>
        ModelResponseCustomerAttributeList CustomerAttributeList(string customerId, int? count = default(int?), string? pageCursor = default(string?), string? storeId = default(string?), string? langId = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0);

        /// <summary>
        /// customer.attribute.list
        /// </summary>
        /// <remarks>
        /// Get attributes for specific customer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Retrieves orders specified by customer id</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelResponseCustomerAttributeList</returns>
        ApiResponse<ModelResponseCustomerAttributeList> CustomerAttributeListWithHttpInfo(string customerId, int? count = default(int?), string? pageCursor = default(string?), string? storeId = default(string?), string? langId = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0);
        /// <summary>
        /// customer.count
        /// </summary>
        /// <remarks>
        /// Get number of customers from store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Counts customers specified by ids (optional)</param>
        /// <param name="sinceId">Retrieve entities starting from the specified id. (optional)</param>
        /// <param name="customerListId">The numeric ID of the customer list in Demandware. (optional)</param>
        /// <param name="groupId">Customer group_id (optional)</param>
        /// <param name="storeId">Counts customer specified by store id (optional)</param>
        /// <param name="avail">Defines category&#39;s visibility status (optional, default to true)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Counts customers that are searched specified by field (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomerCount200Response</returns>
        CustomerCount200Response CustomerCount(string? ids = default(string?), string? sinceId = default(string?), string? customerListId = default(string?), string? groupId = default(string?), string? storeId = default(string?), bool? avail = default(bool?), string? findValue = default(string?), string? findWhere = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), int operationIndex = 0);

        /// <summary>
        /// customer.count
        /// </summary>
        /// <remarks>
        /// Get number of customers from store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Counts customers specified by ids (optional)</param>
        /// <param name="sinceId">Retrieve entities starting from the specified id. (optional)</param>
        /// <param name="customerListId">The numeric ID of the customer list in Demandware. (optional)</param>
        /// <param name="groupId">Customer group_id (optional)</param>
        /// <param name="storeId">Counts customer specified by store id (optional)</param>
        /// <param name="avail">Defines category&#39;s visibility status (optional, default to true)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Counts customers that are searched specified by field (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomerCount200Response</returns>
        ApiResponse<CustomerCount200Response> CustomerCountWithHttpInfo(string? ids = default(string?), string? sinceId = default(string?), string? customerListId = default(string?), string? groupId = default(string?), string? storeId = default(string?), bool? avail = default(bool?), string? findValue = default(string?), string? findWhere = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), int operationIndex = 0);
        /// <summary>
        /// customer.delete
        /// </summary>
        /// <remarks>
        /// Delete customer from store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifies customer specified by the id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomerDelete200Response</returns>
        CustomerDelete200Response CustomerDelete(string id, int operationIndex = 0);

        /// <summary>
        /// customer.delete
        /// </summary>
        /// <remarks>
        /// Delete customer from store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifies customer specified by the id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomerDelete200Response</returns>
        ApiResponse<CustomerDelete200Response> CustomerDeleteWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// customer.find
        /// </summary>
        /// <remarks>
        /// Find customers in store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findValue">Entity search that is specified by some value</param>
        /// <param name="findWhere">Entity search that is specified by the comma-separated unique fields (optional, default to &quot;email&quot;)</param>
        /// <param name="findParams">Entity search that is specified by comma-separated parameters (optional, default to &quot;whole_words&quot;)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomerFind200Response</returns>
        CustomerFind200Response CustomerFind(string findValue, string? findWhere = default(string?), string? findParams = default(string?), string? storeId = default(string?), int operationIndex = 0);

        /// <summary>
        /// customer.find
        /// </summary>
        /// <remarks>
        /// Find customers in store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findValue">Entity search that is specified by some value</param>
        /// <param name="findWhere">Entity search that is specified by the comma-separated unique fields (optional, default to &quot;email&quot;)</param>
        /// <param name="findParams">Entity search that is specified by comma-separated parameters (optional, default to &quot;whole_words&quot;)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomerFind200Response</returns>
        ApiResponse<CustomerFind200Response> CustomerFindWithHttpInfo(string findValue, string? findWhere = default(string?), string? findParams = default(string?), string? storeId = default(string?), int operationIndex = 0);
        /// <summary>
        /// customer.group.add
        /// </summary>
        /// <remarks>
        /// Create customer group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Customer group name</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="storesIds">Assign customer group to the stores that is specified by comma-separated stores&#39; id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomerGroupAdd200Response</returns>
        CustomerGroupAdd200Response CustomerGroupAdd(string name, string? storeId = default(string?), string? storesIds = default(string?), int operationIndex = 0);

        /// <summary>
        /// customer.group.add
        /// </summary>
        /// <remarks>
        /// Create customer group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Customer group name</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="storesIds">Assign customer group to the stores that is specified by comma-separated stores&#39; id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomerGroupAdd200Response</returns>
        ApiResponse<CustomerGroupAdd200Response> CustomerGroupAddWithHttpInfo(string name, string? storeId = default(string?), string? storesIds = default(string?), int operationIndex = 0);
        /// <summary>
        /// customer.group.list
        /// </summary>
        /// <remarks>
        /// Get list of customers groups.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="groupIds">Groups that will be assigned to a customer (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name,additional_fields&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="disableCache">Disable cache for current request (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelResponseCustomerGroupList</returns>
        ModelResponseCustomerGroupList CustomerGroupList(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? groupIds = default(string?), string? storeId = default(string?), string? langId = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), bool? disableCache = default(bool?), int operationIndex = 0);

        /// <summary>
        /// customer.group.list
        /// </summary>
        /// <remarks>
        /// Get list of customers groups.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="groupIds">Groups that will be assigned to a customer (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name,additional_fields&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="disableCache">Disable cache for current request (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelResponseCustomerGroupList</returns>
        ApiResponse<ModelResponseCustomerGroupList> CustomerGroupListWithHttpInfo(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? groupIds = default(string?), string? storeId = default(string?), string? langId = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), bool? disableCache = default(bool?), int operationIndex = 0);
        /// <summary>
        /// customer.info
        /// </summary>
        /// <remarks>
        /// Get customers&#39; details from store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Retrieves customer&#39;s info specified by customer id</param>
        /// <param name="storeId">Retrieves customer info specified by store id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,email,first_name,last_name&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomerInfo200Response</returns>
        CustomerInfo200Response CustomerInfo(string id, string? storeId = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0);

        /// <summary>
        /// customer.info
        /// </summary>
        /// <remarks>
        /// Get customers&#39; details from store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Retrieves customer&#39;s info specified by customer id</param>
        /// <param name="storeId">Retrieves customer info specified by store id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,email,first_name,last_name&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomerInfo200Response</returns>
        ApiResponse<CustomerInfo200Response> CustomerInfoWithHttpInfo(string id, string? storeId = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0);
        /// <summary>
        /// customer.list
        /// </summary>
        /// <remarks>
        /// Get list of customers from store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="ids">Retrieves customers specified by ids (optional)</param>
        /// <param name="sinceId">Retrieve entities starting from the specified id. (optional)</param>
        /// <param name="customerListId">The numeric ID of the customer list in Demandware. (optional)</param>
        /// <param name="groupId">Customer group_id (optional)</param>
        /// <param name="storeId">Retrieves customers specified by store id (optional)</param>
        /// <param name="avail">Defines category&#39;s visibility status (optional, default to true)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Customer search that is specified by field (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="sortBy">Set field to sort by (optional, default to &quot;created_time&quot;)</param>
        /// <param name="sortDirection">Set sorting direction (optional, default to &quot;asc&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,email,first_name,last_name&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelResponseCustomerList</returns>
        ModelResponseCustomerList CustomerList(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? ids = default(string?), string? sinceId = default(string?), string? customerListId = default(string?), string? groupId = default(string?), string? storeId = default(string?), bool? avail = default(bool?), string? findValue = default(string?), string? findWhere = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0);

        /// <summary>
        /// customer.list
        /// </summary>
        /// <remarks>
        /// Get list of customers from store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="ids">Retrieves customers specified by ids (optional)</param>
        /// <param name="sinceId">Retrieve entities starting from the specified id. (optional)</param>
        /// <param name="customerListId">The numeric ID of the customer list in Demandware. (optional)</param>
        /// <param name="groupId">Customer group_id (optional)</param>
        /// <param name="storeId">Retrieves customers specified by store id (optional)</param>
        /// <param name="avail">Defines category&#39;s visibility status (optional, default to true)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Customer search that is specified by field (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="sortBy">Set field to sort by (optional, default to &quot;created_time&quot;)</param>
        /// <param name="sortDirection">Set sorting direction (optional, default to &quot;asc&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,email,first_name,last_name&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelResponseCustomerList</returns>
        ApiResponse<ModelResponseCustomerList> CustomerListWithHttpInfo(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? ids = default(string?), string? sinceId = default(string?), string? customerListId = default(string?), string? groupId = default(string?), string? storeId = default(string?), bool? avail = default(bool?), string? findValue = default(string?), string? findWhere = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0);
        /// <summary>
        /// customer.update
        /// </summary>
        /// <remarks>
        /// Update information of customer in store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountConfigUpdate200Response</returns>
        AccountConfigUpdate200Response CustomerUpdate(CustomerUpdate customerUpdate, int operationIndex = 0);

        /// <summary>
        /// customer.update
        /// </summary>
        /// <remarks>
        /// Update information of customer in store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountConfigUpdate200Response</returns>
        ApiResponse<AccountConfigUpdate200Response> CustomerUpdateWithHttpInfo(CustomerUpdate customerUpdate, int operationIndex = 0);
        /// <summary>
        /// customer.wishlist.list
        /// </summary>
        /// <remarks>
        /// Get a Wish List of customer from the store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Retrieves orders specified by customer id</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="id">Entity id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;{return_code,return_message,pagination,result}&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelResponseCustomerWishlistList</returns>
        ModelResponseCustomerWishlistList CustomerWishlistList(string customerId, int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? id = default(string?), string? storeId = default(string?), string? responseFields = default(string?), int operationIndex = 0);

        /// <summary>
        /// customer.wishlist.list
        /// </summary>
        /// <remarks>
        /// Get a Wish List of customer from the store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Retrieves orders specified by customer id</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="id">Entity id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;{return_code,return_message,pagination,result}&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelResponseCustomerWishlistList</returns>
        ApiResponse<ModelResponseCustomerWishlistList> CustomerWishlistListWithHttpInfo(string customerId, int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? id = default(string?), string? storeId = default(string?), string? responseFields = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// customer.add
        /// </summary>
        /// <remarks>
        /// Add customer into store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomerAdd200Response</returns>
        System.Threading.Tasks.Task<CustomerAdd200Response> CustomerAddAsync(CustomerAdd customerAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// customer.add
        /// </summary>
        /// <remarks>
        /// Add customer into store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomerAdd200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerAdd200Response>> CustomerAddWithHttpInfoAsync(CustomerAdd customerAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// customer.address.add
        /// </summary>
        /// <remarks>
        /// Add customer address.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerAddressAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttributeAdd200Response</returns>
        System.Threading.Tasks.Task<AttributeAdd200Response> CustomerAddressAddAsync(CustomerAddressAdd customerAddressAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// customer.address.add
        /// </summary>
        /// <remarks>
        /// Add customer address.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerAddressAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttributeAdd200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttributeAdd200Response>> CustomerAddressAddWithHttpInfoAsync(CustomerAddressAdd customerAddressAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// customer.attribute.list
        /// </summary>
        /// <remarks>
        /// Get attributes for specific customer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Retrieves orders specified by customer id</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelResponseCustomerAttributeList</returns>
        System.Threading.Tasks.Task<ModelResponseCustomerAttributeList> CustomerAttributeListAsync(string customerId, int? count = default(int?), string? pageCursor = default(string?), string? storeId = default(string?), string? langId = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// customer.attribute.list
        /// </summary>
        /// <remarks>
        /// Get attributes for specific customer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Retrieves orders specified by customer id</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelResponseCustomerAttributeList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelResponseCustomerAttributeList>> CustomerAttributeListWithHttpInfoAsync(string customerId, int? count = default(int?), string? pageCursor = default(string?), string? storeId = default(string?), string? langId = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// customer.count
        /// </summary>
        /// <remarks>
        /// Get number of customers from store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Counts customers specified by ids (optional)</param>
        /// <param name="sinceId">Retrieve entities starting from the specified id. (optional)</param>
        /// <param name="customerListId">The numeric ID of the customer list in Demandware. (optional)</param>
        /// <param name="groupId">Customer group_id (optional)</param>
        /// <param name="storeId">Counts customer specified by store id (optional)</param>
        /// <param name="avail">Defines category&#39;s visibility status (optional, default to true)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Counts customers that are searched specified by field (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomerCount200Response</returns>
        System.Threading.Tasks.Task<CustomerCount200Response> CustomerCountAsync(string? ids = default(string?), string? sinceId = default(string?), string? customerListId = default(string?), string? groupId = default(string?), string? storeId = default(string?), bool? avail = default(bool?), string? findValue = default(string?), string? findWhere = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// customer.count
        /// </summary>
        /// <remarks>
        /// Get number of customers from store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Counts customers specified by ids (optional)</param>
        /// <param name="sinceId">Retrieve entities starting from the specified id. (optional)</param>
        /// <param name="customerListId">The numeric ID of the customer list in Demandware. (optional)</param>
        /// <param name="groupId">Customer group_id (optional)</param>
        /// <param name="storeId">Counts customer specified by store id (optional)</param>
        /// <param name="avail">Defines category&#39;s visibility status (optional, default to true)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Counts customers that are searched specified by field (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomerCount200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerCount200Response>> CustomerCountWithHttpInfoAsync(string? ids = default(string?), string? sinceId = default(string?), string? customerListId = default(string?), string? groupId = default(string?), string? storeId = default(string?), bool? avail = default(bool?), string? findValue = default(string?), string? findWhere = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// customer.delete
        /// </summary>
        /// <remarks>
        /// Delete customer from store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifies customer specified by the id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomerDelete200Response</returns>
        System.Threading.Tasks.Task<CustomerDelete200Response> CustomerDeleteAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// customer.delete
        /// </summary>
        /// <remarks>
        /// Delete customer from store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifies customer specified by the id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomerDelete200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerDelete200Response>> CustomerDeleteWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// customer.find
        /// </summary>
        /// <remarks>
        /// Find customers in store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findValue">Entity search that is specified by some value</param>
        /// <param name="findWhere">Entity search that is specified by the comma-separated unique fields (optional, default to &quot;email&quot;)</param>
        /// <param name="findParams">Entity search that is specified by comma-separated parameters (optional, default to &quot;whole_words&quot;)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomerFind200Response</returns>
        System.Threading.Tasks.Task<CustomerFind200Response> CustomerFindAsync(string findValue, string? findWhere = default(string?), string? findParams = default(string?), string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// customer.find
        /// </summary>
        /// <remarks>
        /// Find customers in store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findValue">Entity search that is specified by some value</param>
        /// <param name="findWhere">Entity search that is specified by the comma-separated unique fields (optional, default to &quot;email&quot;)</param>
        /// <param name="findParams">Entity search that is specified by comma-separated parameters (optional, default to &quot;whole_words&quot;)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomerFind200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerFind200Response>> CustomerFindWithHttpInfoAsync(string findValue, string? findWhere = default(string?), string? findParams = default(string?), string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// customer.group.add
        /// </summary>
        /// <remarks>
        /// Create customer group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Customer group name</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="storesIds">Assign customer group to the stores that is specified by comma-separated stores&#39; id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomerGroupAdd200Response</returns>
        System.Threading.Tasks.Task<CustomerGroupAdd200Response> CustomerGroupAddAsync(string name, string? storeId = default(string?), string? storesIds = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// customer.group.add
        /// </summary>
        /// <remarks>
        /// Create customer group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Customer group name</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="storesIds">Assign customer group to the stores that is specified by comma-separated stores&#39; id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomerGroupAdd200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerGroupAdd200Response>> CustomerGroupAddWithHttpInfoAsync(string name, string? storeId = default(string?), string? storesIds = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// customer.group.list
        /// </summary>
        /// <remarks>
        /// Get list of customers groups.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="groupIds">Groups that will be assigned to a customer (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name,additional_fields&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="disableCache">Disable cache for current request (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelResponseCustomerGroupList</returns>
        System.Threading.Tasks.Task<ModelResponseCustomerGroupList> CustomerGroupListAsync(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? groupIds = default(string?), string? storeId = default(string?), string? langId = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), bool? disableCache = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// customer.group.list
        /// </summary>
        /// <remarks>
        /// Get list of customers groups.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="groupIds">Groups that will be assigned to a customer (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name,additional_fields&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="disableCache">Disable cache for current request (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelResponseCustomerGroupList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelResponseCustomerGroupList>> CustomerGroupListWithHttpInfoAsync(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? groupIds = default(string?), string? storeId = default(string?), string? langId = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), bool? disableCache = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// customer.info
        /// </summary>
        /// <remarks>
        /// Get customers&#39; details from store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Retrieves customer&#39;s info specified by customer id</param>
        /// <param name="storeId">Retrieves customer info specified by store id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,email,first_name,last_name&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomerInfo200Response</returns>
        System.Threading.Tasks.Task<CustomerInfo200Response> CustomerInfoAsync(string id, string? storeId = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// customer.info
        /// </summary>
        /// <remarks>
        /// Get customers&#39; details from store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Retrieves customer&#39;s info specified by customer id</param>
        /// <param name="storeId">Retrieves customer info specified by store id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,email,first_name,last_name&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomerInfo200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerInfo200Response>> CustomerInfoWithHttpInfoAsync(string id, string? storeId = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// customer.list
        /// </summary>
        /// <remarks>
        /// Get list of customers from store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="ids">Retrieves customers specified by ids (optional)</param>
        /// <param name="sinceId">Retrieve entities starting from the specified id. (optional)</param>
        /// <param name="customerListId">The numeric ID of the customer list in Demandware. (optional)</param>
        /// <param name="groupId">Customer group_id (optional)</param>
        /// <param name="storeId">Retrieves customers specified by store id (optional)</param>
        /// <param name="avail">Defines category&#39;s visibility status (optional, default to true)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Customer search that is specified by field (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="sortBy">Set field to sort by (optional, default to &quot;created_time&quot;)</param>
        /// <param name="sortDirection">Set sorting direction (optional, default to &quot;asc&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,email,first_name,last_name&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelResponseCustomerList</returns>
        System.Threading.Tasks.Task<ModelResponseCustomerList> CustomerListAsync(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? ids = default(string?), string? sinceId = default(string?), string? customerListId = default(string?), string? groupId = default(string?), string? storeId = default(string?), bool? avail = default(bool?), string? findValue = default(string?), string? findWhere = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// customer.list
        /// </summary>
        /// <remarks>
        /// Get list of customers from store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="ids">Retrieves customers specified by ids (optional)</param>
        /// <param name="sinceId">Retrieve entities starting from the specified id. (optional)</param>
        /// <param name="customerListId">The numeric ID of the customer list in Demandware. (optional)</param>
        /// <param name="groupId">Customer group_id (optional)</param>
        /// <param name="storeId">Retrieves customers specified by store id (optional)</param>
        /// <param name="avail">Defines category&#39;s visibility status (optional, default to true)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Customer search that is specified by field (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="sortBy">Set field to sort by (optional, default to &quot;created_time&quot;)</param>
        /// <param name="sortDirection">Set sorting direction (optional, default to &quot;asc&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,email,first_name,last_name&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelResponseCustomerList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelResponseCustomerList>> CustomerListWithHttpInfoAsync(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? ids = default(string?), string? sinceId = default(string?), string? customerListId = default(string?), string? groupId = default(string?), string? storeId = default(string?), bool? avail = default(bool?), string? findValue = default(string?), string? findWhere = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// customer.update
        /// </summary>
        /// <remarks>
        /// Update information of customer in store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountConfigUpdate200Response</returns>
        System.Threading.Tasks.Task<AccountConfigUpdate200Response> CustomerUpdateAsync(CustomerUpdate customerUpdate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// customer.update
        /// </summary>
        /// <remarks>
        /// Update information of customer in store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountConfigUpdate200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountConfigUpdate200Response>> CustomerUpdateWithHttpInfoAsync(CustomerUpdate customerUpdate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// customer.wishlist.list
        /// </summary>
        /// <remarks>
        /// Get a Wish List of customer from the store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Retrieves orders specified by customer id</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="id">Entity id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;{return_code,return_message,pagination,result}&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelResponseCustomerWishlistList</returns>
        System.Threading.Tasks.Task<ModelResponseCustomerWishlistList> CustomerWishlistListAsync(string customerId, int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? id = default(string?), string? storeId = default(string?), string? responseFields = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// customer.wishlist.list
        /// </summary>
        /// <remarks>
        /// Get a Wish List of customer from the store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Retrieves orders specified by customer id</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="id">Entity id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;{return_code,return_message,pagination,result}&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelResponseCustomerWishlistList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelResponseCustomerWishlistList>> CustomerWishlistListWithHttpInfoAsync(string customerId, int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? id = default(string?), string? storeId = default(string?), string? responseFields = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomerApi : ICustomerApiSync, ICustomerApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CustomerApi : ICustomerApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CustomerApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CustomerApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CustomerApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CustomerApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// customer.add Add customer into store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomerAdd200Response</returns>
        public CustomerAdd200Response CustomerAdd(CustomerAdd customerAdd, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CustomerAdd200Response> localVarResponse = CustomerAddWithHttpInfo(customerAdd);
            return localVarResponse.Data;
        }

        /// <summary>
        /// customer.add Add customer into store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomerAdd200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<CustomerAdd200Response> CustomerAddWithHttpInfo(CustomerAdd customerAdd, int operationIndex = 0)
        {
            // verify the required parameter 'customerAdd' is set
            if (customerAdd == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'customerAdd' when calling CustomerApi->CustomerAdd");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = customerAdd;

            localVarRequestOptions.Operation = "CustomerApi.CustomerAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CustomerAdd200Response>("/customer.add.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CustomerAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// customer.add Add customer into store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomerAdd200Response</returns>
        public async System.Threading.Tasks.Task<CustomerAdd200Response> CustomerAddAsync(CustomerAdd customerAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CustomerAdd200Response> localVarResponse = await CustomerAddWithHttpInfoAsync(customerAdd, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// customer.add Add customer into store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomerAdd200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CustomerAdd200Response>> CustomerAddWithHttpInfoAsync(CustomerAdd customerAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'customerAdd' is set
            if (customerAdd == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'customerAdd' when calling CustomerApi->CustomerAdd");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = customerAdd;

            localVarRequestOptions.Operation = "CustomerApi.CustomerAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CustomerAdd200Response>("/customer.add.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CustomerAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// customer.address.add Add customer address.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerAddressAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttributeAdd200Response</returns>
        public AttributeAdd200Response CustomerAddressAdd(CustomerAddressAdd customerAddressAdd, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AttributeAdd200Response> localVarResponse = CustomerAddressAddWithHttpInfo(customerAddressAdd);
            return localVarResponse.Data;
        }

        /// <summary>
        /// customer.address.add Add customer address.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerAddressAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttributeAdd200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<AttributeAdd200Response> CustomerAddressAddWithHttpInfo(CustomerAddressAdd customerAddressAdd, int operationIndex = 0)
        {
            // verify the required parameter 'customerAddressAdd' is set
            if (customerAddressAdd == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'customerAddressAdd' when calling CustomerApi->CustomerAddressAdd");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = customerAddressAdd;

            localVarRequestOptions.Operation = "CustomerApi.CustomerAddressAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AttributeAdd200Response>("/customer.address.add.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CustomerAddressAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// customer.address.add Add customer address.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerAddressAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttributeAdd200Response</returns>
        public async System.Threading.Tasks.Task<AttributeAdd200Response> CustomerAddressAddAsync(CustomerAddressAdd customerAddressAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AttributeAdd200Response> localVarResponse = await CustomerAddressAddWithHttpInfoAsync(customerAddressAdd, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// customer.address.add Add customer address.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerAddressAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttributeAdd200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AttributeAdd200Response>> CustomerAddressAddWithHttpInfoAsync(CustomerAddressAdd customerAddressAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'customerAddressAdd' is set
            if (customerAddressAdd == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'customerAddressAdd' when calling CustomerApi->CustomerAddressAdd");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = customerAddressAdd;

            localVarRequestOptions.Operation = "CustomerApi.CustomerAddressAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AttributeAdd200Response>("/customer.address.add.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CustomerAddressAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// customer.attribute.list Get attributes for specific customer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Retrieves orders specified by customer id</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelResponseCustomerAttributeList</returns>
        public ModelResponseCustomerAttributeList CustomerAttributeList(string customerId, int? count = default(int?), string? pageCursor = default(string?), string? storeId = default(string?), string? langId = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModelResponseCustomerAttributeList> localVarResponse = CustomerAttributeListWithHttpInfo(customerId, count, pageCursor, storeId, langId, responseFields, varParams, exclude);
            return localVarResponse.Data;
        }

        /// <summary>
        /// customer.attribute.list Get attributes for specific customer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Retrieves orders specified by customer id</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelResponseCustomerAttributeList</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModelResponseCustomerAttributeList> CustomerAttributeListWithHttpInfo(string customerId, int? count = default(int?), string? pageCursor = default(string?), string? storeId = default(string?), string? langId = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomerApi->CustomerAttributeList");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (pageCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_cursor", pageCursor));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "customer_id", customerId));
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }

            localVarRequestOptions.Operation = "CustomerApi.CustomerAttributeList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ModelResponseCustomerAttributeList>("/customer.attribute.list.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CustomerAttributeList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// customer.attribute.list Get attributes for specific customer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Retrieves orders specified by customer id</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelResponseCustomerAttributeList</returns>
        public async System.Threading.Tasks.Task<ModelResponseCustomerAttributeList> CustomerAttributeListAsync(string customerId, int? count = default(int?), string? pageCursor = default(string?), string? storeId = default(string?), string? langId = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModelResponseCustomerAttributeList> localVarResponse = await CustomerAttributeListWithHttpInfoAsync(customerId, count, pageCursor, storeId, langId, responseFields, varParams, exclude, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// customer.attribute.list Get attributes for specific customer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Retrieves orders specified by customer id</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelResponseCustomerAttributeList)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModelResponseCustomerAttributeList>> CustomerAttributeListWithHttpInfoAsync(string customerId, int? count = default(int?), string? pageCursor = default(string?), string? storeId = default(string?), string? langId = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomerApi->CustomerAttributeList");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (pageCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_cursor", pageCursor));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "customer_id", customerId));
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }

            localVarRequestOptions.Operation = "CustomerApi.CustomerAttributeList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ModelResponseCustomerAttributeList>("/customer.attribute.list.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CustomerAttributeList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// customer.count Get number of customers from store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Counts customers specified by ids (optional)</param>
        /// <param name="sinceId">Retrieve entities starting from the specified id. (optional)</param>
        /// <param name="customerListId">The numeric ID of the customer list in Demandware. (optional)</param>
        /// <param name="groupId">Customer group_id (optional)</param>
        /// <param name="storeId">Counts customer specified by store id (optional)</param>
        /// <param name="avail">Defines category&#39;s visibility status (optional, default to true)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Counts customers that are searched specified by field (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomerCount200Response</returns>
        public CustomerCount200Response CustomerCount(string? ids = default(string?), string? sinceId = default(string?), string? customerListId = default(string?), string? groupId = default(string?), string? storeId = default(string?), bool? avail = default(bool?), string? findValue = default(string?), string? findWhere = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CustomerCount200Response> localVarResponse = CustomerCountWithHttpInfo(ids, sinceId, customerListId, groupId, storeId, avail, findValue, findWhere, createdFrom, createdTo, modifiedFrom, modifiedTo);
            return localVarResponse.Data;
        }

        /// <summary>
        /// customer.count Get number of customers from store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Counts customers specified by ids (optional)</param>
        /// <param name="sinceId">Retrieve entities starting from the specified id. (optional)</param>
        /// <param name="customerListId">The numeric ID of the customer list in Demandware. (optional)</param>
        /// <param name="groupId">Customer group_id (optional)</param>
        /// <param name="storeId">Counts customer specified by store id (optional)</param>
        /// <param name="avail">Defines category&#39;s visibility status (optional, default to true)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Counts customers that are searched specified by field (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomerCount200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<CustomerCount200Response> CustomerCountWithHttpInfo(string? ids = default(string?), string? sinceId = default(string?), string? customerListId = default(string?), string? groupId = default(string?), string? storeId = default(string?), bool? avail = default(bool?), string? findValue = default(string?), string? findWhere = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (sinceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "since_id", sinceId));
            }
            if (customerListId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "customer_list_id", customerListId));
            }
            if (groupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "group_id", groupId));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (avail != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "avail", avail));
            }
            if (findValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_value", findValue));
            }
            if (findWhere != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_where", findWhere));
            }
            if (createdFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_from", createdFrom));
            }
            if (createdTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_to", createdTo));
            }
            if (modifiedFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_from", modifiedFrom));
            }
            if (modifiedTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_to", modifiedTo));
            }

            localVarRequestOptions.Operation = "CustomerApi.CustomerCount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CustomerCount200Response>("/customer.count.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CustomerCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// customer.count Get number of customers from store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Counts customers specified by ids (optional)</param>
        /// <param name="sinceId">Retrieve entities starting from the specified id. (optional)</param>
        /// <param name="customerListId">The numeric ID of the customer list in Demandware. (optional)</param>
        /// <param name="groupId">Customer group_id (optional)</param>
        /// <param name="storeId">Counts customer specified by store id (optional)</param>
        /// <param name="avail">Defines category&#39;s visibility status (optional, default to true)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Counts customers that are searched specified by field (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomerCount200Response</returns>
        public async System.Threading.Tasks.Task<CustomerCount200Response> CustomerCountAsync(string? ids = default(string?), string? sinceId = default(string?), string? customerListId = default(string?), string? groupId = default(string?), string? storeId = default(string?), bool? avail = default(bool?), string? findValue = default(string?), string? findWhere = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CustomerCount200Response> localVarResponse = await CustomerCountWithHttpInfoAsync(ids, sinceId, customerListId, groupId, storeId, avail, findValue, findWhere, createdFrom, createdTo, modifiedFrom, modifiedTo, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// customer.count Get number of customers from store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Counts customers specified by ids (optional)</param>
        /// <param name="sinceId">Retrieve entities starting from the specified id. (optional)</param>
        /// <param name="customerListId">The numeric ID of the customer list in Demandware. (optional)</param>
        /// <param name="groupId">Customer group_id (optional)</param>
        /// <param name="storeId">Counts customer specified by store id (optional)</param>
        /// <param name="avail">Defines category&#39;s visibility status (optional, default to true)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Counts customers that are searched specified by field (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomerCount200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CustomerCount200Response>> CustomerCountWithHttpInfoAsync(string? ids = default(string?), string? sinceId = default(string?), string? customerListId = default(string?), string? groupId = default(string?), string? storeId = default(string?), bool? avail = default(bool?), string? findValue = default(string?), string? findWhere = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (sinceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "since_id", sinceId));
            }
            if (customerListId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "customer_list_id", customerListId));
            }
            if (groupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "group_id", groupId));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (avail != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "avail", avail));
            }
            if (findValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_value", findValue));
            }
            if (findWhere != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_where", findWhere));
            }
            if (createdFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_from", createdFrom));
            }
            if (createdTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_to", createdTo));
            }
            if (modifiedFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_from", modifiedFrom));
            }
            if (modifiedTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_to", modifiedTo));
            }

            localVarRequestOptions.Operation = "CustomerApi.CustomerCount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CustomerCount200Response>("/customer.count.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CustomerCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// customer.delete Delete customer from store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifies customer specified by the id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomerDelete200Response</returns>
        public CustomerDelete200Response CustomerDelete(string id, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CustomerDelete200Response> localVarResponse = CustomerDeleteWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// customer.delete Delete customer from store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifies customer specified by the id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomerDelete200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<CustomerDelete200Response> CustomerDeleteWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomerDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));

            localVarRequestOptions.Operation = "CustomerApi.CustomerDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<CustomerDelete200Response>("/customer.delete.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CustomerDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// customer.delete Delete customer from store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifies customer specified by the id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomerDelete200Response</returns>
        public async System.Threading.Tasks.Task<CustomerDelete200Response> CustomerDeleteAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CustomerDelete200Response> localVarResponse = await CustomerDeleteWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// customer.delete Delete customer from store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifies customer specified by the id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomerDelete200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CustomerDelete200Response>> CustomerDeleteWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomerDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));

            localVarRequestOptions.Operation = "CustomerApi.CustomerDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<CustomerDelete200Response>("/customer.delete.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CustomerDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// customer.find Find customers in store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findValue">Entity search that is specified by some value</param>
        /// <param name="findWhere">Entity search that is specified by the comma-separated unique fields (optional, default to &quot;email&quot;)</param>
        /// <param name="findParams">Entity search that is specified by comma-separated parameters (optional, default to &quot;whole_words&quot;)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomerFind200Response</returns>
        public CustomerFind200Response CustomerFind(string findValue, string? findWhere = default(string?), string? findParams = default(string?), string? storeId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CustomerFind200Response> localVarResponse = CustomerFindWithHttpInfo(findValue, findWhere, findParams, storeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// customer.find Find customers in store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findValue">Entity search that is specified by some value</param>
        /// <param name="findWhere">Entity search that is specified by the comma-separated unique fields (optional, default to &quot;email&quot;)</param>
        /// <param name="findParams">Entity search that is specified by comma-separated parameters (optional, default to &quot;whole_words&quot;)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomerFind200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<CustomerFind200Response> CustomerFindWithHttpInfo(string findValue, string? findWhere = default(string?), string? findParams = default(string?), string? storeId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'findValue' is set
            if (findValue == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'findValue' when calling CustomerApi->CustomerFind");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_value", findValue));
            if (findWhere != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_where", findWhere));
            }
            if (findParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_params", findParams));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }

            localVarRequestOptions.Operation = "CustomerApi.CustomerFind";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CustomerFind200Response>("/customer.find.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CustomerFind", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// customer.find Find customers in store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findValue">Entity search that is specified by some value</param>
        /// <param name="findWhere">Entity search that is specified by the comma-separated unique fields (optional, default to &quot;email&quot;)</param>
        /// <param name="findParams">Entity search that is specified by comma-separated parameters (optional, default to &quot;whole_words&quot;)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomerFind200Response</returns>
        public async System.Threading.Tasks.Task<CustomerFind200Response> CustomerFindAsync(string findValue, string? findWhere = default(string?), string? findParams = default(string?), string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CustomerFind200Response> localVarResponse = await CustomerFindWithHttpInfoAsync(findValue, findWhere, findParams, storeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// customer.find Find customers in store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findValue">Entity search that is specified by some value</param>
        /// <param name="findWhere">Entity search that is specified by the comma-separated unique fields (optional, default to &quot;email&quot;)</param>
        /// <param name="findParams">Entity search that is specified by comma-separated parameters (optional, default to &quot;whole_words&quot;)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomerFind200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CustomerFind200Response>> CustomerFindWithHttpInfoAsync(string findValue, string? findWhere = default(string?), string? findParams = default(string?), string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'findValue' is set
            if (findValue == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'findValue' when calling CustomerApi->CustomerFind");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_value", findValue));
            if (findWhere != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_where", findWhere));
            }
            if (findParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_params", findParams));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }

            localVarRequestOptions.Operation = "CustomerApi.CustomerFind";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CustomerFind200Response>("/customer.find.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CustomerFind", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// customer.group.add Create customer group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Customer group name</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="storesIds">Assign customer group to the stores that is specified by comma-separated stores&#39; id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomerGroupAdd200Response</returns>
        public CustomerGroupAdd200Response CustomerGroupAdd(string name, string? storeId = default(string?), string? storesIds = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CustomerGroupAdd200Response> localVarResponse = CustomerGroupAddWithHttpInfo(name, storeId, storesIds);
            return localVarResponse.Data;
        }

        /// <summary>
        /// customer.group.add Create customer group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Customer group name</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="storesIds">Assign customer group to the stores that is specified by comma-separated stores&#39; id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomerGroupAdd200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<CustomerGroupAdd200Response> CustomerGroupAddWithHttpInfo(string name, string? storeId = default(string?), string? storesIds = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'name' when calling CustomerApi->CustomerGroupAdd");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (storesIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "stores_ids", storesIds));
            }

            localVarRequestOptions.Operation = "CustomerApi.CustomerGroupAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CustomerGroupAdd200Response>("/customer.group.add.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CustomerGroupAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// customer.group.add Create customer group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Customer group name</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="storesIds">Assign customer group to the stores that is specified by comma-separated stores&#39; id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomerGroupAdd200Response</returns>
        public async System.Threading.Tasks.Task<CustomerGroupAdd200Response> CustomerGroupAddAsync(string name, string? storeId = default(string?), string? storesIds = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CustomerGroupAdd200Response> localVarResponse = await CustomerGroupAddWithHttpInfoAsync(name, storeId, storesIds, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// customer.group.add Create customer group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Customer group name</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="storesIds">Assign customer group to the stores that is specified by comma-separated stores&#39; id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomerGroupAdd200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CustomerGroupAdd200Response>> CustomerGroupAddWithHttpInfoAsync(string name, string? storeId = default(string?), string? storesIds = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'name' when calling CustomerApi->CustomerGroupAdd");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (storesIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "stores_ids", storesIds));
            }

            localVarRequestOptions.Operation = "CustomerApi.CustomerGroupAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CustomerGroupAdd200Response>("/customer.group.add.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CustomerGroupAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// customer.group.list Get list of customers groups.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="groupIds">Groups that will be assigned to a customer (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name,additional_fields&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="disableCache">Disable cache for current request (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelResponseCustomerGroupList</returns>
        public ModelResponseCustomerGroupList CustomerGroupList(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? groupIds = default(string?), string? storeId = default(string?), string? langId = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), bool? disableCache = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModelResponseCustomerGroupList> localVarResponse = CustomerGroupListWithHttpInfo(start, count, pageCursor, groupIds, storeId, langId, responseFields, varParams, exclude, disableCache);
            return localVarResponse.Data;
        }

        /// <summary>
        /// customer.group.list Get list of customers groups.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="groupIds">Groups that will be assigned to a customer (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name,additional_fields&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="disableCache">Disable cache for current request (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelResponseCustomerGroupList</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModelResponseCustomerGroupList> CustomerGroupListWithHttpInfo(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? groupIds = default(string?), string? storeId = default(string?), string? langId = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), bool? disableCache = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (pageCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_cursor", pageCursor));
            }
            if (groupIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "group_ids", groupIds));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }
            if (disableCache != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "disable_cache", disableCache));
            }

            localVarRequestOptions.Operation = "CustomerApi.CustomerGroupList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ModelResponseCustomerGroupList>("/customer.group.list.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CustomerGroupList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// customer.group.list Get list of customers groups.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="groupIds">Groups that will be assigned to a customer (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name,additional_fields&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="disableCache">Disable cache for current request (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelResponseCustomerGroupList</returns>
        public async System.Threading.Tasks.Task<ModelResponseCustomerGroupList> CustomerGroupListAsync(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? groupIds = default(string?), string? storeId = default(string?), string? langId = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), bool? disableCache = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModelResponseCustomerGroupList> localVarResponse = await CustomerGroupListWithHttpInfoAsync(start, count, pageCursor, groupIds, storeId, langId, responseFields, varParams, exclude, disableCache, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// customer.group.list Get list of customers groups.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="groupIds">Groups that will be assigned to a customer (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name,additional_fields&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="disableCache">Disable cache for current request (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelResponseCustomerGroupList)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModelResponseCustomerGroupList>> CustomerGroupListWithHttpInfoAsync(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? groupIds = default(string?), string? storeId = default(string?), string? langId = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), bool? disableCache = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (pageCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_cursor", pageCursor));
            }
            if (groupIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "group_ids", groupIds));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }
            if (disableCache != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "disable_cache", disableCache));
            }

            localVarRequestOptions.Operation = "CustomerApi.CustomerGroupList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ModelResponseCustomerGroupList>("/customer.group.list.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CustomerGroupList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// customer.info Get customers&#39; details from store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Retrieves customer&#39;s info specified by customer id</param>
        /// <param name="storeId">Retrieves customer info specified by store id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,email,first_name,last_name&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomerInfo200Response</returns>
        public CustomerInfo200Response CustomerInfo(string id, string? storeId = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CustomerInfo200Response> localVarResponse = CustomerInfoWithHttpInfo(id, storeId, responseFields, varParams, exclude);
            return localVarResponse.Data;
        }

        /// <summary>
        /// customer.info Get customers&#39; details from store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Retrieves customer&#39;s info specified by customer id</param>
        /// <param name="storeId">Retrieves customer info specified by store id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,email,first_name,last_name&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomerInfo200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<CustomerInfo200Response> CustomerInfoWithHttpInfo(string id, string? storeId = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomerInfo");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }

            localVarRequestOptions.Operation = "CustomerApi.CustomerInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CustomerInfo200Response>("/customer.info.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CustomerInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// customer.info Get customers&#39; details from store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Retrieves customer&#39;s info specified by customer id</param>
        /// <param name="storeId">Retrieves customer info specified by store id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,email,first_name,last_name&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomerInfo200Response</returns>
        public async System.Threading.Tasks.Task<CustomerInfo200Response> CustomerInfoAsync(string id, string? storeId = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CustomerInfo200Response> localVarResponse = await CustomerInfoWithHttpInfoAsync(id, storeId, responseFields, varParams, exclude, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// customer.info Get customers&#39; details from store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Retrieves customer&#39;s info specified by customer id</param>
        /// <param name="storeId">Retrieves customer info specified by store id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,email,first_name,last_name&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomerInfo200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CustomerInfo200Response>> CustomerInfoWithHttpInfoAsync(string id, string? storeId = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomerInfo");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }

            localVarRequestOptions.Operation = "CustomerApi.CustomerInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CustomerInfo200Response>("/customer.info.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CustomerInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// customer.list Get list of customers from store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="ids">Retrieves customers specified by ids (optional)</param>
        /// <param name="sinceId">Retrieve entities starting from the specified id. (optional)</param>
        /// <param name="customerListId">The numeric ID of the customer list in Demandware. (optional)</param>
        /// <param name="groupId">Customer group_id (optional)</param>
        /// <param name="storeId">Retrieves customers specified by store id (optional)</param>
        /// <param name="avail">Defines category&#39;s visibility status (optional, default to true)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Customer search that is specified by field (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="sortBy">Set field to sort by (optional, default to &quot;created_time&quot;)</param>
        /// <param name="sortDirection">Set sorting direction (optional, default to &quot;asc&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,email,first_name,last_name&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelResponseCustomerList</returns>
        public ModelResponseCustomerList CustomerList(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? ids = default(string?), string? sinceId = default(string?), string? customerListId = default(string?), string? groupId = default(string?), string? storeId = default(string?), bool? avail = default(bool?), string? findValue = default(string?), string? findWhere = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModelResponseCustomerList> localVarResponse = CustomerListWithHttpInfo(start, count, pageCursor, ids, sinceId, customerListId, groupId, storeId, avail, findValue, findWhere, createdFrom, createdTo, modifiedFrom, modifiedTo, sortBy, sortDirection, responseFields, varParams, exclude);
            return localVarResponse.Data;
        }

        /// <summary>
        /// customer.list Get list of customers from store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="ids">Retrieves customers specified by ids (optional)</param>
        /// <param name="sinceId">Retrieve entities starting from the specified id. (optional)</param>
        /// <param name="customerListId">The numeric ID of the customer list in Demandware. (optional)</param>
        /// <param name="groupId">Customer group_id (optional)</param>
        /// <param name="storeId">Retrieves customers specified by store id (optional)</param>
        /// <param name="avail">Defines category&#39;s visibility status (optional, default to true)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Customer search that is specified by field (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="sortBy">Set field to sort by (optional, default to &quot;created_time&quot;)</param>
        /// <param name="sortDirection">Set sorting direction (optional, default to &quot;asc&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,email,first_name,last_name&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelResponseCustomerList</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModelResponseCustomerList> CustomerListWithHttpInfo(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? ids = default(string?), string? sinceId = default(string?), string? customerListId = default(string?), string? groupId = default(string?), string? storeId = default(string?), bool? avail = default(bool?), string? findValue = default(string?), string? findWhere = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (pageCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_cursor", pageCursor));
            }
            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (sinceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "since_id", sinceId));
            }
            if (customerListId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "customer_list_id", customerListId));
            }
            if (groupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "group_id", groupId));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (avail != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "avail", avail));
            }
            if (findValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_value", findValue));
            }
            if (findWhere != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_where", findWhere));
            }
            if (createdFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_from", createdFrom));
            }
            if (createdTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_to", createdTo));
            }
            if (modifiedFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_from", modifiedFrom));
            }
            if (modifiedTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_to", modifiedTo));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sort_direction", sortDirection));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }

            localVarRequestOptions.Operation = "CustomerApi.CustomerList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ModelResponseCustomerList>("/customer.list.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CustomerList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// customer.list Get list of customers from store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="ids">Retrieves customers specified by ids (optional)</param>
        /// <param name="sinceId">Retrieve entities starting from the specified id. (optional)</param>
        /// <param name="customerListId">The numeric ID of the customer list in Demandware. (optional)</param>
        /// <param name="groupId">Customer group_id (optional)</param>
        /// <param name="storeId">Retrieves customers specified by store id (optional)</param>
        /// <param name="avail">Defines category&#39;s visibility status (optional, default to true)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Customer search that is specified by field (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="sortBy">Set field to sort by (optional, default to &quot;created_time&quot;)</param>
        /// <param name="sortDirection">Set sorting direction (optional, default to &quot;asc&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,email,first_name,last_name&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelResponseCustomerList</returns>
        public async System.Threading.Tasks.Task<ModelResponseCustomerList> CustomerListAsync(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? ids = default(string?), string? sinceId = default(string?), string? customerListId = default(string?), string? groupId = default(string?), string? storeId = default(string?), bool? avail = default(bool?), string? findValue = default(string?), string? findWhere = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModelResponseCustomerList> localVarResponse = await CustomerListWithHttpInfoAsync(start, count, pageCursor, ids, sinceId, customerListId, groupId, storeId, avail, findValue, findWhere, createdFrom, createdTo, modifiedFrom, modifiedTo, sortBy, sortDirection, responseFields, varParams, exclude, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// customer.list Get list of customers from store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="ids">Retrieves customers specified by ids (optional)</param>
        /// <param name="sinceId">Retrieve entities starting from the specified id. (optional)</param>
        /// <param name="customerListId">The numeric ID of the customer list in Demandware. (optional)</param>
        /// <param name="groupId">Customer group_id (optional)</param>
        /// <param name="storeId">Retrieves customers specified by store id (optional)</param>
        /// <param name="avail">Defines category&#39;s visibility status (optional, default to true)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Customer search that is specified by field (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="sortBy">Set field to sort by (optional, default to &quot;created_time&quot;)</param>
        /// <param name="sortDirection">Set sorting direction (optional, default to &quot;asc&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,email,first_name,last_name&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelResponseCustomerList)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModelResponseCustomerList>> CustomerListWithHttpInfoAsync(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? ids = default(string?), string? sinceId = default(string?), string? customerListId = default(string?), string? groupId = default(string?), string? storeId = default(string?), bool? avail = default(bool?), string? findValue = default(string?), string? findWhere = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (pageCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_cursor", pageCursor));
            }
            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (sinceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "since_id", sinceId));
            }
            if (customerListId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "customer_list_id", customerListId));
            }
            if (groupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "group_id", groupId));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (avail != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "avail", avail));
            }
            if (findValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_value", findValue));
            }
            if (findWhere != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_where", findWhere));
            }
            if (createdFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_from", createdFrom));
            }
            if (createdTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_to", createdTo));
            }
            if (modifiedFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_from", modifiedFrom));
            }
            if (modifiedTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_to", modifiedTo));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sort_direction", sortDirection));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }

            localVarRequestOptions.Operation = "CustomerApi.CustomerList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ModelResponseCustomerList>("/customer.list.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CustomerList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// customer.update Update information of customer in store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountConfigUpdate200Response</returns>
        public AccountConfigUpdate200Response CustomerUpdate(CustomerUpdate customerUpdate, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AccountConfigUpdate200Response> localVarResponse = CustomerUpdateWithHttpInfo(customerUpdate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// customer.update Update information of customer in store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountConfigUpdate200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<AccountConfigUpdate200Response> CustomerUpdateWithHttpInfo(CustomerUpdate customerUpdate, int operationIndex = 0)
        {
            // verify the required parameter 'customerUpdate' is set
            if (customerUpdate == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'customerUpdate' when calling CustomerApi->CustomerUpdate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = customerUpdate;

            localVarRequestOptions.Operation = "CustomerApi.CustomerUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<AccountConfigUpdate200Response>("/customer.update.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CustomerUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// customer.update Update information of customer in store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountConfigUpdate200Response</returns>
        public async System.Threading.Tasks.Task<AccountConfigUpdate200Response> CustomerUpdateAsync(CustomerUpdate customerUpdate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AccountConfigUpdate200Response> localVarResponse = await CustomerUpdateWithHttpInfoAsync(customerUpdate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// customer.update Update information of customer in store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountConfigUpdate200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AccountConfigUpdate200Response>> CustomerUpdateWithHttpInfoAsync(CustomerUpdate customerUpdate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'customerUpdate' is set
            if (customerUpdate == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'customerUpdate' when calling CustomerApi->CustomerUpdate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = customerUpdate;

            localVarRequestOptions.Operation = "CustomerApi.CustomerUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<AccountConfigUpdate200Response>("/customer.update.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CustomerUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// customer.wishlist.list Get a Wish List of customer from the store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Retrieves orders specified by customer id</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="id">Entity id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;{return_code,return_message,pagination,result}&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelResponseCustomerWishlistList</returns>
        public ModelResponseCustomerWishlistList CustomerWishlistList(string customerId, int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? id = default(string?), string? storeId = default(string?), string? responseFields = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModelResponseCustomerWishlistList> localVarResponse = CustomerWishlistListWithHttpInfo(customerId, start, count, pageCursor, id, storeId, responseFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// customer.wishlist.list Get a Wish List of customer from the store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Retrieves orders specified by customer id</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="id">Entity id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;{return_code,return_message,pagination,result}&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelResponseCustomerWishlistList</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModelResponseCustomerWishlistList> CustomerWishlistListWithHttpInfo(string customerId, int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? id = default(string?), string? storeId = default(string?), string? responseFields = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomerApi->CustomerWishlistList");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (pageCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_cursor", pageCursor));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "customer_id", customerId));
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }

            localVarRequestOptions.Operation = "CustomerApi.CustomerWishlistList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ModelResponseCustomerWishlistList>("/customer.wishlist.list.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CustomerWishlistList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// customer.wishlist.list Get a Wish List of customer from the store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Retrieves orders specified by customer id</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="id">Entity id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;{return_code,return_message,pagination,result}&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelResponseCustomerWishlistList</returns>
        public async System.Threading.Tasks.Task<ModelResponseCustomerWishlistList> CustomerWishlistListAsync(string customerId, int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? id = default(string?), string? storeId = default(string?), string? responseFields = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModelResponseCustomerWishlistList> localVarResponse = await CustomerWishlistListWithHttpInfoAsync(customerId, start, count, pageCursor, id, storeId, responseFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// customer.wishlist.list Get a Wish List of customer from the store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Retrieves orders specified by customer id</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="id">Entity id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;{return_code,return_message,pagination,result}&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelResponseCustomerWishlistList)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModelResponseCustomerWishlistList>> CustomerWishlistListWithHttpInfoAsync(string customerId, int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? id = default(string?), string? storeId = default(string?), string? responseFields = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomerApi->CustomerWishlistList");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (pageCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_cursor", pageCursor));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "customer_id", customerId));
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }

            localVarRequestOptions.Operation = "CustomerApi.CustomerWishlistList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ModelResponseCustomerWishlistList>("/customer.wishlist.list.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CustomerWishlistList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
