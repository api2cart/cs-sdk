/*
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBasketApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// basket.info
        /// </summary>
        /// <remarks>
        /// Retrieve basket information.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BasketInfo200Response</returns>
        BasketInfo200Response BasketInfo(string id, string? storeId = default(string?), string? varParams = default(string?), string? exclude = default(string?), string? responseFields = default(string?), int operationIndex = 0);

        /// <summary>
        /// basket.info
        /// </summary>
        /// <remarks>
        /// Retrieve basket information.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BasketInfo200Response</returns>
        ApiResponse<BasketInfo200Response> BasketInfoWithHttpInfo(string id, string? storeId = default(string?), string? varParams = default(string?), string? exclude = default(string?), string? responseFields = default(string?), int operationIndex = 0);
        /// <summary>
        /// basket.item.add
        /// </summary>
        /// <remarks>
        /// Add item to basket
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Retrieves orders specified by customer id</param>
        /// <param name="productId">Defines id of the product which should be added to the basket</param>
        /// <param name="variantId">Defines product&#39;s variants specified by variant id (optional)</param>
        /// <param name="quantity">Defines new items quantity (optional, default to 0M)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BasketItemAdd200Response</returns>
        BasketItemAdd200Response BasketItemAdd(string customerId, string productId, string? variantId = default(string?), decimal? quantity = default(decimal?), string? storeId = default(string?), int operationIndex = 0);

        /// <summary>
        /// basket.item.add
        /// </summary>
        /// <remarks>
        /// Add item to basket
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Retrieves orders specified by customer id</param>
        /// <param name="productId">Defines id of the product which should be added to the basket</param>
        /// <param name="variantId">Defines product&#39;s variants specified by variant id (optional)</param>
        /// <param name="quantity">Defines new items quantity (optional, default to 0M)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BasketItemAdd200Response</returns>
        ApiResponse<BasketItemAdd200Response> BasketItemAddWithHttpInfo(string customerId, string productId, string? variantId = default(string?), decimal? quantity = default(decimal?), string? storeId = default(string?), int operationIndex = 0);
        /// <summary>
        /// basket.live_shipping_service.create
        /// </summary>
        /// <remarks>
        /// Create live shipping rate service.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Shipping Service Name</param>
        /// <param name="callback">Callback url that returns shipping rates. It should be able to accept POST requests with json data.</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BasketLiveShippingServiceCreate200Response</returns>
        BasketLiveShippingServiceCreate200Response BasketLiveShippingServiceCreate(string name, string callback, string? storeId = default(string?), int operationIndex = 0);

        /// <summary>
        /// basket.live_shipping_service.create
        /// </summary>
        /// <remarks>
        /// Create live shipping rate service.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Shipping Service Name</param>
        /// <param name="callback">Callback url that returns shipping rates. It should be able to accept POST requests with json data.</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BasketLiveShippingServiceCreate200Response</returns>
        ApiResponse<BasketLiveShippingServiceCreate200Response> BasketLiveShippingServiceCreateWithHttpInfo(string name, string callback, string? storeId = default(string?), int operationIndex = 0);
        /// <summary>
        /// basket.live_shipping_service.delete
        /// </summary>
        /// <remarks>
        /// Delete live shipping rate service.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BasketLiveShippingServiceDelete200Response</returns>
        BasketLiveShippingServiceDelete200Response BasketLiveShippingServiceDelete(int id, int operationIndex = 0);

        /// <summary>
        /// basket.live_shipping_service.delete
        /// </summary>
        /// <remarks>
        /// Delete live shipping rate service.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BasketLiveShippingServiceDelete200Response</returns>
        ApiResponse<BasketLiveShippingServiceDelete200Response> BasketLiveShippingServiceDeleteWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// basket.live_shipping_service.list
        /// </summary>
        /// <remarks>
        /// Retrieve a list of live shipping rate services.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BasketLiveShippingServiceList200Response</returns>
        BasketLiveShippingServiceList200Response BasketLiveShippingServiceList(string? storeId = default(string?), int? start = default(int?), int? count = default(int?), int operationIndex = 0);

        /// <summary>
        /// basket.live_shipping_service.list
        /// </summary>
        /// <remarks>
        /// Retrieve a list of live shipping rate services.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BasketLiveShippingServiceList200Response</returns>
        ApiResponse<BasketLiveShippingServiceList200Response> BasketLiveShippingServiceListWithHttpInfo(string? storeId = default(string?), int? start = default(int?), int? count = default(int?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBasketApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// basket.info
        /// </summary>
        /// <remarks>
        /// Retrieve basket information.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BasketInfo200Response</returns>
        System.Threading.Tasks.Task<BasketInfo200Response> BasketInfoAsync(string id, string? storeId = default(string?), string? varParams = default(string?), string? exclude = default(string?), string? responseFields = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// basket.info
        /// </summary>
        /// <remarks>
        /// Retrieve basket information.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BasketInfo200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<BasketInfo200Response>> BasketInfoWithHttpInfoAsync(string id, string? storeId = default(string?), string? varParams = default(string?), string? exclude = default(string?), string? responseFields = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// basket.item.add
        /// </summary>
        /// <remarks>
        /// Add item to basket
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Retrieves orders specified by customer id</param>
        /// <param name="productId">Defines id of the product which should be added to the basket</param>
        /// <param name="variantId">Defines product&#39;s variants specified by variant id (optional)</param>
        /// <param name="quantity">Defines new items quantity (optional, default to 0M)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BasketItemAdd200Response</returns>
        System.Threading.Tasks.Task<BasketItemAdd200Response> BasketItemAddAsync(string customerId, string productId, string? variantId = default(string?), decimal? quantity = default(decimal?), string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// basket.item.add
        /// </summary>
        /// <remarks>
        /// Add item to basket
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Retrieves orders specified by customer id</param>
        /// <param name="productId">Defines id of the product which should be added to the basket</param>
        /// <param name="variantId">Defines product&#39;s variants specified by variant id (optional)</param>
        /// <param name="quantity">Defines new items quantity (optional, default to 0M)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BasketItemAdd200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<BasketItemAdd200Response>> BasketItemAddWithHttpInfoAsync(string customerId, string productId, string? variantId = default(string?), decimal? quantity = default(decimal?), string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// basket.live_shipping_service.create
        /// </summary>
        /// <remarks>
        /// Create live shipping rate service.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Shipping Service Name</param>
        /// <param name="callback">Callback url that returns shipping rates. It should be able to accept POST requests with json data.</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BasketLiveShippingServiceCreate200Response</returns>
        System.Threading.Tasks.Task<BasketLiveShippingServiceCreate200Response> BasketLiveShippingServiceCreateAsync(string name, string callback, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// basket.live_shipping_service.create
        /// </summary>
        /// <remarks>
        /// Create live shipping rate service.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Shipping Service Name</param>
        /// <param name="callback">Callback url that returns shipping rates. It should be able to accept POST requests with json data.</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BasketLiveShippingServiceCreate200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<BasketLiveShippingServiceCreate200Response>> BasketLiveShippingServiceCreateWithHttpInfoAsync(string name, string callback, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// basket.live_shipping_service.delete
        /// </summary>
        /// <remarks>
        /// Delete live shipping rate service.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BasketLiveShippingServiceDelete200Response</returns>
        System.Threading.Tasks.Task<BasketLiveShippingServiceDelete200Response> BasketLiveShippingServiceDeleteAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// basket.live_shipping_service.delete
        /// </summary>
        /// <remarks>
        /// Delete live shipping rate service.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BasketLiveShippingServiceDelete200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<BasketLiveShippingServiceDelete200Response>> BasketLiveShippingServiceDeleteWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// basket.live_shipping_service.list
        /// </summary>
        /// <remarks>
        /// Retrieve a list of live shipping rate services.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BasketLiveShippingServiceList200Response</returns>
        System.Threading.Tasks.Task<BasketLiveShippingServiceList200Response> BasketLiveShippingServiceListAsync(string? storeId = default(string?), int? start = default(int?), int? count = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// basket.live_shipping_service.list
        /// </summary>
        /// <remarks>
        /// Retrieve a list of live shipping rate services.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BasketLiveShippingServiceList200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<BasketLiveShippingServiceList200Response>> BasketLiveShippingServiceListWithHttpInfoAsync(string? storeId = default(string?), int? start = default(int?), int? count = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBasketApi : IBasketApiSync, IBasketApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BasketApi : IBasketApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BasketApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BasketApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BasketApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BasketApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BasketApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BasketApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BasketApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public BasketApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// basket.info Retrieve basket information.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BasketInfo200Response</returns>
        public BasketInfo200Response BasketInfo(string id, string? storeId = default(string?), string? varParams = default(string?), string? exclude = default(string?), string? responseFields = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<BasketInfo200Response> localVarResponse = BasketInfoWithHttpInfo(id, storeId, varParams, exclude, responseFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// basket.info Retrieve basket information.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BasketInfo200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<BasketInfo200Response> BasketInfoWithHttpInfo(string id, string? storeId = default(string?), string? varParams = default(string?), string? exclude = default(string?), string? responseFields = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling BasketApi->BasketInfo");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }

            localVarRequestOptions.Operation = "BasketApi.BasketInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BasketInfo200Response>("/basket.info.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BasketInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// basket.info Retrieve basket information.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BasketInfo200Response</returns>
        public async System.Threading.Tasks.Task<BasketInfo200Response> BasketInfoAsync(string id, string? storeId = default(string?), string? varParams = default(string?), string? exclude = default(string?), string? responseFields = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BasketInfo200Response> localVarResponse = await BasketInfoWithHttpInfoAsync(id, storeId, varParams, exclude, responseFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// basket.info Retrieve basket information.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BasketInfo200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BasketInfo200Response>> BasketInfoWithHttpInfoAsync(string id, string? storeId = default(string?), string? varParams = default(string?), string? exclude = default(string?), string? responseFields = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling BasketApi->BasketInfo");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }

            localVarRequestOptions.Operation = "BasketApi.BasketInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<BasketInfo200Response>("/basket.info.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BasketInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// basket.item.add Add item to basket
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Retrieves orders specified by customer id</param>
        /// <param name="productId">Defines id of the product which should be added to the basket</param>
        /// <param name="variantId">Defines product&#39;s variants specified by variant id (optional)</param>
        /// <param name="quantity">Defines new items quantity (optional, default to 0M)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BasketItemAdd200Response</returns>
        public BasketItemAdd200Response BasketItemAdd(string customerId, string productId, string? variantId = default(string?), decimal? quantity = default(decimal?), string? storeId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<BasketItemAdd200Response> localVarResponse = BasketItemAddWithHttpInfo(customerId, productId, variantId, quantity, storeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// basket.item.add Add item to basket
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Retrieves orders specified by customer id</param>
        /// <param name="productId">Defines id of the product which should be added to the basket</param>
        /// <param name="variantId">Defines product&#39;s variants specified by variant id (optional)</param>
        /// <param name="quantity">Defines new items quantity (optional, default to 0M)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BasketItemAdd200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<BasketItemAdd200Response> BasketItemAddWithHttpInfo(string customerId, string productId, string? variantId = default(string?), decimal? quantity = default(decimal?), string? storeId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'customerId' when calling BasketApi->BasketItemAdd");
            }

            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling BasketApi->BasketItemAdd");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "customer_id", customerId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_id", productId));
            if (variantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "variant_id", variantId));
            }
            if (quantity != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "quantity", quantity));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }

            localVarRequestOptions.Operation = "BasketApi.BasketItemAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BasketItemAdd200Response>("/basket.item.add.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BasketItemAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// basket.item.add Add item to basket
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Retrieves orders specified by customer id</param>
        /// <param name="productId">Defines id of the product which should be added to the basket</param>
        /// <param name="variantId">Defines product&#39;s variants specified by variant id (optional)</param>
        /// <param name="quantity">Defines new items quantity (optional, default to 0M)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BasketItemAdd200Response</returns>
        public async System.Threading.Tasks.Task<BasketItemAdd200Response> BasketItemAddAsync(string customerId, string productId, string? variantId = default(string?), decimal? quantity = default(decimal?), string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BasketItemAdd200Response> localVarResponse = await BasketItemAddWithHttpInfoAsync(customerId, productId, variantId, quantity, storeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// basket.item.add Add item to basket
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Retrieves orders specified by customer id</param>
        /// <param name="productId">Defines id of the product which should be added to the basket</param>
        /// <param name="variantId">Defines product&#39;s variants specified by variant id (optional)</param>
        /// <param name="quantity">Defines new items quantity (optional, default to 0M)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BasketItemAdd200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BasketItemAdd200Response>> BasketItemAddWithHttpInfoAsync(string customerId, string productId, string? variantId = default(string?), decimal? quantity = default(decimal?), string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'customerId' when calling BasketApi->BasketItemAdd");
            }

            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling BasketApi->BasketItemAdd");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "customer_id", customerId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_id", productId));
            if (variantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "variant_id", variantId));
            }
            if (quantity != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "quantity", quantity));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }

            localVarRequestOptions.Operation = "BasketApi.BasketItemAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BasketItemAdd200Response>("/basket.item.add.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BasketItemAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// basket.live_shipping_service.create Create live shipping rate service.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Shipping Service Name</param>
        /// <param name="callback">Callback url that returns shipping rates. It should be able to accept POST requests with json data.</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BasketLiveShippingServiceCreate200Response</returns>
        public BasketLiveShippingServiceCreate200Response BasketLiveShippingServiceCreate(string name, string callback, string? storeId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<BasketLiveShippingServiceCreate200Response> localVarResponse = BasketLiveShippingServiceCreateWithHttpInfo(name, callback, storeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// basket.live_shipping_service.create Create live shipping rate service.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Shipping Service Name</param>
        /// <param name="callback">Callback url that returns shipping rates. It should be able to accept POST requests with json data.</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BasketLiveShippingServiceCreate200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<BasketLiveShippingServiceCreate200Response> BasketLiveShippingServiceCreateWithHttpInfo(string name, string callback, string? storeId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'name' when calling BasketApi->BasketLiveShippingServiceCreate");
            }

            // verify the required parameter 'callback' is set
            if (callback == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'callback' when calling BasketApi->BasketLiveShippingServiceCreate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "callback", callback));

            localVarRequestOptions.Operation = "BasketApi.BasketLiveShippingServiceCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BasketLiveShippingServiceCreate200Response>("/basket.live_shipping_service.create.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BasketLiveShippingServiceCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// basket.live_shipping_service.create Create live shipping rate service.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Shipping Service Name</param>
        /// <param name="callback">Callback url that returns shipping rates. It should be able to accept POST requests with json data.</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BasketLiveShippingServiceCreate200Response</returns>
        public async System.Threading.Tasks.Task<BasketLiveShippingServiceCreate200Response> BasketLiveShippingServiceCreateAsync(string name, string callback, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BasketLiveShippingServiceCreate200Response> localVarResponse = await BasketLiveShippingServiceCreateWithHttpInfoAsync(name, callback, storeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// basket.live_shipping_service.create Create live shipping rate service.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Shipping Service Name</param>
        /// <param name="callback">Callback url that returns shipping rates. It should be able to accept POST requests with json data.</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BasketLiveShippingServiceCreate200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BasketLiveShippingServiceCreate200Response>> BasketLiveShippingServiceCreateWithHttpInfoAsync(string name, string callback, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'name' when calling BasketApi->BasketLiveShippingServiceCreate");
            }

            // verify the required parameter 'callback' is set
            if (callback == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'callback' when calling BasketApi->BasketLiveShippingServiceCreate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "callback", callback));

            localVarRequestOptions.Operation = "BasketApi.BasketLiveShippingServiceCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BasketLiveShippingServiceCreate200Response>("/basket.live_shipping_service.create.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BasketLiveShippingServiceCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// basket.live_shipping_service.delete Delete live shipping rate service.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BasketLiveShippingServiceDelete200Response</returns>
        public BasketLiveShippingServiceDelete200Response BasketLiveShippingServiceDelete(int id, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<BasketLiveShippingServiceDelete200Response> localVarResponse = BasketLiveShippingServiceDeleteWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// basket.live_shipping_service.delete Delete live shipping rate service.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BasketLiveShippingServiceDelete200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<BasketLiveShippingServiceDelete200Response> BasketLiveShippingServiceDeleteWithHttpInfo(int id, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));

            localVarRequestOptions.Operation = "BasketApi.BasketLiveShippingServiceDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<BasketLiveShippingServiceDelete200Response>("/basket.live_shipping_service.delete.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BasketLiveShippingServiceDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// basket.live_shipping_service.delete Delete live shipping rate service.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BasketLiveShippingServiceDelete200Response</returns>
        public async System.Threading.Tasks.Task<BasketLiveShippingServiceDelete200Response> BasketLiveShippingServiceDeleteAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BasketLiveShippingServiceDelete200Response> localVarResponse = await BasketLiveShippingServiceDeleteWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// basket.live_shipping_service.delete Delete live shipping rate service.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Entity id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BasketLiveShippingServiceDelete200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BasketLiveShippingServiceDelete200Response>> BasketLiveShippingServiceDeleteWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));

            localVarRequestOptions.Operation = "BasketApi.BasketLiveShippingServiceDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<BasketLiveShippingServiceDelete200Response>("/basket.live_shipping_service.delete.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BasketLiveShippingServiceDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// basket.live_shipping_service.list Retrieve a list of live shipping rate services.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BasketLiveShippingServiceList200Response</returns>
        public BasketLiveShippingServiceList200Response BasketLiveShippingServiceList(string? storeId = default(string?), int? start = default(int?), int? count = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<BasketLiveShippingServiceList200Response> localVarResponse = BasketLiveShippingServiceListWithHttpInfo(storeId, start, count);
            return localVarResponse.Data;
        }

        /// <summary>
        /// basket.live_shipping_service.list Retrieve a list of live shipping rate services.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BasketLiveShippingServiceList200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<BasketLiveShippingServiceList200Response> BasketLiveShippingServiceListWithHttpInfo(string? storeId = default(string?), int? start = default(int?), int? count = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }

            localVarRequestOptions.Operation = "BasketApi.BasketLiveShippingServiceList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BasketLiveShippingServiceList200Response>("/basket.live_shipping_service.list.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BasketLiveShippingServiceList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// basket.live_shipping_service.list Retrieve a list of live shipping rate services.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BasketLiveShippingServiceList200Response</returns>
        public async System.Threading.Tasks.Task<BasketLiveShippingServiceList200Response> BasketLiveShippingServiceListAsync(string? storeId = default(string?), int? start = default(int?), int? count = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BasketLiveShippingServiceList200Response> localVarResponse = await BasketLiveShippingServiceListWithHttpInfoAsync(storeId, start, count, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// basket.live_shipping_service.list Retrieve a list of live shipping rate services.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BasketLiveShippingServiceList200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BasketLiveShippingServiceList200Response>> BasketLiveShippingServiceListWithHttpInfoAsync(string? storeId = default(string?), int? start = default(int?), int? count = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }

            localVarRequestOptions.Operation = "BasketApi.BasketLiveShippingServiceList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<BasketLiveShippingServiceList200Response>("/basket.live_shipping_service.list.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BasketLiveShippingServiceList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
