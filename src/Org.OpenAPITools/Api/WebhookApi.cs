/*
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebhookApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// webhook.count
        /// </summary>
        /// <remarks>
        /// Count registered webhooks on the store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entity">The entity you want to filter webhooks by (e.g. order or product) (optional)</param>
        /// <param name="action">The action you want to filter webhooks by (e.g. order or product) (optional)</param>
        /// <param name="active">The webhook status you want to filter webhooks by (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebhookCount200Response</returns>
        WebhookCount200Response WebhookCount(string? entity = default(string?), string? action = default(string?), bool? active = default(bool?), int operationIndex = 0);

        /// <summary>
        /// webhook.count
        /// </summary>
        /// <remarks>
        /// Count registered webhooks on the store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entity">The entity you want to filter webhooks by (e.g. order or product) (optional)</param>
        /// <param name="action">The action you want to filter webhooks by (e.g. order or product) (optional)</param>
        /// <param name="active">The webhook status you want to filter webhooks by (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebhookCount200Response</returns>
        ApiResponse<WebhookCount200Response> WebhookCountWithHttpInfo(string? entity = default(string?), string? action = default(string?), bool? active = default(bool?), int operationIndex = 0);
        /// <summary>
        /// webhook.create
        /// </summary>
        /// <remarks>
        /// Create webhook on the store and subscribe to it.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entity">Specify the entity that you want to enable webhooks for (e.g product, order, customer, category)</param>
        /// <param name="action">Specify what action (event) will trigger the webhook (e.g add, delete, or update)</param>
        /// <param name="callback">Callback url that returns shipping rates. It should be able to accept POST requests with json data. (optional)</param>
        /// <param name="label">The name you give to the webhook (optional)</param>
        /// <param name="fields">Fields the webhook should send (optional, default to &quot;force_all&quot;)</param>
        /// <param name="active">Webhook status (optional, default to true)</param>
        /// <param name="storeId">Defines store id where the webhook should be assigned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BasketLiveShippingServiceCreate200Response</returns>
        BasketLiveShippingServiceCreate200Response WebhookCreate(string entity, string action, string? callback = default(string?), string? label = default(string?), string? fields = default(string?), bool? active = default(bool?), string? storeId = default(string?), int operationIndex = 0);

        /// <summary>
        /// webhook.create
        /// </summary>
        /// <remarks>
        /// Create webhook on the store and subscribe to it.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entity">Specify the entity that you want to enable webhooks for (e.g product, order, customer, category)</param>
        /// <param name="action">Specify what action (event) will trigger the webhook (e.g add, delete, or update)</param>
        /// <param name="callback">Callback url that returns shipping rates. It should be able to accept POST requests with json data. (optional)</param>
        /// <param name="label">The name you give to the webhook (optional)</param>
        /// <param name="fields">Fields the webhook should send (optional, default to &quot;force_all&quot;)</param>
        /// <param name="active">Webhook status (optional, default to true)</param>
        /// <param name="storeId">Defines store id where the webhook should be assigned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BasketLiveShippingServiceCreate200Response</returns>
        ApiResponse<BasketLiveShippingServiceCreate200Response> WebhookCreateWithHttpInfo(string entity, string action, string? callback = default(string?), string? label = default(string?), string? fields = default(string?), bool? active = default(bool?), string? storeId = default(string?), int operationIndex = 0);
        /// <summary>
        /// webhook.delete
        /// </summary>
        /// <remarks>
        /// Delete registered webhook on the store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Webhook id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttributeDelete200Response</returns>
        AttributeDelete200Response WebhookDelete(string id, int operationIndex = 0);

        /// <summary>
        /// webhook.delete
        /// </summary>
        /// <remarks>
        /// Delete registered webhook on the store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Webhook id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttributeDelete200Response</returns>
        ApiResponse<AttributeDelete200Response> WebhookDeleteWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// webhook.events
        /// </summary>
        /// <remarks>
        /// List all Webhooks that are available on this store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebhookEvents200Response</returns>
        WebhookEvents200Response WebhookEvents(int operationIndex = 0);

        /// <summary>
        /// webhook.events
        /// </summary>
        /// <remarks>
        /// List all Webhooks that are available on this store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebhookEvents200Response</returns>
        ApiResponse<WebhookEvents200Response> WebhookEventsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// webhook.list
        /// </summary>
        /// <remarks>
        /// List registered webhook on the store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="entity">The entity you want to filter webhooks by (e.g. order or product) (optional)</param>
        /// <param name="action">The action you want to filter webhooks by (e.g. add, update, or delete) (optional)</param>
        /// <param name="active">The webhook status you want to filter webhooks by (optional)</param>
        /// <param name="ids">List of —Åomma-separated webhook ids (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,entity,action,callback&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebhookList200Response</returns>
        WebhookList200Response WebhookList(int? start = default(int?), int? count = default(int?), string? entity = default(string?), string? action = default(string?), bool? active = default(bool?), string? ids = default(string?), string? varParams = default(string?), int operationIndex = 0);

        /// <summary>
        /// webhook.list
        /// </summary>
        /// <remarks>
        /// List registered webhook on the store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="entity">The entity you want to filter webhooks by (e.g. order or product) (optional)</param>
        /// <param name="action">The action you want to filter webhooks by (e.g. add, update, or delete) (optional)</param>
        /// <param name="active">The webhook status you want to filter webhooks by (optional)</param>
        /// <param name="ids">List of —Åomma-separated webhook ids (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,entity,action,callback&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebhookList200Response</returns>
        ApiResponse<WebhookList200Response> WebhookListWithHttpInfo(int? start = default(int?), int? count = default(int?), string? entity = default(string?), string? action = default(string?), bool? active = default(bool?), string? ids = default(string?), string? varParams = default(string?), int operationIndex = 0);
        /// <summary>
        /// webhook.update
        /// </summary>
        /// <remarks>
        /// Update Webhooks parameters.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Webhook id</param>
        /// <param name="callback">Callback url that returns shipping rates. It should be able to accept POST requests with json data. (optional)</param>
        /// <param name="label">The name you give to the webhook (optional)</param>
        /// <param name="fields">Fields the webhook should send (optional)</param>
        /// <param name="active">Webhook status (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductImageUpdate200Response</returns>
        ProductImageUpdate200Response WebhookUpdate(string id, string? callback = default(string?), string? label = default(string?), string? fields = default(string?), bool? active = default(bool?), int operationIndex = 0);

        /// <summary>
        /// webhook.update
        /// </summary>
        /// <remarks>
        /// Update Webhooks parameters.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Webhook id</param>
        /// <param name="callback">Callback url that returns shipping rates. It should be able to accept POST requests with json data. (optional)</param>
        /// <param name="label">The name you give to the webhook (optional)</param>
        /// <param name="fields">Fields the webhook should send (optional)</param>
        /// <param name="active">Webhook status (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductImageUpdate200Response</returns>
        ApiResponse<ProductImageUpdate200Response> WebhookUpdateWithHttpInfo(string id, string? callback = default(string?), string? label = default(string?), string? fields = default(string?), bool? active = default(bool?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebhookApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// webhook.count
        /// </summary>
        /// <remarks>
        /// Count registered webhooks on the store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entity">The entity you want to filter webhooks by (e.g. order or product) (optional)</param>
        /// <param name="action">The action you want to filter webhooks by (e.g. order or product) (optional)</param>
        /// <param name="active">The webhook status you want to filter webhooks by (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhookCount200Response</returns>
        System.Threading.Tasks.Task<WebhookCount200Response> WebhookCountAsync(string? entity = default(string?), string? action = default(string?), bool? active = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// webhook.count
        /// </summary>
        /// <remarks>
        /// Count registered webhooks on the store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entity">The entity you want to filter webhooks by (e.g. order or product) (optional)</param>
        /// <param name="action">The action you want to filter webhooks by (e.g. order or product) (optional)</param>
        /// <param name="active">The webhook status you want to filter webhooks by (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhookCount200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookCount200Response>> WebhookCountWithHttpInfoAsync(string? entity = default(string?), string? action = default(string?), bool? active = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// webhook.create
        /// </summary>
        /// <remarks>
        /// Create webhook on the store and subscribe to it.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entity">Specify the entity that you want to enable webhooks for (e.g product, order, customer, category)</param>
        /// <param name="action">Specify what action (event) will trigger the webhook (e.g add, delete, or update)</param>
        /// <param name="callback">Callback url that returns shipping rates. It should be able to accept POST requests with json data. (optional)</param>
        /// <param name="label">The name you give to the webhook (optional)</param>
        /// <param name="fields">Fields the webhook should send (optional, default to &quot;force_all&quot;)</param>
        /// <param name="active">Webhook status (optional, default to true)</param>
        /// <param name="storeId">Defines store id where the webhook should be assigned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BasketLiveShippingServiceCreate200Response</returns>
        System.Threading.Tasks.Task<BasketLiveShippingServiceCreate200Response> WebhookCreateAsync(string entity, string action, string? callback = default(string?), string? label = default(string?), string? fields = default(string?), bool? active = default(bool?), string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// webhook.create
        /// </summary>
        /// <remarks>
        /// Create webhook on the store and subscribe to it.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entity">Specify the entity that you want to enable webhooks for (e.g product, order, customer, category)</param>
        /// <param name="action">Specify what action (event) will trigger the webhook (e.g add, delete, or update)</param>
        /// <param name="callback">Callback url that returns shipping rates. It should be able to accept POST requests with json data. (optional)</param>
        /// <param name="label">The name you give to the webhook (optional)</param>
        /// <param name="fields">Fields the webhook should send (optional, default to &quot;force_all&quot;)</param>
        /// <param name="active">Webhook status (optional, default to true)</param>
        /// <param name="storeId">Defines store id where the webhook should be assigned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BasketLiveShippingServiceCreate200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<BasketLiveShippingServiceCreate200Response>> WebhookCreateWithHttpInfoAsync(string entity, string action, string? callback = default(string?), string? label = default(string?), string? fields = default(string?), bool? active = default(bool?), string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// webhook.delete
        /// </summary>
        /// <remarks>
        /// Delete registered webhook on the store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Webhook id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttributeDelete200Response</returns>
        System.Threading.Tasks.Task<AttributeDelete200Response> WebhookDeleteAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// webhook.delete
        /// </summary>
        /// <remarks>
        /// Delete registered webhook on the store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Webhook id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttributeDelete200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttributeDelete200Response>> WebhookDeleteWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// webhook.events
        /// </summary>
        /// <remarks>
        /// List all Webhooks that are available on this store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhookEvents200Response</returns>
        System.Threading.Tasks.Task<WebhookEvents200Response> WebhookEventsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// webhook.events
        /// </summary>
        /// <remarks>
        /// List all Webhooks that are available on this store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhookEvents200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookEvents200Response>> WebhookEventsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// webhook.list
        /// </summary>
        /// <remarks>
        /// List registered webhook on the store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="entity">The entity you want to filter webhooks by (e.g. order or product) (optional)</param>
        /// <param name="action">The action you want to filter webhooks by (e.g. add, update, or delete) (optional)</param>
        /// <param name="active">The webhook status you want to filter webhooks by (optional)</param>
        /// <param name="ids">List of —Åomma-separated webhook ids (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,entity,action,callback&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhookList200Response</returns>
        System.Threading.Tasks.Task<WebhookList200Response> WebhookListAsync(int? start = default(int?), int? count = default(int?), string? entity = default(string?), string? action = default(string?), bool? active = default(bool?), string? ids = default(string?), string? varParams = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// webhook.list
        /// </summary>
        /// <remarks>
        /// List registered webhook on the store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="entity">The entity you want to filter webhooks by (e.g. order or product) (optional)</param>
        /// <param name="action">The action you want to filter webhooks by (e.g. add, update, or delete) (optional)</param>
        /// <param name="active">The webhook status you want to filter webhooks by (optional)</param>
        /// <param name="ids">List of —Åomma-separated webhook ids (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,entity,action,callback&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhookList200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookList200Response>> WebhookListWithHttpInfoAsync(int? start = default(int?), int? count = default(int?), string? entity = default(string?), string? action = default(string?), bool? active = default(bool?), string? ids = default(string?), string? varParams = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// webhook.update
        /// </summary>
        /// <remarks>
        /// Update Webhooks parameters.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Webhook id</param>
        /// <param name="callback">Callback url that returns shipping rates. It should be able to accept POST requests with json data. (optional)</param>
        /// <param name="label">The name you give to the webhook (optional)</param>
        /// <param name="fields">Fields the webhook should send (optional)</param>
        /// <param name="active">Webhook status (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductImageUpdate200Response</returns>
        System.Threading.Tasks.Task<ProductImageUpdate200Response> WebhookUpdateAsync(string id, string? callback = default(string?), string? label = default(string?), string? fields = default(string?), bool? active = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// webhook.update
        /// </summary>
        /// <remarks>
        /// Update Webhooks parameters.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Webhook id</param>
        /// <param name="callback">Callback url that returns shipping rates. It should be able to accept POST requests with json data. (optional)</param>
        /// <param name="label">The name you give to the webhook (optional)</param>
        /// <param name="fields">Fields the webhook should send (optional)</param>
        /// <param name="active">Webhook status (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductImageUpdate200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductImageUpdate200Response>> WebhookUpdateWithHttpInfoAsync(string id, string? callback = default(string?), string? label = default(string?), string? fields = default(string?), bool? active = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebhookApi : IWebhookApiSync, IWebhookApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WebhookApi : IWebhookApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WebhookApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WebhookApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WebhookApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public WebhookApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// webhook.count Count registered webhooks on the store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entity">The entity you want to filter webhooks by (e.g. order or product) (optional)</param>
        /// <param name="action">The action you want to filter webhooks by (e.g. order or product) (optional)</param>
        /// <param name="active">The webhook status you want to filter webhooks by (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebhookCount200Response</returns>
        public WebhookCount200Response WebhookCount(string? entity = default(string?), string? action = default(string?), bool? active = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<WebhookCount200Response> localVarResponse = WebhookCountWithHttpInfo(entity, action, active);
            return localVarResponse.Data;
        }

        /// <summary>
        /// webhook.count Count registered webhooks on the store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entity">The entity you want to filter webhooks by (e.g. order or product) (optional)</param>
        /// <param name="action">The action you want to filter webhooks by (e.g. order or product) (optional)</param>
        /// <param name="active">The webhook status you want to filter webhooks by (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebhookCount200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<WebhookCount200Response> WebhookCountWithHttpInfo(string? entity = default(string?), string? action = default(string?), bool? active = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (entity != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "entity", entity));
            }
            if (action != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "action", action));
            }
            if (active != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "active", active));
            }

            localVarRequestOptions.Operation = "WebhookApi.WebhookCount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<WebhookCount200Response>("/webhook.count.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WebhookCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// webhook.count Count registered webhooks on the store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entity">The entity you want to filter webhooks by (e.g. order or product) (optional)</param>
        /// <param name="action">The action you want to filter webhooks by (e.g. order or product) (optional)</param>
        /// <param name="active">The webhook status you want to filter webhooks by (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhookCount200Response</returns>
        public async System.Threading.Tasks.Task<WebhookCount200Response> WebhookCountAsync(string? entity = default(string?), string? action = default(string?), bool? active = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<WebhookCount200Response> localVarResponse = await WebhookCountWithHttpInfoAsync(entity, action, active, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// webhook.count Count registered webhooks on the store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entity">The entity you want to filter webhooks by (e.g. order or product) (optional)</param>
        /// <param name="action">The action you want to filter webhooks by (e.g. order or product) (optional)</param>
        /// <param name="active">The webhook status you want to filter webhooks by (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhookCount200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<WebhookCount200Response>> WebhookCountWithHttpInfoAsync(string? entity = default(string?), string? action = default(string?), bool? active = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (entity != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "entity", entity));
            }
            if (action != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "action", action));
            }
            if (active != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "active", active));
            }

            localVarRequestOptions.Operation = "WebhookApi.WebhookCount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<WebhookCount200Response>("/webhook.count.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WebhookCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// webhook.create Create webhook on the store and subscribe to it.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entity">Specify the entity that you want to enable webhooks for (e.g product, order, customer, category)</param>
        /// <param name="action">Specify what action (event) will trigger the webhook (e.g add, delete, or update)</param>
        /// <param name="callback">Callback url that returns shipping rates. It should be able to accept POST requests with json data. (optional)</param>
        /// <param name="label">The name you give to the webhook (optional)</param>
        /// <param name="fields">Fields the webhook should send (optional, default to &quot;force_all&quot;)</param>
        /// <param name="active">Webhook status (optional, default to true)</param>
        /// <param name="storeId">Defines store id where the webhook should be assigned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BasketLiveShippingServiceCreate200Response</returns>
        public BasketLiveShippingServiceCreate200Response WebhookCreate(string entity, string action, string? callback = default(string?), string? label = default(string?), string? fields = default(string?), bool? active = default(bool?), string? storeId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<BasketLiveShippingServiceCreate200Response> localVarResponse = WebhookCreateWithHttpInfo(entity, action, callback, label, fields, active, storeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// webhook.create Create webhook on the store and subscribe to it.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entity">Specify the entity that you want to enable webhooks for (e.g product, order, customer, category)</param>
        /// <param name="action">Specify what action (event) will trigger the webhook (e.g add, delete, or update)</param>
        /// <param name="callback">Callback url that returns shipping rates. It should be able to accept POST requests with json data. (optional)</param>
        /// <param name="label">The name you give to the webhook (optional)</param>
        /// <param name="fields">Fields the webhook should send (optional, default to &quot;force_all&quot;)</param>
        /// <param name="active">Webhook status (optional, default to true)</param>
        /// <param name="storeId">Defines store id where the webhook should be assigned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BasketLiveShippingServiceCreate200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<BasketLiveShippingServiceCreate200Response> WebhookCreateWithHttpInfo(string entity, string action, string? callback = default(string?), string? label = default(string?), string? fields = default(string?), bool? active = default(bool?), string? storeId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'entity' is set
            if (entity == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'entity' when calling WebhookApi->WebhookCreate");
            }

            // verify the required parameter 'action' is set
            if (action == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'action' when calling WebhookApi->WebhookCreate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "entity", entity));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "action", action));
            if (callback != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "callback", callback));
            }
            if (label != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "label", label));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (active != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "active", active));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }

            localVarRequestOptions.Operation = "WebhookApi.WebhookCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BasketLiveShippingServiceCreate200Response>("/webhook.create.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WebhookCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// webhook.create Create webhook on the store and subscribe to it.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entity">Specify the entity that you want to enable webhooks for (e.g product, order, customer, category)</param>
        /// <param name="action">Specify what action (event) will trigger the webhook (e.g add, delete, or update)</param>
        /// <param name="callback">Callback url that returns shipping rates. It should be able to accept POST requests with json data. (optional)</param>
        /// <param name="label">The name you give to the webhook (optional)</param>
        /// <param name="fields">Fields the webhook should send (optional, default to &quot;force_all&quot;)</param>
        /// <param name="active">Webhook status (optional, default to true)</param>
        /// <param name="storeId">Defines store id where the webhook should be assigned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BasketLiveShippingServiceCreate200Response</returns>
        public async System.Threading.Tasks.Task<BasketLiveShippingServiceCreate200Response> WebhookCreateAsync(string entity, string action, string? callback = default(string?), string? label = default(string?), string? fields = default(string?), bool? active = default(bool?), string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BasketLiveShippingServiceCreate200Response> localVarResponse = await WebhookCreateWithHttpInfoAsync(entity, action, callback, label, fields, active, storeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// webhook.create Create webhook on the store and subscribe to it.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entity">Specify the entity that you want to enable webhooks for (e.g product, order, customer, category)</param>
        /// <param name="action">Specify what action (event) will trigger the webhook (e.g add, delete, or update)</param>
        /// <param name="callback">Callback url that returns shipping rates. It should be able to accept POST requests with json data. (optional)</param>
        /// <param name="label">The name you give to the webhook (optional)</param>
        /// <param name="fields">Fields the webhook should send (optional, default to &quot;force_all&quot;)</param>
        /// <param name="active">Webhook status (optional, default to true)</param>
        /// <param name="storeId">Defines store id where the webhook should be assigned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BasketLiveShippingServiceCreate200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BasketLiveShippingServiceCreate200Response>> WebhookCreateWithHttpInfoAsync(string entity, string action, string? callback = default(string?), string? label = default(string?), string? fields = default(string?), bool? active = default(bool?), string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'entity' is set
            if (entity == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'entity' when calling WebhookApi->WebhookCreate");
            }

            // verify the required parameter 'action' is set
            if (action == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'action' when calling WebhookApi->WebhookCreate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "entity", entity));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "action", action));
            if (callback != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "callback", callback));
            }
            if (label != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "label", label));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (active != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "active", active));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }

            localVarRequestOptions.Operation = "WebhookApi.WebhookCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BasketLiveShippingServiceCreate200Response>("/webhook.create.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WebhookCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// webhook.delete Delete registered webhook on the store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Webhook id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttributeDelete200Response</returns>
        public AttributeDelete200Response WebhookDelete(string id, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AttributeDelete200Response> localVarResponse = WebhookDeleteWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// webhook.delete Delete registered webhook on the store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Webhook id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttributeDelete200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<AttributeDelete200Response> WebhookDeleteWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling WebhookApi->WebhookDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));

            localVarRequestOptions.Operation = "WebhookApi.WebhookDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<AttributeDelete200Response>("/webhook.delete.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WebhookDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// webhook.delete Delete registered webhook on the store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Webhook id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttributeDelete200Response</returns>
        public async System.Threading.Tasks.Task<AttributeDelete200Response> WebhookDeleteAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AttributeDelete200Response> localVarResponse = await WebhookDeleteWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// webhook.delete Delete registered webhook on the store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Webhook id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttributeDelete200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AttributeDelete200Response>> WebhookDeleteWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling WebhookApi->WebhookDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));

            localVarRequestOptions.Operation = "WebhookApi.WebhookDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<AttributeDelete200Response>("/webhook.delete.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WebhookDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// webhook.events List all Webhooks that are available on this store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebhookEvents200Response</returns>
        public WebhookEvents200Response WebhookEvents(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<WebhookEvents200Response> localVarResponse = WebhookEventsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// webhook.events List all Webhooks that are available on this store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebhookEvents200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<WebhookEvents200Response> WebhookEventsWithHttpInfo(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "WebhookApi.WebhookEvents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<WebhookEvents200Response>("/webhook.events.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WebhookEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// webhook.events List all Webhooks that are available on this store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhookEvents200Response</returns>
        public async System.Threading.Tasks.Task<WebhookEvents200Response> WebhookEventsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<WebhookEvents200Response> localVarResponse = await WebhookEventsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// webhook.events List all Webhooks that are available on this store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhookEvents200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<WebhookEvents200Response>> WebhookEventsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "WebhookApi.WebhookEvents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<WebhookEvents200Response>("/webhook.events.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WebhookEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// webhook.list List registered webhook on the store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="entity">The entity you want to filter webhooks by (e.g. order or product) (optional)</param>
        /// <param name="action">The action you want to filter webhooks by (e.g. add, update, or delete) (optional)</param>
        /// <param name="active">The webhook status you want to filter webhooks by (optional)</param>
        /// <param name="ids">List of —Åomma-separated webhook ids (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,entity,action,callback&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebhookList200Response</returns>
        public WebhookList200Response WebhookList(int? start = default(int?), int? count = default(int?), string? entity = default(string?), string? action = default(string?), bool? active = default(bool?), string? ids = default(string?), string? varParams = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<WebhookList200Response> localVarResponse = WebhookListWithHttpInfo(start, count, entity, action, active, ids, varParams);
            return localVarResponse.Data;
        }

        /// <summary>
        /// webhook.list List registered webhook on the store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="entity">The entity you want to filter webhooks by (e.g. order or product) (optional)</param>
        /// <param name="action">The action you want to filter webhooks by (e.g. add, update, or delete) (optional)</param>
        /// <param name="active">The webhook status you want to filter webhooks by (optional)</param>
        /// <param name="ids">List of —Åomma-separated webhook ids (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,entity,action,callback&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebhookList200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<WebhookList200Response> WebhookListWithHttpInfo(int? start = default(int?), int? count = default(int?), string? entity = default(string?), string? action = default(string?), bool? active = default(bool?), string? ids = default(string?), string? varParams = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (entity != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "entity", entity));
            }
            if (action != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "action", action));
            }
            if (active != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "active", active));
            }
            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }

            localVarRequestOptions.Operation = "WebhookApi.WebhookList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<WebhookList200Response>("/webhook.list.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WebhookList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// webhook.list List registered webhook on the store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="entity">The entity you want to filter webhooks by (e.g. order or product) (optional)</param>
        /// <param name="action">The action you want to filter webhooks by (e.g. add, update, or delete) (optional)</param>
        /// <param name="active">The webhook status you want to filter webhooks by (optional)</param>
        /// <param name="ids">List of —Åomma-separated webhook ids (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,entity,action,callback&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhookList200Response</returns>
        public async System.Threading.Tasks.Task<WebhookList200Response> WebhookListAsync(int? start = default(int?), int? count = default(int?), string? entity = default(string?), string? action = default(string?), bool? active = default(bool?), string? ids = default(string?), string? varParams = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<WebhookList200Response> localVarResponse = await WebhookListWithHttpInfoAsync(start, count, entity, action, active, ids, varParams, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// webhook.list List registered webhook on the store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="entity">The entity you want to filter webhooks by (e.g. order or product) (optional)</param>
        /// <param name="action">The action you want to filter webhooks by (e.g. add, update, or delete) (optional)</param>
        /// <param name="active">The webhook status you want to filter webhooks by (optional)</param>
        /// <param name="ids">List of —Åomma-separated webhook ids (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,entity,action,callback&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhookList200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<WebhookList200Response>> WebhookListWithHttpInfoAsync(int? start = default(int?), int? count = default(int?), string? entity = default(string?), string? action = default(string?), bool? active = default(bool?), string? ids = default(string?), string? varParams = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (entity != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "entity", entity));
            }
            if (action != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "action", action));
            }
            if (active != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "active", active));
            }
            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }

            localVarRequestOptions.Operation = "WebhookApi.WebhookList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<WebhookList200Response>("/webhook.list.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WebhookList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// webhook.update Update Webhooks parameters.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Webhook id</param>
        /// <param name="callback">Callback url that returns shipping rates. It should be able to accept POST requests with json data. (optional)</param>
        /// <param name="label">The name you give to the webhook (optional)</param>
        /// <param name="fields">Fields the webhook should send (optional)</param>
        /// <param name="active">Webhook status (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductImageUpdate200Response</returns>
        public ProductImageUpdate200Response WebhookUpdate(string id, string? callback = default(string?), string? label = default(string?), string? fields = default(string?), bool? active = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ProductImageUpdate200Response> localVarResponse = WebhookUpdateWithHttpInfo(id, callback, label, fields, active);
            return localVarResponse.Data;
        }

        /// <summary>
        /// webhook.update Update Webhooks parameters.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Webhook id</param>
        /// <param name="callback">Callback url that returns shipping rates. It should be able to accept POST requests with json data. (optional)</param>
        /// <param name="label">The name you give to the webhook (optional)</param>
        /// <param name="fields">Fields the webhook should send (optional)</param>
        /// <param name="active">Webhook status (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductImageUpdate200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ProductImageUpdate200Response> WebhookUpdateWithHttpInfo(string id, string? callback = default(string?), string? label = default(string?), string? fields = default(string?), bool? active = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling WebhookApi->WebhookUpdate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (callback != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "callback", callback));
            }
            if (label != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "label", label));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (active != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "active", active));
            }

            localVarRequestOptions.Operation = "WebhookApi.WebhookUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ProductImageUpdate200Response>("/webhook.update.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WebhookUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// webhook.update Update Webhooks parameters.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Webhook id</param>
        /// <param name="callback">Callback url that returns shipping rates. It should be able to accept POST requests with json data. (optional)</param>
        /// <param name="label">The name you give to the webhook (optional)</param>
        /// <param name="fields">Fields the webhook should send (optional)</param>
        /// <param name="active">Webhook status (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductImageUpdate200Response</returns>
        public async System.Threading.Tasks.Task<ProductImageUpdate200Response> WebhookUpdateAsync(string id, string? callback = default(string?), string? label = default(string?), string? fields = default(string?), bool? active = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ProductImageUpdate200Response> localVarResponse = await WebhookUpdateWithHttpInfoAsync(id, callback, label, fields, active, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// webhook.update Update Webhooks parameters.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Webhook id</param>
        /// <param name="callback">Callback url that returns shipping rates. It should be able to accept POST requests with json data. (optional)</param>
        /// <param name="label">The name you give to the webhook (optional)</param>
        /// <param name="fields">Fields the webhook should send (optional)</param>
        /// <param name="active">Webhook status (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductImageUpdate200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ProductImageUpdate200Response>> WebhookUpdateWithHttpInfoAsync(string id, string? callback = default(string?), string? label = default(string?), string? fields = default(string?), bool? active = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling WebhookApi->WebhookUpdate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (callback != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "callback", callback));
            }
            if (label != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "label", label));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (active != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "active", active));
            }

            localVarRequestOptions.Operation = "WebhookApi.WebhookUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ProductImageUpdate200Response>("/webhook.update.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WebhookUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
