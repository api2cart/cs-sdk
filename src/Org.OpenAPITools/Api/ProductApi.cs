/*
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// product.add
        /// </summary>
        /// <remarks>
        /// Add new product to store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductAdd200Response</returns>
        ProductAdd200Response ProductAdd(ProductAdd productAdd, int operationIndex = 0);

        /// <summary>
        /// product.add
        /// </summary>
        /// <remarks>
        /// Add new product to store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductAdd200Response</returns>
        ApiResponse<ProductAdd200Response> ProductAddWithHttpInfo(ProductAdd productAdd, int operationIndex = 0);
        /// <summary>
        /// product.add.batch
        /// </summary>
        /// <remarks>
        /// Add new products to the store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productAddBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoryAddBatch200Response</returns>
        CategoryAddBatch200Response ProductAddBatch(ProductAddBatch productAddBatch, int operationIndex = 0);

        /// <summary>
        /// product.add.batch
        /// </summary>
        /// <remarks>
        /// Add new products to the store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productAddBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoryAddBatch200Response</returns>
        ApiResponse<CategoryAddBatch200Response> ProductAddBatchWithHttpInfo(ProductAddBatch productAddBatch, int operationIndex = 0);
        /// <summary>
        /// product.attribute.list
        /// </summary>
        /// <remarks>
        /// Get list of attributes and values.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Retrieves attributes specified by product id</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="attributeId">Retrieves info for specified attribute_id (optional)</param>
        /// <param name="variantId">Defines product&#39;s variants specified by variant id (optional)</param>
        /// <param name="attributeGroupId">Filter by attribute_group_id (optional)</param>
        /// <param name="langId">Retrieves attributes specified by language id (optional)</param>
        /// <param name="storeId">Retrieves attributes specified by store id (optional)</param>
        /// <param name="setName">Retrieves attributes specified by set_name in Magento (optional)</param>
        /// <param name="sortBy">Set field to sort by (optional, default to &quot;attribute_id&quot;)</param>
        /// <param name="sortDirection">Set sorting direction (optional, default to &quot;asc&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;attribute_id,name&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelResponseProductAttributeList</returns>
        ModelResponseProductAttributeList ProductAttributeList(string productId, int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? attributeId = default(string?), string? variantId = default(string?), string? attributeGroupId = default(string?), string? langId = default(string?), string? storeId = default(string?), string? setName = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0);

        /// <summary>
        /// product.attribute.list
        /// </summary>
        /// <remarks>
        /// Get list of attributes and values.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Retrieves attributes specified by product id</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="attributeId">Retrieves info for specified attribute_id (optional)</param>
        /// <param name="variantId">Defines product&#39;s variants specified by variant id (optional)</param>
        /// <param name="attributeGroupId">Filter by attribute_group_id (optional)</param>
        /// <param name="langId">Retrieves attributes specified by language id (optional)</param>
        /// <param name="storeId">Retrieves attributes specified by store id (optional)</param>
        /// <param name="setName">Retrieves attributes specified by set_name in Magento (optional)</param>
        /// <param name="sortBy">Set field to sort by (optional, default to &quot;attribute_id&quot;)</param>
        /// <param name="sortDirection">Set sorting direction (optional, default to &quot;asc&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;attribute_id,name&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelResponseProductAttributeList</returns>
        ApiResponse<ModelResponseProductAttributeList> ProductAttributeListWithHttpInfo(string productId, int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? attributeId = default(string?), string? variantId = default(string?), string? attributeGroupId = default(string?), string? langId = default(string?), string? storeId = default(string?), string? setName = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0);
        /// <summary>
        /// product.attribute.value.set
        /// </summary>
        /// <remarks>
        /// Set attribute value to product.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the attribute should be added</param>
        /// <param name="attributeId">Filter by attribute_id (optional)</param>
        /// <param name="attributeGroupId">Filter by attribute_group_id (optional)</param>
        /// <param name="attributeName">Define attribute name (optional)</param>
        /// <param name="value">Define attribute value (optional)</param>
        /// <param name="valueId">Define attribute value id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductAttributeValueSet200Response</returns>
        ProductAttributeValueSet200Response ProductAttributeValueSet(string productId, string? attributeId = default(string?), string? attributeGroupId = default(string?), string? attributeName = default(string?), string? value = default(string?), int? valueId = default(int?), string? langId = default(string?), string? storeId = default(string?), int operationIndex = 0);

        /// <summary>
        /// product.attribute.value.set
        /// </summary>
        /// <remarks>
        /// Set attribute value to product.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the attribute should be added</param>
        /// <param name="attributeId">Filter by attribute_id (optional)</param>
        /// <param name="attributeGroupId">Filter by attribute_group_id (optional)</param>
        /// <param name="attributeName">Define attribute name (optional)</param>
        /// <param name="value">Define attribute value (optional)</param>
        /// <param name="valueId">Define attribute value id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductAttributeValueSet200Response</returns>
        ApiResponse<ProductAttributeValueSet200Response> ProductAttributeValueSetWithHttpInfo(string productId, string? attributeId = default(string?), string? attributeGroupId = default(string?), string? attributeName = default(string?), string? value = default(string?), int? valueId = default(int?), string? langId = default(string?), string? storeId = default(string?), int operationIndex = 0);
        /// <summary>
        /// product.attribute.value.unset
        /// </summary>
        /// <remarks>
        /// Removes attribute value for a product.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product id</param>
        /// <param name="attributeId">Attribute Id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="includeDefault">Boolean, whether or not to unset default value of the attribute, if applicable (optional, default to false)</param>
        /// <param name="reindex">Is reindex required (optional, default to true)</param>
        /// <param name="clearCache">Is cache clear required (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductAttributeValueUnset200Response</returns>
        ProductAttributeValueUnset200Response ProductAttributeValueUnset(string productId, string attributeId, string? storeId = default(string?), bool? includeDefault = default(bool?), bool? reindex = default(bool?), bool? clearCache = default(bool?), int operationIndex = 0);

        /// <summary>
        /// product.attribute.value.unset
        /// </summary>
        /// <remarks>
        /// Removes attribute value for a product.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product id</param>
        /// <param name="attributeId">Attribute Id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="includeDefault">Boolean, whether or not to unset default value of the attribute, if applicable (optional, default to false)</param>
        /// <param name="reindex">Is reindex required (optional, default to true)</param>
        /// <param name="clearCache">Is cache clear required (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductAttributeValueUnset200Response</returns>
        ApiResponse<ProductAttributeValueUnset200Response> ProductAttributeValueUnsetWithHttpInfo(string productId, string attributeId, string? storeId = default(string?), bool? includeDefault = default(bool?), bool? reindex = default(bool?), bool? clearCache = default(bool?), int operationIndex = 0);
        /// <summary>
        /// product.brand.list
        /// </summary>
        /// <remarks>
        /// Get list of brands from your store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="brandIds">Retrieves brands specified by brand ids (optional)</param>
        /// <param name="categoryId">Retrieves product brands specified by category id (optional)</param>
        /// <param name="parentId">Retrieves brands specified by parent id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="findWhere">Entity search that is specified by the comma-separated unique fields (optional)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name,short_description,active,url&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelResponseProductBrandList</returns>
        ModelResponseProductBrandList ProductBrandList(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? brandIds = default(string?), string? categoryId = default(string?), string? parentId = default(string?), string? storeId = default(string?), string? langId = default(string?), string? findWhere = default(string?), string? findValue = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0);

        /// <summary>
        /// product.brand.list
        /// </summary>
        /// <remarks>
        /// Get list of brands from your store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="brandIds">Retrieves brands specified by brand ids (optional)</param>
        /// <param name="categoryId">Retrieves product brands specified by category id (optional)</param>
        /// <param name="parentId">Retrieves brands specified by parent id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="findWhere">Entity search that is specified by the comma-separated unique fields (optional)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name,short_description,active,url&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelResponseProductBrandList</returns>
        ApiResponse<ModelResponseProductBrandList> ProductBrandListWithHttpInfo(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? brandIds = default(string?), string? categoryId = default(string?), string? parentId = default(string?), string? storeId = default(string?), string? langId = default(string?), string? findWhere = default(string?), string? findValue = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0);
        /// <summary>
        /// product.child_item.find
        /// </summary>
        /// <remarks>
        /// Search product child item (bundled item or configurable product variant) in store catalog.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Entity search that is specified by the comma-separated unique fields (optional)</param>
        /// <param name="findParams">Entity search that is specified by comma-separated parameters (optional, default to &quot;whole_words&quot;)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductChildItemFind200Response</returns>
        ProductChildItemFind200Response ProductChildItemFind(string? findValue = default(string?), string? findWhere = default(string?), string? findParams = default(string?), string? storeId = default(string?), int operationIndex = 0);

        /// <summary>
        /// product.child_item.find
        /// </summary>
        /// <remarks>
        /// Search product child item (bundled item or configurable product variant) in store catalog.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Entity search that is specified by the comma-separated unique fields (optional)</param>
        /// <param name="findParams">Entity search that is specified by comma-separated parameters (optional, default to &quot;whole_words&quot;)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductChildItemFind200Response</returns>
        ApiResponse<ProductChildItemFind200Response> ProductChildItemFindWithHttpInfo(string? findValue = default(string?), string? findWhere = default(string?), string? findParams = default(string?), string? storeId = default(string?), int operationIndex = 0);
        /// <summary>
        /// product.child_item.info
        /// </summary>
        /// <remarks>
        /// Get child for specific product.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Filter by parent product id</param>
        /// <param name="id">Entity id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="currencyId">Currency Id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductChildItemInfo200Response</returns>
        ProductChildItemInfo200Response ProductChildItemInfo(string productId, string id, string? storeId = default(string?), string? langId = default(string?), string? currencyId = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), bool? useLatestApiVersion = default(bool?), int operationIndex = 0);

        /// <summary>
        /// product.child_item.info
        /// </summary>
        /// <remarks>
        /// Get child for specific product.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Filter by parent product id</param>
        /// <param name="id">Entity id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="currencyId">Currency Id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductChildItemInfo200Response</returns>
        ApiResponse<ProductChildItemInfo200Response> ProductChildItemInfoWithHttpInfo(string productId, string id, string? storeId = default(string?), string? langId = default(string?), string? currencyId = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), bool? useLatestApiVersion = default(bool?), int operationIndex = 0);
        /// <summary>
        /// product.child_item.list
        /// </summary>
        /// <remarks>
        /// Get a list of a product&#39;s child items, such as variants or bundle components. The total_count field in the response indicates the total number of items in the context of the current filter.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve products child items via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="productId">Filter by parent product id (optional)</param>
        /// <param name="productIds">Filter by parent product ids (optional)</param>
        /// <param name="sku">Filter by products variant&#39;s sku (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="currencyId">Currency Id (optional)</param>
        /// <param name="availSale">Specifies the set of available/not available products for sale (optional)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Child products search that is specified by field (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="returnGlobal">Determines the type of products to be returned. If set to &#39;true&#39;, only global products will be returned; if set to &#39;false&#39;, only local products will be returned. (optional, default to false)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelResponseProductChildItemList</returns>
        ModelResponseProductChildItemList ProductChildItemList(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? productId = default(string?), string? productIds = default(string?), string? sku = default(string?), string? storeId = default(string?), string? langId = default(string?), string? currencyId = default(string?), bool? availSale = default(bool?), string? findValue = default(string?), string? findWhere = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), bool? returnGlobal = default(bool?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), string? reportRequestId = default(string?), bool? disableReportCache = default(bool?), bool? useLatestApiVersion = default(bool?), int operationIndex = 0);

        /// <summary>
        /// product.child_item.list
        /// </summary>
        /// <remarks>
        /// Get a list of a product&#39;s child items, such as variants or bundle components. The total_count field in the response indicates the total number of items in the context of the current filter.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve products child items via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="productId">Filter by parent product id (optional)</param>
        /// <param name="productIds">Filter by parent product ids (optional)</param>
        /// <param name="sku">Filter by products variant&#39;s sku (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="currencyId">Currency Id (optional)</param>
        /// <param name="availSale">Specifies the set of available/not available products for sale (optional)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Child products search that is specified by field (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="returnGlobal">Determines the type of products to be returned. If set to &#39;true&#39;, only global products will be returned; if set to &#39;false&#39;, only local products will be returned. (optional, default to false)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelResponseProductChildItemList</returns>
        ApiResponse<ModelResponseProductChildItemList> ProductChildItemListWithHttpInfo(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? productId = default(string?), string? productIds = default(string?), string? sku = default(string?), string? storeId = default(string?), string? langId = default(string?), string? currencyId = default(string?), bool? availSale = default(bool?), string? findValue = default(string?), string? findWhere = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), bool? returnGlobal = default(bool?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), string? reportRequestId = default(string?), bool? disableReportCache = default(bool?), bool? useLatestApiVersion = default(bool?), int operationIndex = 0);
        /// <summary>
        /// product.count
        /// </summary>
        /// <remarks>
        /// Count products in store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productIds">Counts products specified by product ids (optional)</param>
        /// <param name="sinceId">Retrieve entities starting from the specified id. (optional)</param>
        /// <param name="categoriesIds">Defines product add that is specified by comma-separated categories id (optional)</param>
        /// <param name="categoryId">Counts products specified by category id (optional)</param>
        /// <param name="storeId">Counts products specified by store id (optional)</param>
        /// <param name="langId">Counts products specified by language id (optional)</param>
        /// <param name="availView">Specifies the set of visible/invisible products (optional)</param>
        /// <param name="availSale">Specifies the set of available/not available products for sale (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="brandName">Retrieves brands specified by brand name (optional)</param>
        /// <param name="productAttributes">Defines product attributes (optional)</param>
        /// <param name="status">Defines product&#39;s status (optional)</param>
        /// <param name="type">Defines products&#39;s type (optional)</param>
        /// <param name="visible">Filter items by visibility status (optional, default to &quot;everywhere&quot;)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Counts products that are searched specified by field (optional)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="returnGlobal">Determines the type of products to be returned. If set to &#39;true&#39;, only global products will be returned; if set to &#39;false&#39;, only local products will be returned. (optional, default to false)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductCount200Response</returns>
        ProductCount200Response ProductCount(string? productIds = default(string?), string? sinceId = default(string?), string? categoriesIds = default(string?), string? categoryId = default(string?), string? storeId = default(string?), string? langId = default(string?), bool? availView = default(bool?), bool? availSale = default(bool?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), string? brandName = default(string?), List<string>? productAttributes = default(List<string>?), string? status = default(string?), string? type = default(string?), string? visible = default(string?), string? findValue = default(string?), string? findWhere = default(string?), string? reportRequestId = default(string?), bool? returnGlobal = default(bool?), bool? disableReportCache = default(bool?), bool? useLatestApiVersion = default(bool?), int operationIndex = 0);

        /// <summary>
        /// product.count
        /// </summary>
        /// <remarks>
        /// Count products in store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productIds">Counts products specified by product ids (optional)</param>
        /// <param name="sinceId">Retrieve entities starting from the specified id. (optional)</param>
        /// <param name="categoriesIds">Defines product add that is specified by comma-separated categories id (optional)</param>
        /// <param name="categoryId">Counts products specified by category id (optional)</param>
        /// <param name="storeId">Counts products specified by store id (optional)</param>
        /// <param name="langId">Counts products specified by language id (optional)</param>
        /// <param name="availView">Specifies the set of visible/invisible products (optional)</param>
        /// <param name="availSale">Specifies the set of available/not available products for sale (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="brandName">Retrieves brands specified by brand name (optional)</param>
        /// <param name="productAttributes">Defines product attributes (optional)</param>
        /// <param name="status">Defines product&#39;s status (optional)</param>
        /// <param name="type">Defines products&#39;s type (optional)</param>
        /// <param name="visible">Filter items by visibility status (optional, default to &quot;everywhere&quot;)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Counts products that are searched specified by field (optional)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="returnGlobal">Determines the type of products to be returned. If set to &#39;true&#39;, only global products will be returned; if set to &#39;false&#39;, only local products will be returned. (optional, default to false)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductCount200Response</returns>
        ApiResponse<ProductCount200Response> ProductCountWithHttpInfo(string? productIds = default(string?), string? sinceId = default(string?), string? categoriesIds = default(string?), string? categoryId = default(string?), string? storeId = default(string?), string? langId = default(string?), bool? availView = default(bool?), bool? availSale = default(bool?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), string? brandName = default(string?), List<string>? productAttributes = default(List<string>?), string? status = default(string?), string? type = default(string?), string? visible = default(string?), string? findValue = default(string?), string? findWhere = default(string?), string? reportRequestId = default(string?), bool? returnGlobal = default(bool?), bool? disableReportCache = default(bool?), bool? useLatestApiVersion = default(bool?), int operationIndex = 0);
        /// <summary>
        /// product.currency.add
        /// </summary>
        /// <remarks>
        /// Add currency and/or set default in store
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iso3">Specifies standardized currency code</param>
        /// <param name="rate">Defines the numerical identifier against to the major currency</param>
        /// <param name="name">Defines currency&#39;s name (optional)</param>
        /// <param name="avail">Specifies whether the currency is available (optional, default to true)</param>
        /// <param name="symbolLeft">Defines the symbol that is located before the currency (optional)</param>
        /// <param name="symbolRight">Defines the symbol that is located after the currency (optional)</param>
        /// <param name="varDefault">Specifies currency&#39;s default meaning (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductCurrencyAdd200Response</returns>
        ProductCurrencyAdd200Response ProductCurrencyAdd(string iso3, decimal rate, string? name = default(string?), bool? avail = default(bool?), string? symbolLeft = default(string?), string? symbolRight = default(string?), bool? varDefault = default(bool?), int operationIndex = 0);

        /// <summary>
        /// product.currency.add
        /// </summary>
        /// <remarks>
        /// Add currency and/or set default in store
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iso3">Specifies standardized currency code</param>
        /// <param name="rate">Defines the numerical identifier against to the major currency</param>
        /// <param name="name">Defines currency&#39;s name (optional)</param>
        /// <param name="avail">Specifies whether the currency is available (optional, default to true)</param>
        /// <param name="symbolLeft">Defines the symbol that is located before the currency (optional)</param>
        /// <param name="symbolRight">Defines the symbol that is located after the currency (optional)</param>
        /// <param name="varDefault">Specifies currency&#39;s default meaning (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductCurrencyAdd200Response</returns>
        ApiResponse<ProductCurrencyAdd200Response> ProductCurrencyAddWithHttpInfo(string iso3, decimal rate, string? name = default(string?), bool? avail = default(bool?), string? symbolLeft = default(string?), string? symbolRight = default(string?), bool? varDefault = default(bool?), int operationIndex = 0);
        /// <summary>
        /// product.currency.list
        /// </summary>
        /// <remarks>
        /// Get list of currencies
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="varDefault">Specifies the set of default/not default currencies (optional)</param>
        /// <param name="avail">Specifies the set of available/not available currencies (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;name,iso3,default,avail&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelResponseProductCurrencyList</returns>
        ModelResponseProductCurrencyList ProductCurrencyList(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), bool? varDefault = default(bool?), bool? avail = default(bool?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0);

        /// <summary>
        /// product.currency.list
        /// </summary>
        /// <remarks>
        /// Get list of currencies
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="varDefault">Specifies the set of default/not default currencies (optional)</param>
        /// <param name="avail">Specifies the set of available/not available currencies (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;name,iso3,default,avail&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelResponseProductCurrencyList</returns>
        ApiResponse<ModelResponseProductCurrencyList> ProductCurrencyListWithHttpInfo(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), bool? varDefault = default(bool?), bool? avail = default(bool?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0);
        /// <summary>
        /// product.delete
        /// </summary>
        /// <remarks>
        /// Product delete
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Product id that will be removed</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomerDelete200Response</returns>
        CustomerDelete200Response ProductDelete(string id, string? storeId = default(string?), int operationIndex = 0);

        /// <summary>
        /// product.delete
        /// </summary>
        /// <remarks>
        /// Product delete
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Product id that will be removed</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomerDelete200Response</returns>
        ApiResponse<CustomerDelete200Response> ProductDeleteWithHttpInfo(string id, string? storeId = default(string?), int operationIndex = 0);
        /// <summary>
        /// product.delete.batch
        /// </summary>
        /// <remarks>
        /// Remove product from the store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productDeleteBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoryAddBatch200Response</returns>
        CategoryAddBatch200Response ProductDeleteBatch(ProductDeleteBatch productDeleteBatch, int operationIndex = 0);

        /// <summary>
        /// product.delete.batch
        /// </summary>
        /// <remarks>
        /// Remove product from the store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productDeleteBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoryAddBatch200Response</returns>
        ApiResponse<CategoryAddBatch200Response> ProductDeleteBatchWithHttpInfo(ProductDeleteBatch productDeleteBatch, int operationIndex = 0);
        /// <summary>
        /// product.find
        /// </summary>
        /// <remarks>
        /// Search product in store catalog. \&quot;Apple\&quot; is specified here by default.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findValue">Entity search that is specified by some value</param>
        /// <param name="findWhere">Entity search that is specified by the comma-separated unique fields (optional, default to &quot;name&quot;)</param>
        /// <param name="findParams">Entity search that is specified by comma-separated parameters (optional, default to &quot;whole_words&quot;)</param>
        /// <param name="findWhat">Parameter&#39;s value specifies the entity that has to be found (optional, default to &quot;product&quot;)</param>
        /// <param name="langId">Search products specified by language id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductFind200Response</returns>
        ProductFind200Response ProductFind(string findValue, string? findWhere = default(string?), string? findParams = default(string?), string? findWhat = default(string?), string? langId = default(string?), string? storeId = default(string?), int operationIndex = 0);

        /// <summary>
        /// product.find
        /// </summary>
        /// <remarks>
        /// Search product in store catalog. \&quot;Apple\&quot; is specified here by default.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findValue">Entity search that is specified by some value</param>
        /// <param name="findWhere">Entity search that is specified by the comma-separated unique fields (optional, default to &quot;name&quot;)</param>
        /// <param name="findParams">Entity search that is specified by comma-separated parameters (optional, default to &quot;whole_words&quot;)</param>
        /// <param name="findWhat">Parameter&#39;s value specifies the entity that has to be found (optional, default to &quot;product&quot;)</param>
        /// <param name="langId">Search products specified by language id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductFind200Response</returns>
        ApiResponse<ProductFind200Response> ProductFindWithHttpInfo(string findValue, string? findWhere = default(string?), string? findParams = default(string?), string? findWhat = default(string?), string? langId = default(string?), string? storeId = default(string?), int operationIndex = 0);
        /// <summary>
        /// product.image.add
        /// </summary>
        /// <remarks>
        /// Add image to product
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productImageAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductImageAdd200Response</returns>
        ProductImageAdd200Response ProductImageAdd(ProductImageAdd productImageAdd, int operationIndex = 0);

        /// <summary>
        /// product.image.add
        /// </summary>
        /// <remarks>
        /// Add image to product
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productImageAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductImageAdd200Response</returns>
        ApiResponse<ProductImageAdd200Response> ProductImageAddWithHttpInfo(ProductImageAdd productImageAdd, int operationIndex = 0);
        /// <summary>
        /// product.image.delete
        /// </summary>
        /// <remarks>
        /// Delete image
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the image should be deleted</param>
        /// <param name="id">Entity id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttributeDelete200Response</returns>
        AttributeDelete200Response ProductImageDelete(string productId, string id, string? storeId = default(string?), int operationIndex = 0);

        /// <summary>
        /// product.image.delete
        /// </summary>
        /// <remarks>
        /// Delete image
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the image should be deleted</param>
        /// <param name="id">Entity id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttributeDelete200Response</returns>
        ApiResponse<AttributeDelete200Response> ProductImageDeleteWithHttpInfo(string productId, string id, string? storeId = default(string?), int operationIndex = 0);
        /// <summary>
        /// product.image.update
        /// </summary>
        /// <remarks>
        /// Update details of image
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the image should be updated</param>
        /// <param name="id">Defines image update specified by image id</param>
        /// <param name="variantIds">Defines product&#39;s variants ids (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="imageName">Defines image&#39;s name (optional)</param>
        /// <param name="type">Defines image&#39;s types that are specified by comma-separated list (optional, default to &quot;additional&quot;)</param>
        /// <param name="label">Defines alternative text that has to be attached to the picture (optional)</param>
        /// <param name="position">Defines image’s position in the list (optional)</param>
        /// <param name="hidden">Define is hide image (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductImageUpdate200Response</returns>
        ProductImageUpdate200Response ProductImageUpdate(string productId, string id, string? variantIds = default(string?), string? storeId = default(string?), string? langId = default(string?), string? imageName = default(string?), string? type = default(string?), string? label = default(string?), int? position = default(int?), bool? hidden = default(bool?), int operationIndex = 0);

        /// <summary>
        /// product.image.update
        /// </summary>
        /// <remarks>
        /// Update details of image
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the image should be updated</param>
        /// <param name="id">Defines image update specified by image id</param>
        /// <param name="variantIds">Defines product&#39;s variants ids (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="imageName">Defines image&#39;s name (optional)</param>
        /// <param name="type">Defines image&#39;s types that are specified by comma-separated list (optional, default to &quot;additional&quot;)</param>
        /// <param name="label">Defines alternative text that has to be attached to the picture (optional)</param>
        /// <param name="position">Defines image’s position in the list (optional)</param>
        /// <param name="hidden">Define is hide image (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductImageUpdate200Response</returns>
        ApiResponse<ProductImageUpdate200Response> ProductImageUpdateWithHttpInfo(string productId, string id, string? variantIds = default(string?), string? storeId = default(string?), string? langId = default(string?), string? imageName = default(string?), string? type = default(string?), string? label = default(string?), int? position = default(int?), bool? hidden = default(bool?), int operationIndex = 0);
        /// <summary>
        /// product.info
        /// </summary>
        /// <remarks>
        /// Get information about a specific product by its ID. In the case of a multistore configuration, use the store_id filter to get a response in the context of a specific store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Retrieves product&#39;s info specified by product id</param>
        /// <param name="storeId">Retrieves product info specified by store id (optional)</param>
        /// <param name="langId">Retrieves product info specified by language id (optional)</param>
        /// <param name="currencyId">Currency Id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name,description,price,categories_ids&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductInfo200Response</returns>
        ProductInfo200Response ProductInfo(string id, string? storeId = default(string?), string? langId = default(string?), string? currencyId = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), string? reportRequestId = default(string?), bool? disableReportCache = default(bool?), bool? useLatestApiVersion = default(bool?), int operationIndex = 0);

        /// <summary>
        /// product.info
        /// </summary>
        /// <remarks>
        /// Get information about a specific product by its ID. In the case of a multistore configuration, use the store_id filter to get a response in the context of a specific store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Retrieves product&#39;s info specified by product id</param>
        /// <param name="storeId">Retrieves product info specified by store id (optional)</param>
        /// <param name="langId">Retrieves product info specified by language id (optional)</param>
        /// <param name="currencyId">Currency Id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name,description,price,categories_ids&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductInfo200Response</returns>
        ApiResponse<ProductInfo200Response> ProductInfoWithHttpInfo(string id, string? storeId = default(string?), string? langId = default(string?), string? currencyId = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), string? reportRequestId = default(string?), bool? disableReportCache = default(bool?), bool? useLatestApiVersion = default(bool?), int operationIndex = 0);
        /// <summary>
        /// product.list
        /// </summary>
        /// <remarks>
        /// Get list of products from your store. Returns 10 products by default.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve products via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="productIds">Retrieves products specified by product ids (optional)</param>
        /// <param name="sinceId">Retrieve entities starting from the specified id. (optional)</param>
        /// <param name="categoriesIds">Retrieves products specified by categories ids (optional)</param>
        /// <param name="categoryId">Retrieves products specified by category id (optional)</param>
        /// <param name="storeId">Retrieves products specified by store id (optional)</param>
        /// <param name="langId">Retrieves products specified by language id (optional)</param>
        /// <param name="currencyId">Currency Id (optional)</param>
        /// <param name="availView">Specifies the set of visible/invisible products (optional)</param>
        /// <param name="availSale">Specifies the set of available/not available products for sale (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="sku">Filter by product&#39;s sku (optional)</param>
        /// <param name="brandName">Retrieves brands specified by brand name (optional)</param>
        /// <param name="productAttributes">Defines product attributes (optional)</param>
        /// <param name="status">Defines product&#39;s status (optional)</param>
        /// <param name="type">Defines products&#39;s type (optional)</param>
        /// <param name="visible">Filter items by visibility status (optional, default to &quot;everywhere&quot;)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Product search that is specified by field (optional)</param>
        /// <param name="returnGlobal">Determines the type of products to be returned. If set to &#39;true&#39;, only global products will be returned; if set to &#39;false&#39;, only local products will be returned. (optional, default to false)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name,description,price,categories_ids&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="sortBy">Set field to sort by (optional, default to &quot;id&quot;)</param>
        /// <param name="sortDirection">Set sorting direction (optional, default to &quot;asc&quot;)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="disableCache">Disable cache for current request (optional, default to false)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="productType">A categorization for the product (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelResponseProductList</returns>
        ModelResponseProductList ProductList(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? productIds = default(string?), string? sinceId = default(string?), string? categoriesIds = default(string?), string? categoryId = default(string?), string? storeId = default(string?), string? langId = default(string?), string? currencyId = default(string?), bool? availView = default(bool?), bool? availSale = default(bool?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), string? sku = default(string?), string? brandName = default(string?), List<string>? productAttributes = default(List<string>?), string? status = default(string?), string? type = default(string?), string? visible = default(string?), string? findValue = default(string?), string? findWhere = default(string?), bool? returnGlobal = default(bool?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? reportRequestId = default(string?), bool? disableCache = default(bool?), bool? disableReportCache = default(bool?), bool? useLatestApiVersion = default(bool?), string? productType = default(string?), int operationIndex = 0);

        /// <summary>
        /// product.list
        /// </summary>
        /// <remarks>
        /// Get list of products from your store. Returns 10 products by default.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve products via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="productIds">Retrieves products specified by product ids (optional)</param>
        /// <param name="sinceId">Retrieve entities starting from the specified id. (optional)</param>
        /// <param name="categoriesIds">Retrieves products specified by categories ids (optional)</param>
        /// <param name="categoryId">Retrieves products specified by category id (optional)</param>
        /// <param name="storeId">Retrieves products specified by store id (optional)</param>
        /// <param name="langId">Retrieves products specified by language id (optional)</param>
        /// <param name="currencyId">Currency Id (optional)</param>
        /// <param name="availView">Specifies the set of visible/invisible products (optional)</param>
        /// <param name="availSale">Specifies the set of available/not available products for sale (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="sku">Filter by product&#39;s sku (optional)</param>
        /// <param name="brandName">Retrieves brands specified by brand name (optional)</param>
        /// <param name="productAttributes">Defines product attributes (optional)</param>
        /// <param name="status">Defines product&#39;s status (optional)</param>
        /// <param name="type">Defines products&#39;s type (optional)</param>
        /// <param name="visible">Filter items by visibility status (optional, default to &quot;everywhere&quot;)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Product search that is specified by field (optional)</param>
        /// <param name="returnGlobal">Determines the type of products to be returned. If set to &#39;true&#39;, only global products will be returned; if set to &#39;false&#39;, only local products will be returned. (optional, default to false)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name,description,price,categories_ids&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="sortBy">Set field to sort by (optional, default to &quot;id&quot;)</param>
        /// <param name="sortDirection">Set sorting direction (optional, default to &quot;asc&quot;)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="disableCache">Disable cache for current request (optional, default to false)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="productType">A categorization for the product (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelResponseProductList</returns>
        ApiResponse<ModelResponseProductList> ProductListWithHttpInfo(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? productIds = default(string?), string? sinceId = default(string?), string? categoriesIds = default(string?), string? categoryId = default(string?), string? storeId = default(string?), string? langId = default(string?), string? currencyId = default(string?), bool? availView = default(bool?), bool? availSale = default(bool?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), string? sku = default(string?), string? brandName = default(string?), List<string>? productAttributes = default(List<string>?), string? status = default(string?), string? type = default(string?), string? visible = default(string?), string? findValue = default(string?), string? findWhere = default(string?), bool? returnGlobal = default(bool?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? reportRequestId = default(string?), bool? disableCache = default(bool?), bool? disableReportCache = default(bool?), bool? useLatestApiVersion = default(bool?), string? productType = default(string?), int operationIndex = 0);
        /// <summary>
        /// product.manufacturer.add
        /// </summary>
        /// <remarks>
        /// Add manufacturer to store and assign to product
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines products specified by product id</param>
        /// <param name="manufacturer">Defines product’s manufacturer&#39;s name</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductManufacturerAdd200Response</returns>
        ProductManufacturerAdd200Response ProductManufacturerAdd(string productId, string manufacturer, string? storeId = default(string?), int operationIndex = 0);

        /// <summary>
        /// product.manufacturer.add
        /// </summary>
        /// <remarks>
        /// Add manufacturer to store and assign to product
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines products specified by product id</param>
        /// <param name="manufacturer">Defines product’s manufacturer&#39;s name</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductManufacturerAdd200Response</returns>
        ApiResponse<ProductManufacturerAdd200Response> ProductManufacturerAddWithHttpInfo(string productId, string manufacturer, string? storeId = default(string?), int operationIndex = 0);
        /// <summary>
        /// product.option.add
        /// </summary>
        /// <remarks>
        /// Add product option from store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productOptionAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductOptionAdd200Response</returns>
        ProductOptionAdd200Response ProductOptionAdd(ProductOptionAdd productOptionAdd, int operationIndex = 0);

        /// <summary>
        /// product.option.add
        /// </summary>
        /// <remarks>
        /// Add product option from store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productOptionAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductOptionAdd200Response</returns>
        ApiResponse<ProductOptionAdd200Response> ProductOptionAddWithHttpInfo(ProductOptionAdd productOptionAdd, int operationIndex = 0);
        /// <summary>
        /// product.option.assign
        /// </summary>
        /// <remarks>
        /// Assign option from product.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the option should be assigned</param>
        /// <param name="optionId">Defines option id which has to be assigned</param>
        /// <param name="required">Defines if the option is required (optional, default to false)</param>
        /// <param name="sortOrder">Sort number in the list (optional, default to 0)</param>
        /// <param name="optionValues">Defines option values that has to be assigned (optional)</param>
        /// <param name="clearCache">Is cache clear required (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductOptionAssign200Response</returns>
        ProductOptionAssign200Response ProductOptionAssign(string productId, string optionId, bool? required = default(bool?), int? sortOrder = default(int?), string? optionValues = default(string?), bool? clearCache = default(bool?), int operationIndex = 0);

        /// <summary>
        /// product.option.assign
        /// </summary>
        /// <remarks>
        /// Assign option from product.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the option should be assigned</param>
        /// <param name="optionId">Defines option id which has to be assigned</param>
        /// <param name="required">Defines if the option is required (optional, default to false)</param>
        /// <param name="sortOrder">Sort number in the list (optional, default to 0)</param>
        /// <param name="optionValues">Defines option values that has to be assigned (optional)</param>
        /// <param name="clearCache">Is cache clear required (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductOptionAssign200Response</returns>
        ApiResponse<ProductOptionAssign200Response> ProductOptionAssignWithHttpInfo(string productId, string optionId, bool? required = default(bool?), int? sortOrder = default(int?), string? optionValues = default(string?), bool? clearCache = default(bool?), int operationIndex = 0);
        /// <summary>
        /// product.option.delete
        /// </summary>
        /// <remarks>
        /// Product option delete.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionId">Defines option id that should be deleted</param>
        /// <param name="productId">Defines product id where the option should be deleted</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttributeDelete200Response</returns>
        AttributeDelete200Response ProductOptionDelete(string optionId, string productId, string? storeId = default(string?), int operationIndex = 0);

        /// <summary>
        /// product.option.delete
        /// </summary>
        /// <remarks>
        /// Product option delete.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionId">Defines option id that should be deleted</param>
        /// <param name="productId">Defines product id where the option should be deleted</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttributeDelete200Response</returns>
        ApiResponse<AttributeDelete200Response> ProductOptionDeleteWithHttpInfo(string optionId, string productId, string? storeId = default(string?), int operationIndex = 0);
        /// <summary>
        /// product.option.list
        /// </summary>
        /// <remarks>
        /// Get list of options.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="productId">Retrieves products&#39; options specified by product id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name,description&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelResponseProductOptionList</returns>
        ModelResponseProductOptionList ProductOptionList(int? start = default(int?), int? count = default(int?), string? productId = default(string?), string? langId = default(string?), string? storeId = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0);

        /// <summary>
        /// product.option.list
        /// </summary>
        /// <remarks>
        /// Get list of options.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="productId">Retrieves products&#39; options specified by product id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name,description&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelResponseProductOptionList</returns>
        ApiResponse<ModelResponseProductOptionList> ProductOptionListWithHttpInfo(int? start = default(int?), int? count = default(int?), string? productId = default(string?), string? langId = default(string?), string? storeId = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0);
        /// <summary>
        /// product.option.value.add
        /// </summary>
        /// <remarks>
        /// Add product option item from option.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the option value should be added</param>
        /// <param name="optionId">Defines option id where the value has to be added</param>
        /// <param name="optionValue">Defines option value that has to be added (optional)</param>
        /// <param name="sortOrder">Sort number in the list (optional, default to 0)</param>
        /// <param name="displayValue">Defines the value that will be displayed for the option value (optional)</param>
        /// <param name="isDefault">Defines as a default (optional)</param>
        /// <param name="clearCache">Is cache clear required (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductOptionValueAdd200Response</returns>
        ProductOptionValueAdd200Response ProductOptionValueAdd(string productId, string optionId, string? optionValue = default(string?), int? sortOrder = default(int?), string? displayValue = default(string?), bool? isDefault = default(bool?), bool? clearCache = default(bool?), int operationIndex = 0);

        /// <summary>
        /// product.option.value.add
        /// </summary>
        /// <remarks>
        /// Add product option item from option.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the option value should be added</param>
        /// <param name="optionId">Defines option id where the value has to be added</param>
        /// <param name="optionValue">Defines option value that has to be added (optional)</param>
        /// <param name="sortOrder">Sort number in the list (optional, default to 0)</param>
        /// <param name="displayValue">Defines the value that will be displayed for the option value (optional)</param>
        /// <param name="isDefault">Defines as a default (optional)</param>
        /// <param name="clearCache">Is cache clear required (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductOptionValueAdd200Response</returns>
        ApiResponse<ProductOptionValueAdd200Response> ProductOptionValueAddWithHttpInfo(string productId, string optionId, string? optionValue = default(string?), int? sortOrder = default(int?), string? displayValue = default(string?), bool? isDefault = default(bool?), bool? clearCache = default(bool?), int operationIndex = 0);
        /// <summary>
        /// product.option.value.assign
        /// </summary>
        /// <remarks>
        /// Assign product option item from product.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productOptionId">Defines product&#39;s option id where the value has to be assigned</param>
        /// <param name="optionValueId">Defines value id that has to be assigned</param>
        /// <param name="clearCache">Is cache clear required (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductOptionValueAssign200Response</returns>
        ProductOptionValueAssign200Response ProductOptionValueAssign(int productOptionId, string optionValueId, bool? clearCache = default(bool?), int operationIndex = 0);

        /// <summary>
        /// product.option.value.assign
        /// </summary>
        /// <remarks>
        /// Assign product option item from product.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productOptionId">Defines product&#39;s option id where the value has to be assigned</param>
        /// <param name="optionValueId">Defines value id that has to be assigned</param>
        /// <param name="clearCache">Is cache clear required (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductOptionValueAssign200Response</returns>
        ApiResponse<ProductOptionValueAssign200Response> ProductOptionValueAssignWithHttpInfo(int productOptionId, string optionValueId, bool? clearCache = default(bool?), int operationIndex = 0);
        /// <summary>
        /// product.option.value.delete
        /// </summary>
        /// <remarks>
        /// Product option value delete.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionId">Defines option id where the value should be deleted</param>
        /// <param name="optionValueId">Defines option value id that should be deleted</param>
        /// <param name="productId">Defines product id where the option value should be deleted</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttributeDelete200Response</returns>
        AttributeDelete200Response ProductOptionValueDelete(string optionId, string optionValueId, string productId, string? storeId = default(string?), int operationIndex = 0);

        /// <summary>
        /// product.option.value.delete
        /// </summary>
        /// <remarks>
        /// Product option value delete.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionId">Defines option id where the value should be deleted</param>
        /// <param name="optionValueId">Defines option value id that should be deleted</param>
        /// <param name="productId">Defines product id where the option value should be deleted</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttributeDelete200Response</returns>
        ApiResponse<AttributeDelete200Response> ProductOptionValueDeleteWithHttpInfo(string optionId, string optionValueId, string productId, string? storeId = default(string?), int operationIndex = 0);
        /// <summary>
        /// product.option.value.update
        /// </summary>
        /// <remarks>
        /// Update product option item from option.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the option value should be updated</param>
        /// <param name="optionId">Defines option id where the value has to be updated</param>
        /// <param name="optionValueId">Defines value id that has to be assigned</param>
        /// <param name="optionValue">Defines option value that has to be added (optional)</param>
        /// <param name="price">Defines new product option price (optional)</param>
        /// <param name="quantity">Defines new products&#39; options quantity (optional)</param>
        /// <param name="displayValue">Defines the value that will be displayed for the option value (optional)</param>
        /// <param name="clearCache">Is cache clear required (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountConfigUpdate200Response</returns>
        AccountConfigUpdate200Response ProductOptionValueUpdate(string productId, string optionId, string optionValueId, string? optionValue = default(string?), decimal? price = default(decimal?), decimal? quantity = default(decimal?), string? displayValue = default(string?), bool? clearCache = default(bool?), int operationIndex = 0);

        /// <summary>
        /// product.option.value.update
        /// </summary>
        /// <remarks>
        /// Update product option item from option.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the option value should be updated</param>
        /// <param name="optionId">Defines option id where the value has to be updated</param>
        /// <param name="optionValueId">Defines value id that has to be assigned</param>
        /// <param name="optionValue">Defines option value that has to be added (optional)</param>
        /// <param name="price">Defines new product option price (optional)</param>
        /// <param name="quantity">Defines new products&#39; options quantity (optional)</param>
        /// <param name="displayValue">Defines the value that will be displayed for the option value (optional)</param>
        /// <param name="clearCache">Is cache clear required (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountConfigUpdate200Response</returns>
        ApiResponse<AccountConfigUpdate200Response> ProductOptionValueUpdateWithHttpInfo(string productId, string optionId, string optionValueId, string? optionValue = default(string?), decimal? price = default(decimal?), decimal? quantity = default(decimal?), string? displayValue = default(string?), bool? clearCache = default(bool?), int operationIndex = 0);
        /// <summary>
        /// product.price.add
        /// </summary>
        /// <remarks>
        /// Add some prices to the product.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productPriceAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CartValidate200Response</returns>
        CartValidate200Response ProductPriceAdd(ProductPriceAdd productPriceAdd, int operationIndex = 0);

        /// <summary>
        /// product.price.add
        /// </summary>
        /// <remarks>
        /// Add some prices to the product.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productPriceAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CartValidate200Response</returns>
        ApiResponse<CartValidate200Response> ProductPriceAddWithHttpInfo(ProductPriceAdd productPriceAdd, int operationIndex = 0);
        /// <summary>
        /// product.price.delete
        /// </summary>
        /// <remarks>
        /// Delete some prices of the product
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines the product where the price has to be deleted</param>
        /// <param name="groupPrices">Defines product&#39;s group prices (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttributeDelete200Response</returns>
        AttributeDelete200Response ProductPriceDelete(string productId, string? groupPrices = default(string?), string? storeId = default(string?), int operationIndex = 0);

        /// <summary>
        /// product.price.delete
        /// </summary>
        /// <remarks>
        /// Delete some prices of the product
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines the product where the price has to be deleted</param>
        /// <param name="groupPrices">Defines product&#39;s group prices (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttributeDelete200Response</returns>
        ApiResponse<AttributeDelete200Response> ProductPriceDeleteWithHttpInfo(string productId, string? groupPrices = default(string?), string? storeId = default(string?), int operationIndex = 0);
        /// <summary>
        /// product.price.update
        /// </summary>
        /// <remarks>
        /// Update some prices of the product.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productPriceUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountConfigUpdate200Response</returns>
        AccountConfigUpdate200Response ProductPriceUpdate(ProductPriceUpdate productPriceUpdate, int operationIndex = 0);

        /// <summary>
        /// product.price.update
        /// </summary>
        /// <remarks>
        /// Update some prices of the product.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productPriceUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountConfigUpdate200Response</returns>
        ApiResponse<AccountConfigUpdate200Response> ProductPriceUpdateWithHttpInfo(ProductPriceUpdate productPriceUpdate, int operationIndex = 0);
        /// <summary>
        /// product.review.list
        /// </summary>
        /// <remarks>
        /// Get reviews of a specific product.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product id</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="ids">Retrieves reviews specified by ids (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="status">Defines status (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,customer_id,email,message,status,product_id,nick_name,summary,rating,ratings,status,created_time&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelResponseProductReviewList</returns>
        ModelResponseProductReviewList ProductReviewList(string productId, int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? ids = default(string?), string? storeId = default(string?), string? status = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0);

        /// <summary>
        /// product.review.list
        /// </summary>
        /// <remarks>
        /// Get reviews of a specific product.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product id</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="ids">Retrieves reviews specified by ids (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="status">Defines status (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,customer_id,email,message,status,product_id,nick_name,summary,rating,ratings,status,created_time&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelResponseProductReviewList</returns>
        ApiResponse<ModelResponseProductReviewList> ProductReviewListWithHttpInfo(string productId, int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? ids = default(string?), string? storeId = default(string?), string? status = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0);
        /// <summary>
        /// product.store.assign
        /// </summary>
        /// <remarks>
        /// Assign product to store
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines id of the product which should be assigned to a store</param>
        /// <param name="storeId">Defines id of the store product should be assigned to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountConfigUpdate200Response</returns>
        AccountConfigUpdate200Response ProductStoreAssign(string productId, string storeId, int operationIndex = 0);

        /// <summary>
        /// product.store.assign
        /// </summary>
        /// <remarks>
        /// Assign product to store
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines id of the product which should be assigned to a store</param>
        /// <param name="storeId">Defines id of the store product should be assigned to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountConfigUpdate200Response</returns>
        ApiResponse<AccountConfigUpdate200Response> ProductStoreAssignWithHttpInfo(string productId, string storeId, int operationIndex = 0);
        /// <summary>
        /// product.tax.add
        /// </summary>
        /// <remarks>
        /// Add tax class and tax rate to store and assign to product.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productTaxAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductTaxAdd200Response</returns>
        ProductTaxAdd200Response ProductTaxAdd(ProductTaxAdd productTaxAdd, int operationIndex = 0);

        /// <summary>
        /// product.tax.add
        /// </summary>
        /// <remarks>
        /// Add tax class and tax rate to store and assign to product.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productTaxAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductTaxAdd200Response</returns>
        ApiResponse<ProductTaxAdd200Response> ProductTaxAddWithHttpInfo(ProductTaxAdd productTaxAdd, int operationIndex = 0);
        /// <summary>
        /// product.update
        /// </summary>
        /// <remarks>
        /// This method can be used to update certain product data. The list of supported parameters depends on the specific platform. Please transmit only those parameters that are supported by the particular platform. Please note that to update the product quantity, it is recommended to use relative parameters (increase_quantity or reduce_quantity) to avoid unexpected overwrites on heavily loaded stores.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountConfigUpdate200Response</returns>
        AccountConfigUpdate200Response ProductUpdate(ProductUpdate productUpdate, int operationIndex = 0);

        /// <summary>
        /// product.update
        /// </summary>
        /// <remarks>
        /// This method can be used to update certain product data. The list of supported parameters depends on the specific platform. Please transmit only those parameters that are supported by the particular platform. Please note that to update the product quantity, it is recommended to use relative parameters (increase_quantity or reduce_quantity) to avoid unexpected overwrites on heavily loaded stores.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountConfigUpdate200Response</returns>
        ApiResponse<AccountConfigUpdate200Response> ProductUpdateWithHttpInfo(ProductUpdate productUpdate, int operationIndex = 0);
        /// <summary>
        /// product.update.batch
        /// </summary>
        /// <remarks>
        /// Update products on the store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productUpdateBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoryAddBatch200Response</returns>
        CategoryAddBatch200Response ProductUpdateBatch(ProductUpdateBatch productUpdateBatch, int operationIndex = 0);

        /// <summary>
        /// product.update.batch
        /// </summary>
        /// <remarks>
        /// Update products on the store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productUpdateBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoryAddBatch200Response</returns>
        ApiResponse<CategoryAddBatch200Response> ProductUpdateBatchWithHttpInfo(ProductUpdateBatch productUpdateBatch, int operationIndex = 0);
        /// <summary>
        /// product.variant.add
        /// </summary>
        /// <remarks>
        /// Add variant to product.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductVariantAdd200Response</returns>
        ProductVariantAdd200Response ProductVariantAdd(ProductVariantAdd productVariantAdd, int operationIndex = 0);

        /// <summary>
        /// product.variant.add
        /// </summary>
        /// <remarks>
        /// Add variant to product.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductVariantAdd200Response</returns>
        ApiResponse<ProductVariantAdd200Response> ProductVariantAddWithHttpInfo(ProductVariantAdd productVariantAdd, int operationIndex = 0);
        /// <summary>
        /// product.variant.add.batch
        /// </summary>
        /// <remarks>
        /// Add new product variants to the store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantAddBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoryAddBatch200Response</returns>
        CategoryAddBatch200Response ProductVariantAddBatch(ProductVariantAddBatch productVariantAddBatch, int operationIndex = 0);

        /// <summary>
        /// product.variant.add.batch
        /// </summary>
        /// <remarks>
        /// Add new product variants to the store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantAddBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoryAddBatch200Response</returns>
        ApiResponse<CategoryAddBatch200Response> ProductVariantAddBatchWithHttpInfo(ProductVariantAddBatch productVariantAddBatch, int operationIndex = 0);
        /// <summary>
        /// product.variant.delete
        /// </summary>
        /// <remarks>
        /// Delete variant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Defines variant removal, specified by variant id</param>
        /// <param name="productId">Defines product&#39;s id where the variant has to be deleted</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttributeValueDelete200Response</returns>
        AttributeValueDelete200Response ProductVariantDelete(string id, string productId, string? storeId = default(string?), int operationIndex = 0);

        /// <summary>
        /// product.variant.delete
        /// </summary>
        /// <remarks>
        /// Delete variant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Defines variant removal, specified by variant id</param>
        /// <param name="productId">Defines product&#39;s id where the variant has to be deleted</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttributeValueDelete200Response</returns>
        ApiResponse<AttributeValueDelete200Response> ProductVariantDeleteWithHttpInfo(string id, string productId, string? storeId = default(string?), int operationIndex = 0);
        /// <summary>
        /// product.variant.delete.batch
        /// </summary>
        /// <remarks>
        /// Remove product variants from the store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantDeleteBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoryAddBatch200Response</returns>
        CategoryAddBatch200Response ProductVariantDeleteBatch(ProductVariantDeleteBatch productVariantDeleteBatch, int operationIndex = 0);

        /// <summary>
        /// product.variant.delete.batch
        /// </summary>
        /// <remarks>
        /// Remove product variants from the store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantDeleteBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoryAddBatch200Response</returns>
        ApiResponse<CategoryAddBatch200Response> ProductVariantDeleteBatchWithHttpInfo(ProductVariantDeleteBatch productVariantDeleteBatch, int operationIndex = 0);
        /// <summary>
        /// product.variant.image.add
        /// </summary>
        /// <remarks>
        /// Add image to product
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantImageAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductVariantImageAdd200Response</returns>
        ProductVariantImageAdd200Response ProductVariantImageAdd(ProductVariantImageAdd productVariantImageAdd, int operationIndex = 0);

        /// <summary>
        /// product.variant.image.add
        /// </summary>
        /// <remarks>
        /// Add image to product
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantImageAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductVariantImageAdd200Response</returns>
        ApiResponse<ProductVariantImageAdd200Response> ProductVariantImageAddWithHttpInfo(ProductVariantImageAdd productVariantImageAdd, int operationIndex = 0);
        /// <summary>
        /// product.variant.image.delete
        /// </summary>
        /// <remarks>
        /// Delete  image to product
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the variant image should be deleted</param>
        /// <param name="productVariantId">Defines product&#39;s variants specified by variant id</param>
        /// <param name="id">Entity id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttributeDelete200Response</returns>
        AttributeDelete200Response ProductVariantImageDelete(string productId, string productVariantId, string id, string? storeId = default(string?), int operationIndex = 0);

        /// <summary>
        /// product.variant.image.delete
        /// </summary>
        /// <remarks>
        /// Delete  image to product
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the variant image should be deleted</param>
        /// <param name="productVariantId">Defines product&#39;s variants specified by variant id</param>
        /// <param name="id">Entity id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttributeDelete200Response</returns>
        ApiResponse<AttributeDelete200Response> ProductVariantImageDeleteWithHttpInfo(string productId, string productVariantId, string id, string? storeId = default(string?), int operationIndex = 0);
        /// <summary>
        /// product.variant.price.add
        /// </summary>
        /// <remarks>
        /// Add some prices to the product variant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantPriceAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CartValidate200Response</returns>
        CartValidate200Response ProductVariantPriceAdd(ProductVariantPriceAdd productVariantPriceAdd, int operationIndex = 0);

        /// <summary>
        /// product.variant.price.add
        /// </summary>
        /// <remarks>
        /// Add some prices to the product variant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantPriceAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CartValidate200Response</returns>
        ApiResponse<CartValidate200Response> ProductVariantPriceAddWithHttpInfo(ProductVariantPriceAdd productVariantPriceAdd, int operationIndex = 0);
        /// <summary>
        /// product.variant.price.delete
        /// </summary>
        /// <remarks>
        /// Delete some prices of the product variant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Defines the variant where the price has to be deleted</param>
        /// <param name="productId">Product id</param>
        /// <param name="groupPrices">Defines variants&#39;s group prices</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttributeDelete200Response</returns>
        AttributeDelete200Response ProductVariantPriceDelete(string id, string productId, string groupPrices, string? storeId = default(string?), int operationIndex = 0);

        /// <summary>
        /// product.variant.price.delete
        /// </summary>
        /// <remarks>
        /// Delete some prices of the product variant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Defines the variant where the price has to be deleted</param>
        /// <param name="productId">Product id</param>
        /// <param name="groupPrices">Defines variants&#39;s group prices</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttributeDelete200Response</returns>
        ApiResponse<AttributeDelete200Response> ProductVariantPriceDeleteWithHttpInfo(string id, string productId, string groupPrices, string? storeId = default(string?), int operationIndex = 0);
        /// <summary>
        /// product.variant.price.update
        /// </summary>
        /// <remarks>
        /// Update some prices of the product variant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantPriceUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountConfigUpdate200Response</returns>
        AccountConfigUpdate200Response ProductVariantPriceUpdate(ProductVariantPriceUpdate productVariantPriceUpdate, int operationIndex = 0);

        /// <summary>
        /// product.variant.price.update
        /// </summary>
        /// <remarks>
        /// Update some prices of the product variant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantPriceUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountConfigUpdate200Response</returns>
        ApiResponse<AccountConfigUpdate200Response> ProductVariantPriceUpdateWithHttpInfo(ProductVariantPriceUpdate productVariantPriceUpdate, int operationIndex = 0);
        /// <summary>
        /// product.variant.update
        /// </summary>
        /// <remarks>
        /// Update variant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountConfigUpdate200Response</returns>
        AccountConfigUpdate200Response ProductVariantUpdate(ProductVariantUpdate productVariantUpdate, int operationIndex = 0);

        /// <summary>
        /// product.variant.update
        /// </summary>
        /// <remarks>
        /// Update variant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountConfigUpdate200Response</returns>
        ApiResponse<AccountConfigUpdate200Response> ProductVariantUpdateWithHttpInfo(ProductVariantUpdate productVariantUpdate, int operationIndex = 0);
        /// <summary>
        /// product.variant.update.batch
        /// </summary>
        /// <remarks>
        /// Update products variants on the store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantUpdateBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoryAddBatch200Response</returns>
        CategoryAddBatch200Response ProductVariantUpdateBatch(ProductVariantUpdateBatch productVariantUpdateBatch, int operationIndex = 0);

        /// <summary>
        /// product.variant.update.batch
        /// </summary>
        /// <remarks>
        /// Update products variants on the store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantUpdateBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoryAddBatch200Response</returns>
        ApiResponse<CategoryAddBatch200Response> ProductVariantUpdateBatchWithHttpInfo(ProductVariantUpdateBatch productVariantUpdateBatch, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// product.add
        /// </summary>
        /// <remarks>
        /// Add new product to store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductAdd200Response</returns>
        System.Threading.Tasks.Task<ProductAdd200Response> ProductAddAsync(ProductAdd productAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// product.add
        /// </summary>
        /// <remarks>
        /// Add new product to store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductAdd200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductAdd200Response>> ProductAddWithHttpInfoAsync(ProductAdd productAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// product.add.batch
        /// </summary>
        /// <remarks>
        /// Add new products to the store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productAddBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryAddBatch200Response</returns>
        System.Threading.Tasks.Task<CategoryAddBatch200Response> ProductAddBatchAsync(ProductAddBatch productAddBatch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// product.add.batch
        /// </summary>
        /// <remarks>
        /// Add new products to the store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productAddBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryAddBatch200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CategoryAddBatch200Response>> ProductAddBatchWithHttpInfoAsync(ProductAddBatch productAddBatch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// product.attribute.list
        /// </summary>
        /// <remarks>
        /// Get list of attributes and values.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Retrieves attributes specified by product id</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="attributeId">Retrieves info for specified attribute_id (optional)</param>
        /// <param name="variantId">Defines product&#39;s variants specified by variant id (optional)</param>
        /// <param name="attributeGroupId">Filter by attribute_group_id (optional)</param>
        /// <param name="langId">Retrieves attributes specified by language id (optional)</param>
        /// <param name="storeId">Retrieves attributes specified by store id (optional)</param>
        /// <param name="setName">Retrieves attributes specified by set_name in Magento (optional)</param>
        /// <param name="sortBy">Set field to sort by (optional, default to &quot;attribute_id&quot;)</param>
        /// <param name="sortDirection">Set sorting direction (optional, default to &quot;asc&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;attribute_id,name&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelResponseProductAttributeList</returns>
        System.Threading.Tasks.Task<ModelResponseProductAttributeList> ProductAttributeListAsync(string productId, int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? attributeId = default(string?), string? variantId = default(string?), string? attributeGroupId = default(string?), string? langId = default(string?), string? storeId = default(string?), string? setName = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// product.attribute.list
        /// </summary>
        /// <remarks>
        /// Get list of attributes and values.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Retrieves attributes specified by product id</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="attributeId">Retrieves info for specified attribute_id (optional)</param>
        /// <param name="variantId">Defines product&#39;s variants specified by variant id (optional)</param>
        /// <param name="attributeGroupId">Filter by attribute_group_id (optional)</param>
        /// <param name="langId">Retrieves attributes specified by language id (optional)</param>
        /// <param name="storeId">Retrieves attributes specified by store id (optional)</param>
        /// <param name="setName">Retrieves attributes specified by set_name in Magento (optional)</param>
        /// <param name="sortBy">Set field to sort by (optional, default to &quot;attribute_id&quot;)</param>
        /// <param name="sortDirection">Set sorting direction (optional, default to &quot;asc&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;attribute_id,name&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelResponseProductAttributeList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelResponseProductAttributeList>> ProductAttributeListWithHttpInfoAsync(string productId, int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? attributeId = default(string?), string? variantId = default(string?), string? attributeGroupId = default(string?), string? langId = default(string?), string? storeId = default(string?), string? setName = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// product.attribute.value.set
        /// </summary>
        /// <remarks>
        /// Set attribute value to product.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the attribute should be added</param>
        /// <param name="attributeId">Filter by attribute_id (optional)</param>
        /// <param name="attributeGroupId">Filter by attribute_group_id (optional)</param>
        /// <param name="attributeName">Define attribute name (optional)</param>
        /// <param name="value">Define attribute value (optional)</param>
        /// <param name="valueId">Define attribute value id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductAttributeValueSet200Response</returns>
        System.Threading.Tasks.Task<ProductAttributeValueSet200Response> ProductAttributeValueSetAsync(string productId, string? attributeId = default(string?), string? attributeGroupId = default(string?), string? attributeName = default(string?), string? value = default(string?), int? valueId = default(int?), string? langId = default(string?), string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// product.attribute.value.set
        /// </summary>
        /// <remarks>
        /// Set attribute value to product.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the attribute should be added</param>
        /// <param name="attributeId">Filter by attribute_id (optional)</param>
        /// <param name="attributeGroupId">Filter by attribute_group_id (optional)</param>
        /// <param name="attributeName">Define attribute name (optional)</param>
        /// <param name="value">Define attribute value (optional)</param>
        /// <param name="valueId">Define attribute value id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductAttributeValueSet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductAttributeValueSet200Response>> ProductAttributeValueSetWithHttpInfoAsync(string productId, string? attributeId = default(string?), string? attributeGroupId = default(string?), string? attributeName = default(string?), string? value = default(string?), int? valueId = default(int?), string? langId = default(string?), string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// product.attribute.value.unset
        /// </summary>
        /// <remarks>
        /// Removes attribute value for a product.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product id</param>
        /// <param name="attributeId">Attribute Id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="includeDefault">Boolean, whether or not to unset default value of the attribute, if applicable (optional, default to false)</param>
        /// <param name="reindex">Is reindex required (optional, default to true)</param>
        /// <param name="clearCache">Is cache clear required (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductAttributeValueUnset200Response</returns>
        System.Threading.Tasks.Task<ProductAttributeValueUnset200Response> ProductAttributeValueUnsetAsync(string productId, string attributeId, string? storeId = default(string?), bool? includeDefault = default(bool?), bool? reindex = default(bool?), bool? clearCache = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// product.attribute.value.unset
        /// </summary>
        /// <remarks>
        /// Removes attribute value for a product.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product id</param>
        /// <param name="attributeId">Attribute Id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="includeDefault">Boolean, whether or not to unset default value of the attribute, if applicable (optional, default to false)</param>
        /// <param name="reindex">Is reindex required (optional, default to true)</param>
        /// <param name="clearCache">Is cache clear required (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductAttributeValueUnset200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductAttributeValueUnset200Response>> ProductAttributeValueUnsetWithHttpInfoAsync(string productId, string attributeId, string? storeId = default(string?), bool? includeDefault = default(bool?), bool? reindex = default(bool?), bool? clearCache = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// product.brand.list
        /// </summary>
        /// <remarks>
        /// Get list of brands from your store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="brandIds">Retrieves brands specified by brand ids (optional)</param>
        /// <param name="categoryId">Retrieves product brands specified by category id (optional)</param>
        /// <param name="parentId">Retrieves brands specified by parent id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="findWhere">Entity search that is specified by the comma-separated unique fields (optional)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name,short_description,active,url&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelResponseProductBrandList</returns>
        System.Threading.Tasks.Task<ModelResponseProductBrandList> ProductBrandListAsync(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? brandIds = default(string?), string? categoryId = default(string?), string? parentId = default(string?), string? storeId = default(string?), string? langId = default(string?), string? findWhere = default(string?), string? findValue = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// product.brand.list
        /// </summary>
        /// <remarks>
        /// Get list of brands from your store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="brandIds">Retrieves brands specified by brand ids (optional)</param>
        /// <param name="categoryId">Retrieves product brands specified by category id (optional)</param>
        /// <param name="parentId">Retrieves brands specified by parent id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="findWhere">Entity search that is specified by the comma-separated unique fields (optional)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name,short_description,active,url&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelResponseProductBrandList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelResponseProductBrandList>> ProductBrandListWithHttpInfoAsync(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? brandIds = default(string?), string? categoryId = default(string?), string? parentId = default(string?), string? storeId = default(string?), string? langId = default(string?), string? findWhere = default(string?), string? findValue = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// product.child_item.find
        /// </summary>
        /// <remarks>
        /// Search product child item (bundled item or configurable product variant) in store catalog.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Entity search that is specified by the comma-separated unique fields (optional)</param>
        /// <param name="findParams">Entity search that is specified by comma-separated parameters (optional, default to &quot;whole_words&quot;)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductChildItemFind200Response</returns>
        System.Threading.Tasks.Task<ProductChildItemFind200Response> ProductChildItemFindAsync(string? findValue = default(string?), string? findWhere = default(string?), string? findParams = default(string?), string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// product.child_item.find
        /// </summary>
        /// <remarks>
        /// Search product child item (bundled item or configurable product variant) in store catalog.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Entity search that is specified by the comma-separated unique fields (optional)</param>
        /// <param name="findParams">Entity search that is specified by comma-separated parameters (optional, default to &quot;whole_words&quot;)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductChildItemFind200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductChildItemFind200Response>> ProductChildItemFindWithHttpInfoAsync(string? findValue = default(string?), string? findWhere = default(string?), string? findParams = default(string?), string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// product.child_item.info
        /// </summary>
        /// <remarks>
        /// Get child for specific product.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Filter by parent product id</param>
        /// <param name="id">Entity id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="currencyId">Currency Id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductChildItemInfo200Response</returns>
        System.Threading.Tasks.Task<ProductChildItemInfo200Response> ProductChildItemInfoAsync(string productId, string id, string? storeId = default(string?), string? langId = default(string?), string? currencyId = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), bool? useLatestApiVersion = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// product.child_item.info
        /// </summary>
        /// <remarks>
        /// Get child for specific product.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Filter by parent product id</param>
        /// <param name="id">Entity id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="currencyId">Currency Id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductChildItemInfo200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductChildItemInfo200Response>> ProductChildItemInfoWithHttpInfoAsync(string productId, string id, string? storeId = default(string?), string? langId = default(string?), string? currencyId = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), bool? useLatestApiVersion = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// product.child_item.list
        /// </summary>
        /// <remarks>
        /// Get a list of a product&#39;s child items, such as variants or bundle components. The total_count field in the response indicates the total number of items in the context of the current filter.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve products child items via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="productId">Filter by parent product id (optional)</param>
        /// <param name="productIds">Filter by parent product ids (optional)</param>
        /// <param name="sku">Filter by products variant&#39;s sku (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="currencyId">Currency Id (optional)</param>
        /// <param name="availSale">Specifies the set of available/not available products for sale (optional)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Child products search that is specified by field (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="returnGlobal">Determines the type of products to be returned. If set to &#39;true&#39;, only global products will be returned; if set to &#39;false&#39;, only local products will be returned. (optional, default to false)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelResponseProductChildItemList</returns>
        System.Threading.Tasks.Task<ModelResponseProductChildItemList> ProductChildItemListAsync(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? productId = default(string?), string? productIds = default(string?), string? sku = default(string?), string? storeId = default(string?), string? langId = default(string?), string? currencyId = default(string?), bool? availSale = default(bool?), string? findValue = default(string?), string? findWhere = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), bool? returnGlobal = default(bool?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), string? reportRequestId = default(string?), bool? disableReportCache = default(bool?), bool? useLatestApiVersion = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// product.child_item.list
        /// </summary>
        /// <remarks>
        /// Get a list of a product&#39;s child items, such as variants or bundle components. The total_count field in the response indicates the total number of items in the context of the current filter.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve products child items via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="productId">Filter by parent product id (optional)</param>
        /// <param name="productIds">Filter by parent product ids (optional)</param>
        /// <param name="sku">Filter by products variant&#39;s sku (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="currencyId">Currency Id (optional)</param>
        /// <param name="availSale">Specifies the set of available/not available products for sale (optional)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Child products search that is specified by field (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="returnGlobal">Determines the type of products to be returned. If set to &#39;true&#39;, only global products will be returned; if set to &#39;false&#39;, only local products will be returned. (optional, default to false)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelResponseProductChildItemList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelResponseProductChildItemList>> ProductChildItemListWithHttpInfoAsync(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? productId = default(string?), string? productIds = default(string?), string? sku = default(string?), string? storeId = default(string?), string? langId = default(string?), string? currencyId = default(string?), bool? availSale = default(bool?), string? findValue = default(string?), string? findWhere = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), bool? returnGlobal = default(bool?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), string? reportRequestId = default(string?), bool? disableReportCache = default(bool?), bool? useLatestApiVersion = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// product.count
        /// </summary>
        /// <remarks>
        /// Count products in store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productIds">Counts products specified by product ids (optional)</param>
        /// <param name="sinceId">Retrieve entities starting from the specified id. (optional)</param>
        /// <param name="categoriesIds">Defines product add that is specified by comma-separated categories id (optional)</param>
        /// <param name="categoryId">Counts products specified by category id (optional)</param>
        /// <param name="storeId">Counts products specified by store id (optional)</param>
        /// <param name="langId">Counts products specified by language id (optional)</param>
        /// <param name="availView">Specifies the set of visible/invisible products (optional)</param>
        /// <param name="availSale">Specifies the set of available/not available products for sale (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="brandName">Retrieves brands specified by brand name (optional)</param>
        /// <param name="productAttributes">Defines product attributes (optional)</param>
        /// <param name="status">Defines product&#39;s status (optional)</param>
        /// <param name="type">Defines products&#39;s type (optional)</param>
        /// <param name="visible">Filter items by visibility status (optional, default to &quot;everywhere&quot;)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Counts products that are searched specified by field (optional)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="returnGlobal">Determines the type of products to be returned. If set to &#39;true&#39;, only global products will be returned; if set to &#39;false&#39;, only local products will be returned. (optional, default to false)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductCount200Response</returns>
        System.Threading.Tasks.Task<ProductCount200Response> ProductCountAsync(string? productIds = default(string?), string? sinceId = default(string?), string? categoriesIds = default(string?), string? categoryId = default(string?), string? storeId = default(string?), string? langId = default(string?), bool? availView = default(bool?), bool? availSale = default(bool?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), string? brandName = default(string?), List<string>? productAttributes = default(List<string>?), string? status = default(string?), string? type = default(string?), string? visible = default(string?), string? findValue = default(string?), string? findWhere = default(string?), string? reportRequestId = default(string?), bool? returnGlobal = default(bool?), bool? disableReportCache = default(bool?), bool? useLatestApiVersion = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// product.count
        /// </summary>
        /// <remarks>
        /// Count products in store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productIds">Counts products specified by product ids (optional)</param>
        /// <param name="sinceId">Retrieve entities starting from the specified id. (optional)</param>
        /// <param name="categoriesIds">Defines product add that is specified by comma-separated categories id (optional)</param>
        /// <param name="categoryId">Counts products specified by category id (optional)</param>
        /// <param name="storeId">Counts products specified by store id (optional)</param>
        /// <param name="langId">Counts products specified by language id (optional)</param>
        /// <param name="availView">Specifies the set of visible/invisible products (optional)</param>
        /// <param name="availSale">Specifies the set of available/not available products for sale (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="brandName">Retrieves brands specified by brand name (optional)</param>
        /// <param name="productAttributes">Defines product attributes (optional)</param>
        /// <param name="status">Defines product&#39;s status (optional)</param>
        /// <param name="type">Defines products&#39;s type (optional)</param>
        /// <param name="visible">Filter items by visibility status (optional, default to &quot;everywhere&quot;)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Counts products that are searched specified by field (optional)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="returnGlobal">Determines the type of products to be returned. If set to &#39;true&#39;, only global products will be returned; if set to &#39;false&#39;, only local products will be returned. (optional, default to false)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductCount200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductCount200Response>> ProductCountWithHttpInfoAsync(string? productIds = default(string?), string? sinceId = default(string?), string? categoriesIds = default(string?), string? categoryId = default(string?), string? storeId = default(string?), string? langId = default(string?), bool? availView = default(bool?), bool? availSale = default(bool?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), string? brandName = default(string?), List<string>? productAttributes = default(List<string>?), string? status = default(string?), string? type = default(string?), string? visible = default(string?), string? findValue = default(string?), string? findWhere = default(string?), string? reportRequestId = default(string?), bool? returnGlobal = default(bool?), bool? disableReportCache = default(bool?), bool? useLatestApiVersion = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// product.currency.add
        /// </summary>
        /// <remarks>
        /// Add currency and/or set default in store
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iso3">Specifies standardized currency code</param>
        /// <param name="rate">Defines the numerical identifier against to the major currency</param>
        /// <param name="name">Defines currency&#39;s name (optional)</param>
        /// <param name="avail">Specifies whether the currency is available (optional, default to true)</param>
        /// <param name="symbolLeft">Defines the symbol that is located before the currency (optional)</param>
        /// <param name="symbolRight">Defines the symbol that is located after the currency (optional)</param>
        /// <param name="varDefault">Specifies currency&#39;s default meaning (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductCurrencyAdd200Response</returns>
        System.Threading.Tasks.Task<ProductCurrencyAdd200Response> ProductCurrencyAddAsync(string iso3, decimal rate, string? name = default(string?), bool? avail = default(bool?), string? symbolLeft = default(string?), string? symbolRight = default(string?), bool? varDefault = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// product.currency.add
        /// </summary>
        /// <remarks>
        /// Add currency and/or set default in store
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iso3">Specifies standardized currency code</param>
        /// <param name="rate">Defines the numerical identifier against to the major currency</param>
        /// <param name="name">Defines currency&#39;s name (optional)</param>
        /// <param name="avail">Specifies whether the currency is available (optional, default to true)</param>
        /// <param name="symbolLeft">Defines the symbol that is located before the currency (optional)</param>
        /// <param name="symbolRight">Defines the symbol that is located after the currency (optional)</param>
        /// <param name="varDefault">Specifies currency&#39;s default meaning (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductCurrencyAdd200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductCurrencyAdd200Response>> ProductCurrencyAddWithHttpInfoAsync(string iso3, decimal rate, string? name = default(string?), bool? avail = default(bool?), string? symbolLeft = default(string?), string? symbolRight = default(string?), bool? varDefault = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// product.currency.list
        /// </summary>
        /// <remarks>
        /// Get list of currencies
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="varDefault">Specifies the set of default/not default currencies (optional)</param>
        /// <param name="avail">Specifies the set of available/not available currencies (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;name,iso3,default,avail&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelResponseProductCurrencyList</returns>
        System.Threading.Tasks.Task<ModelResponseProductCurrencyList> ProductCurrencyListAsync(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), bool? varDefault = default(bool?), bool? avail = default(bool?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// product.currency.list
        /// </summary>
        /// <remarks>
        /// Get list of currencies
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="varDefault">Specifies the set of default/not default currencies (optional)</param>
        /// <param name="avail">Specifies the set of available/not available currencies (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;name,iso3,default,avail&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelResponseProductCurrencyList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelResponseProductCurrencyList>> ProductCurrencyListWithHttpInfoAsync(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), bool? varDefault = default(bool?), bool? avail = default(bool?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// product.delete
        /// </summary>
        /// <remarks>
        /// Product delete
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Product id that will be removed</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomerDelete200Response</returns>
        System.Threading.Tasks.Task<CustomerDelete200Response> ProductDeleteAsync(string id, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// product.delete
        /// </summary>
        /// <remarks>
        /// Product delete
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Product id that will be removed</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomerDelete200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerDelete200Response>> ProductDeleteWithHttpInfoAsync(string id, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// product.delete.batch
        /// </summary>
        /// <remarks>
        /// Remove product from the store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productDeleteBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryAddBatch200Response</returns>
        System.Threading.Tasks.Task<CategoryAddBatch200Response> ProductDeleteBatchAsync(ProductDeleteBatch productDeleteBatch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// product.delete.batch
        /// </summary>
        /// <remarks>
        /// Remove product from the store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productDeleteBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryAddBatch200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CategoryAddBatch200Response>> ProductDeleteBatchWithHttpInfoAsync(ProductDeleteBatch productDeleteBatch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// product.find
        /// </summary>
        /// <remarks>
        /// Search product in store catalog. \&quot;Apple\&quot; is specified here by default.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findValue">Entity search that is specified by some value</param>
        /// <param name="findWhere">Entity search that is specified by the comma-separated unique fields (optional, default to &quot;name&quot;)</param>
        /// <param name="findParams">Entity search that is specified by comma-separated parameters (optional, default to &quot;whole_words&quot;)</param>
        /// <param name="findWhat">Parameter&#39;s value specifies the entity that has to be found (optional, default to &quot;product&quot;)</param>
        /// <param name="langId">Search products specified by language id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductFind200Response</returns>
        System.Threading.Tasks.Task<ProductFind200Response> ProductFindAsync(string findValue, string? findWhere = default(string?), string? findParams = default(string?), string? findWhat = default(string?), string? langId = default(string?), string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// product.find
        /// </summary>
        /// <remarks>
        /// Search product in store catalog. \&quot;Apple\&quot; is specified here by default.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findValue">Entity search that is specified by some value</param>
        /// <param name="findWhere">Entity search that is specified by the comma-separated unique fields (optional, default to &quot;name&quot;)</param>
        /// <param name="findParams">Entity search that is specified by comma-separated parameters (optional, default to &quot;whole_words&quot;)</param>
        /// <param name="findWhat">Parameter&#39;s value specifies the entity that has to be found (optional, default to &quot;product&quot;)</param>
        /// <param name="langId">Search products specified by language id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductFind200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductFind200Response>> ProductFindWithHttpInfoAsync(string findValue, string? findWhere = default(string?), string? findParams = default(string?), string? findWhat = default(string?), string? langId = default(string?), string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// product.image.add
        /// </summary>
        /// <remarks>
        /// Add image to product
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productImageAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductImageAdd200Response</returns>
        System.Threading.Tasks.Task<ProductImageAdd200Response> ProductImageAddAsync(ProductImageAdd productImageAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// product.image.add
        /// </summary>
        /// <remarks>
        /// Add image to product
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productImageAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductImageAdd200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductImageAdd200Response>> ProductImageAddWithHttpInfoAsync(ProductImageAdd productImageAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// product.image.delete
        /// </summary>
        /// <remarks>
        /// Delete image
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the image should be deleted</param>
        /// <param name="id">Entity id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttributeDelete200Response</returns>
        System.Threading.Tasks.Task<AttributeDelete200Response> ProductImageDeleteAsync(string productId, string id, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// product.image.delete
        /// </summary>
        /// <remarks>
        /// Delete image
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the image should be deleted</param>
        /// <param name="id">Entity id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttributeDelete200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttributeDelete200Response>> ProductImageDeleteWithHttpInfoAsync(string productId, string id, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// product.image.update
        /// </summary>
        /// <remarks>
        /// Update details of image
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the image should be updated</param>
        /// <param name="id">Defines image update specified by image id</param>
        /// <param name="variantIds">Defines product&#39;s variants ids (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="imageName">Defines image&#39;s name (optional)</param>
        /// <param name="type">Defines image&#39;s types that are specified by comma-separated list (optional, default to &quot;additional&quot;)</param>
        /// <param name="label">Defines alternative text that has to be attached to the picture (optional)</param>
        /// <param name="position">Defines image’s position in the list (optional)</param>
        /// <param name="hidden">Define is hide image (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductImageUpdate200Response</returns>
        System.Threading.Tasks.Task<ProductImageUpdate200Response> ProductImageUpdateAsync(string productId, string id, string? variantIds = default(string?), string? storeId = default(string?), string? langId = default(string?), string? imageName = default(string?), string? type = default(string?), string? label = default(string?), int? position = default(int?), bool? hidden = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// product.image.update
        /// </summary>
        /// <remarks>
        /// Update details of image
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the image should be updated</param>
        /// <param name="id">Defines image update specified by image id</param>
        /// <param name="variantIds">Defines product&#39;s variants ids (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="imageName">Defines image&#39;s name (optional)</param>
        /// <param name="type">Defines image&#39;s types that are specified by comma-separated list (optional, default to &quot;additional&quot;)</param>
        /// <param name="label">Defines alternative text that has to be attached to the picture (optional)</param>
        /// <param name="position">Defines image’s position in the list (optional)</param>
        /// <param name="hidden">Define is hide image (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductImageUpdate200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductImageUpdate200Response>> ProductImageUpdateWithHttpInfoAsync(string productId, string id, string? variantIds = default(string?), string? storeId = default(string?), string? langId = default(string?), string? imageName = default(string?), string? type = default(string?), string? label = default(string?), int? position = default(int?), bool? hidden = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// product.info
        /// </summary>
        /// <remarks>
        /// Get information about a specific product by its ID. In the case of a multistore configuration, use the store_id filter to get a response in the context of a specific store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Retrieves product&#39;s info specified by product id</param>
        /// <param name="storeId">Retrieves product info specified by store id (optional)</param>
        /// <param name="langId">Retrieves product info specified by language id (optional)</param>
        /// <param name="currencyId">Currency Id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name,description,price,categories_ids&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductInfo200Response</returns>
        System.Threading.Tasks.Task<ProductInfo200Response> ProductInfoAsync(string id, string? storeId = default(string?), string? langId = default(string?), string? currencyId = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), string? reportRequestId = default(string?), bool? disableReportCache = default(bool?), bool? useLatestApiVersion = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// product.info
        /// </summary>
        /// <remarks>
        /// Get information about a specific product by its ID. In the case of a multistore configuration, use the store_id filter to get a response in the context of a specific store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Retrieves product&#39;s info specified by product id</param>
        /// <param name="storeId">Retrieves product info specified by store id (optional)</param>
        /// <param name="langId">Retrieves product info specified by language id (optional)</param>
        /// <param name="currencyId">Currency Id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name,description,price,categories_ids&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductInfo200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductInfo200Response>> ProductInfoWithHttpInfoAsync(string id, string? storeId = default(string?), string? langId = default(string?), string? currencyId = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), string? reportRequestId = default(string?), bool? disableReportCache = default(bool?), bool? useLatestApiVersion = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// product.list
        /// </summary>
        /// <remarks>
        /// Get list of products from your store. Returns 10 products by default.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve products via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="productIds">Retrieves products specified by product ids (optional)</param>
        /// <param name="sinceId">Retrieve entities starting from the specified id. (optional)</param>
        /// <param name="categoriesIds">Retrieves products specified by categories ids (optional)</param>
        /// <param name="categoryId">Retrieves products specified by category id (optional)</param>
        /// <param name="storeId">Retrieves products specified by store id (optional)</param>
        /// <param name="langId">Retrieves products specified by language id (optional)</param>
        /// <param name="currencyId">Currency Id (optional)</param>
        /// <param name="availView">Specifies the set of visible/invisible products (optional)</param>
        /// <param name="availSale">Specifies the set of available/not available products for sale (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="sku">Filter by product&#39;s sku (optional)</param>
        /// <param name="brandName">Retrieves brands specified by brand name (optional)</param>
        /// <param name="productAttributes">Defines product attributes (optional)</param>
        /// <param name="status">Defines product&#39;s status (optional)</param>
        /// <param name="type">Defines products&#39;s type (optional)</param>
        /// <param name="visible">Filter items by visibility status (optional, default to &quot;everywhere&quot;)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Product search that is specified by field (optional)</param>
        /// <param name="returnGlobal">Determines the type of products to be returned. If set to &#39;true&#39;, only global products will be returned; if set to &#39;false&#39;, only local products will be returned. (optional, default to false)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name,description,price,categories_ids&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="sortBy">Set field to sort by (optional, default to &quot;id&quot;)</param>
        /// <param name="sortDirection">Set sorting direction (optional, default to &quot;asc&quot;)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="disableCache">Disable cache for current request (optional, default to false)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="productType">A categorization for the product (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelResponseProductList</returns>
        System.Threading.Tasks.Task<ModelResponseProductList> ProductListAsync(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? productIds = default(string?), string? sinceId = default(string?), string? categoriesIds = default(string?), string? categoryId = default(string?), string? storeId = default(string?), string? langId = default(string?), string? currencyId = default(string?), bool? availView = default(bool?), bool? availSale = default(bool?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), string? sku = default(string?), string? brandName = default(string?), List<string>? productAttributes = default(List<string>?), string? status = default(string?), string? type = default(string?), string? visible = default(string?), string? findValue = default(string?), string? findWhere = default(string?), bool? returnGlobal = default(bool?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? reportRequestId = default(string?), bool? disableCache = default(bool?), bool? disableReportCache = default(bool?), bool? useLatestApiVersion = default(bool?), string? productType = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// product.list
        /// </summary>
        /// <remarks>
        /// Get list of products from your store. Returns 10 products by default.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve products via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="productIds">Retrieves products specified by product ids (optional)</param>
        /// <param name="sinceId">Retrieve entities starting from the specified id. (optional)</param>
        /// <param name="categoriesIds">Retrieves products specified by categories ids (optional)</param>
        /// <param name="categoryId">Retrieves products specified by category id (optional)</param>
        /// <param name="storeId">Retrieves products specified by store id (optional)</param>
        /// <param name="langId">Retrieves products specified by language id (optional)</param>
        /// <param name="currencyId">Currency Id (optional)</param>
        /// <param name="availView">Specifies the set of visible/invisible products (optional)</param>
        /// <param name="availSale">Specifies the set of available/not available products for sale (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="sku">Filter by product&#39;s sku (optional)</param>
        /// <param name="brandName">Retrieves brands specified by brand name (optional)</param>
        /// <param name="productAttributes">Defines product attributes (optional)</param>
        /// <param name="status">Defines product&#39;s status (optional)</param>
        /// <param name="type">Defines products&#39;s type (optional)</param>
        /// <param name="visible">Filter items by visibility status (optional, default to &quot;everywhere&quot;)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Product search that is specified by field (optional)</param>
        /// <param name="returnGlobal">Determines the type of products to be returned. If set to &#39;true&#39;, only global products will be returned; if set to &#39;false&#39;, only local products will be returned. (optional, default to false)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name,description,price,categories_ids&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="sortBy">Set field to sort by (optional, default to &quot;id&quot;)</param>
        /// <param name="sortDirection">Set sorting direction (optional, default to &quot;asc&quot;)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="disableCache">Disable cache for current request (optional, default to false)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="productType">A categorization for the product (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelResponseProductList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelResponseProductList>> ProductListWithHttpInfoAsync(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? productIds = default(string?), string? sinceId = default(string?), string? categoriesIds = default(string?), string? categoryId = default(string?), string? storeId = default(string?), string? langId = default(string?), string? currencyId = default(string?), bool? availView = default(bool?), bool? availSale = default(bool?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), string? sku = default(string?), string? brandName = default(string?), List<string>? productAttributes = default(List<string>?), string? status = default(string?), string? type = default(string?), string? visible = default(string?), string? findValue = default(string?), string? findWhere = default(string?), bool? returnGlobal = default(bool?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? reportRequestId = default(string?), bool? disableCache = default(bool?), bool? disableReportCache = default(bool?), bool? useLatestApiVersion = default(bool?), string? productType = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// product.manufacturer.add
        /// </summary>
        /// <remarks>
        /// Add manufacturer to store and assign to product
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines products specified by product id</param>
        /// <param name="manufacturer">Defines product’s manufacturer&#39;s name</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductManufacturerAdd200Response</returns>
        System.Threading.Tasks.Task<ProductManufacturerAdd200Response> ProductManufacturerAddAsync(string productId, string manufacturer, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// product.manufacturer.add
        /// </summary>
        /// <remarks>
        /// Add manufacturer to store and assign to product
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines products specified by product id</param>
        /// <param name="manufacturer">Defines product’s manufacturer&#39;s name</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductManufacturerAdd200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductManufacturerAdd200Response>> ProductManufacturerAddWithHttpInfoAsync(string productId, string manufacturer, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// product.option.add
        /// </summary>
        /// <remarks>
        /// Add product option from store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productOptionAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductOptionAdd200Response</returns>
        System.Threading.Tasks.Task<ProductOptionAdd200Response> ProductOptionAddAsync(ProductOptionAdd productOptionAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// product.option.add
        /// </summary>
        /// <remarks>
        /// Add product option from store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productOptionAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductOptionAdd200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductOptionAdd200Response>> ProductOptionAddWithHttpInfoAsync(ProductOptionAdd productOptionAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// product.option.assign
        /// </summary>
        /// <remarks>
        /// Assign option from product.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the option should be assigned</param>
        /// <param name="optionId">Defines option id which has to be assigned</param>
        /// <param name="required">Defines if the option is required (optional, default to false)</param>
        /// <param name="sortOrder">Sort number in the list (optional, default to 0)</param>
        /// <param name="optionValues">Defines option values that has to be assigned (optional)</param>
        /// <param name="clearCache">Is cache clear required (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductOptionAssign200Response</returns>
        System.Threading.Tasks.Task<ProductOptionAssign200Response> ProductOptionAssignAsync(string productId, string optionId, bool? required = default(bool?), int? sortOrder = default(int?), string? optionValues = default(string?), bool? clearCache = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// product.option.assign
        /// </summary>
        /// <remarks>
        /// Assign option from product.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the option should be assigned</param>
        /// <param name="optionId">Defines option id which has to be assigned</param>
        /// <param name="required">Defines if the option is required (optional, default to false)</param>
        /// <param name="sortOrder">Sort number in the list (optional, default to 0)</param>
        /// <param name="optionValues">Defines option values that has to be assigned (optional)</param>
        /// <param name="clearCache">Is cache clear required (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductOptionAssign200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductOptionAssign200Response>> ProductOptionAssignWithHttpInfoAsync(string productId, string optionId, bool? required = default(bool?), int? sortOrder = default(int?), string? optionValues = default(string?), bool? clearCache = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// product.option.delete
        /// </summary>
        /// <remarks>
        /// Product option delete.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionId">Defines option id that should be deleted</param>
        /// <param name="productId">Defines product id where the option should be deleted</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttributeDelete200Response</returns>
        System.Threading.Tasks.Task<AttributeDelete200Response> ProductOptionDeleteAsync(string optionId, string productId, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// product.option.delete
        /// </summary>
        /// <remarks>
        /// Product option delete.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionId">Defines option id that should be deleted</param>
        /// <param name="productId">Defines product id where the option should be deleted</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttributeDelete200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttributeDelete200Response>> ProductOptionDeleteWithHttpInfoAsync(string optionId, string productId, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// product.option.list
        /// </summary>
        /// <remarks>
        /// Get list of options.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="productId">Retrieves products&#39; options specified by product id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name,description&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelResponseProductOptionList</returns>
        System.Threading.Tasks.Task<ModelResponseProductOptionList> ProductOptionListAsync(int? start = default(int?), int? count = default(int?), string? productId = default(string?), string? langId = default(string?), string? storeId = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// product.option.list
        /// </summary>
        /// <remarks>
        /// Get list of options.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="productId">Retrieves products&#39; options specified by product id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name,description&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelResponseProductOptionList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelResponseProductOptionList>> ProductOptionListWithHttpInfoAsync(int? start = default(int?), int? count = default(int?), string? productId = default(string?), string? langId = default(string?), string? storeId = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// product.option.value.add
        /// </summary>
        /// <remarks>
        /// Add product option item from option.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the option value should be added</param>
        /// <param name="optionId">Defines option id where the value has to be added</param>
        /// <param name="optionValue">Defines option value that has to be added (optional)</param>
        /// <param name="sortOrder">Sort number in the list (optional, default to 0)</param>
        /// <param name="displayValue">Defines the value that will be displayed for the option value (optional)</param>
        /// <param name="isDefault">Defines as a default (optional)</param>
        /// <param name="clearCache">Is cache clear required (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductOptionValueAdd200Response</returns>
        System.Threading.Tasks.Task<ProductOptionValueAdd200Response> ProductOptionValueAddAsync(string productId, string optionId, string? optionValue = default(string?), int? sortOrder = default(int?), string? displayValue = default(string?), bool? isDefault = default(bool?), bool? clearCache = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// product.option.value.add
        /// </summary>
        /// <remarks>
        /// Add product option item from option.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the option value should be added</param>
        /// <param name="optionId">Defines option id where the value has to be added</param>
        /// <param name="optionValue">Defines option value that has to be added (optional)</param>
        /// <param name="sortOrder">Sort number in the list (optional, default to 0)</param>
        /// <param name="displayValue">Defines the value that will be displayed for the option value (optional)</param>
        /// <param name="isDefault">Defines as a default (optional)</param>
        /// <param name="clearCache">Is cache clear required (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductOptionValueAdd200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductOptionValueAdd200Response>> ProductOptionValueAddWithHttpInfoAsync(string productId, string optionId, string? optionValue = default(string?), int? sortOrder = default(int?), string? displayValue = default(string?), bool? isDefault = default(bool?), bool? clearCache = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// product.option.value.assign
        /// </summary>
        /// <remarks>
        /// Assign product option item from product.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productOptionId">Defines product&#39;s option id where the value has to be assigned</param>
        /// <param name="optionValueId">Defines value id that has to be assigned</param>
        /// <param name="clearCache">Is cache clear required (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductOptionValueAssign200Response</returns>
        System.Threading.Tasks.Task<ProductOptionValueAssign200Response> ProductOptionValueAssignAsync(int productOptionId, string optionValueId, bool? clearCache = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// product.option.value.assign
        /// </summary>
        /// <remarks>
        /// Assign product option item from product.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productOptionId">Defines product&#39;s option id where the value has to be assigned</param>
        /// <param name="optionValueId">Defines value id that has to be assigned</param>
        /// <param name="clearCache">Is cache clear required (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductOptionValueAssign200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductOptionValueAssign200Response>> ProductOptionValueAssignWithHttpInfoAsync(int productOptionId, string optionValueId, bool? clearCache = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// product.option.value.delete
        /// </summary>
        /// <remarks>
        /// Product option value delete.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionId">Defines option id where the value should be deleted</param>
        /// <param name="optionValueId">Defines option value id that should be deleted</param>
        /// <param name="productId">Defines product id where the option value should be deleted</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttributeDelete200Response</returns>
        System.Threading.Tasks.Task<AttributeDelete200Response> ProductOptionValueDeleteAsync(string optionId, string optionValueId, string productId, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// product.option.value.delete
        /// </summary>
        /// <remarks>
        /// Product option value delete.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionId">Defines option id where the value should be deleted</param>
        /// <param name="optionValueId">Defines option value id that should be deleted</param>
        /// <param name="productId">Defines product id where the option value should be deleted</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttributeDelete200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttributeDelete200Response>> ProductOptionValueDeleteWithHttpInfoAsync(string optionId, string optionValueId, string productId, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// product.option.value.update
        /// </summary>
        /// <remarks>
        /// Update product option item from option.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the option value should be updated</param>
        /// <param name="optionId">Defines option id where the value has to be updated</param>
        /// <param name="optionValueId">Defines value id that has to be assigned</param>
        /// <param name="optionValue">Defines option value that has to be added (optional)</param>
        /// <param name="price">Defines new product option price (optional)</param>
        /// <param name="quantity">Defines new products&#39; options quantity (optional)</param>
        /// <param name="displayValue">Defines the value that will be displayed for the option value (optional)</param>
        /// <param name="clearCache">Is cache clear required (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountConfigUpdate200Response</returns>
        System.Threading.Tasks.Task<AccountConfigUpdate200Response> ProductOptionValueUpdateAsync(string productId, string optionId, string optionValueId, string? optionValue = default(string?), decimal? price = default(decimal?), decimal? quantity = default(decimal?), string? displayValue = default(string?), bool? clearCache = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// product.option.value.update
        /// </summary>
        /// <remarks>
        /// Update product option item from option.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the option value should be updated</param>
        /// <param name="optionId">Defines option id where the value has to be updated</param>
        /// <param name="optionValueId">Defines value id that has to be assigned</param>
        /// <param name="optionValue">Defines option value that has to be added (optional)</param>
        /// <param name="price">Defines new product option price (optional)</param>
        /// <param name="quantity">Defines new products&#39; options quantity (optional)</param>
        /// <param name="displayValue">Defines the value that will be displayed for the option value (optional)</param>
        /// <param name="clearCache">Is cache clear required (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountConfigUpdate200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountConfigUpdate200Response>> ProductOptionValueUpdateWithHttpInfoAsync(string productId, string optionId, string optionValueId, string? optionValue = default(string?), decimal? price = default(decimal?), decimal? quantity = default(decimal?), string? displayValue = default(string?), bool? clearCache = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// product.price.add
        /// </summary>
        /// <remarks>
        /// Add some prices to the product.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productPriceAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CartValidate200Response</returns>
        System.Threading.Tasks.Task<CartValidate200Response> ProductPriceAddAsync(ProductPriceAdd productPriceAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// product.price.add
        /// </summary>
        /// <remarks>
        /// Add some prices to the product.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productPriceAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CartValidate200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CartValidate200Response>> ProductPriceAddWithHttpInfoAsync(ProductPriceAdd productPriceAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// product.price.delete
        /// </summary>
        /// <remarks>
        /// Delete some prices of the product
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines the product where the price has to be deleted</param>
        /// <param name="groupPrices">Defines product&#39;s group prices (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttributeDelete200Response</returns>
        System.Threading.Tasks.Task<AttributeDelete200Response> ProductPriceDeleteAsync(string productId, string? groupPrices = default(string?), string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// product.price.delete
        /// </summary>
        /// <remarks>
        /// Delete some prices of the product
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines the product where the price has to be deleted</param>
        /// <param name="groupPrices">Defines product&#39;s group prices (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttributeDelete200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttributeDelete200Response>> ProductPriceDeleteWithHttpInfoAsync(string productId, string? groupPrices = default(string?), string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// product.price.update
        /// </summary>
        /// <remarks>
        /// Update some prices of the product.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productPriceUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountConfigUpdate200Response</returns>
        System.Threading.Tasks.Task<AccountConfigUpdate200Response> ProductPriceUpdateAsync(ProductPriceUpdate productPriceUpdate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// product.price.update
        /// </summary>
        /// <remarks>
        /// Update some prices of the product.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productPriceUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountConfigUpdate200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountConfigUpdate200Response>> ProductPriceUpdateWithHttpInfoAsync(ProductPriceUpdate productPriceUpdate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// product.review.list
        /// </summary>
        /// <remarks>
        /// Get reviews of a specific product.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product id</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="ids">Retrieves reviews specified by ids (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="status">Defines status (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,customer_id,email,message,status,product_id,nick_name,summary,rating,ratings,status,created_time&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelResponseProductReviewList</returns>
        System.Threading.Tasks.Task<ModelResponseProductReviewList> ProductReviewListAsync(string productId, int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? ids = default(string?), string? storeId = default(string?), string? status = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// product.review.list
        /// </summary>
        /// <remarks>
        /// Get reviews of a specific product.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product id</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="ids">Retrieves reviews specified by ids (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="status">Defines status (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,customer_id,email,message,status,product_id,nick_name,summary,rating,ratings,status,created_time&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelResponseProductReviewList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelResponseProductReviewList>> ProductReviewListWithHttpInfoAsync(string productId, int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? ids = default(string?), string? storeId = default(string?), string? status = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// product.store.assign
        /// </summary>
        /// <remarks>
        /// Assign product to store
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines id of the product which should be assigned to a store</param>
        /// <param name="storeId">Defines id of the store product should be assigned to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountConfigUpdate200Response</returns>
        System.Threading.Tasks.Task<AccountConfigUpdate200Response> ProductStoreAssignAsync(string productId, string storeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// product.store.assign
        /// </summary>
        /// <remarks>
        /// Assign product to store
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines id of the product which should be assigned to a store</param>
        /// <param name="storeId">Defines id of the store product should be assigned to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountConfigUpdate200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountConfigUpdate200Response>> ProductStoreAssignWithHttpInfoAsync(string productId, string storeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// product.tax.add
        /// </summary>
        /// <remarks>
        /// Add tax class and tax rate to store and assign to product.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productTaxAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductTaxAdd200Response</returns>
        System.Threading.Tasks.Task<ProductTaxAdd200Response> ProductTaxAddAsync(ProductTaxAdd productTaxAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// product.tax.add
        /// </summary>
        /// <remarks>
        /// Add tax class and tax rate to store and assign to product.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productTaxAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductTaxAdd200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductTaxAdd200Response>> ProductTaxAddWithHttpInfoAsync(ProductTaxAdd productTaxAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// product.update
        /// </summary>
        /// <remarks>
        /// This method can be used to update certain product data. The list of supported parameters depends on the specific platform. Please transmit only those parameters that are supported by the particular platform. Please note that to update the product quantity, it is recommended to use relative parameters (increase_quantity or reduce_quantity) to avoid unexpected overwrites on heavily loaded stores.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountConfigUpdate200Response</returns>
        System.Threading.Tasks.Task<AccountConfigUpdate200Response> ProductUpdateAsync(ProductUpdate productUpdate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// product.update
        /// </summary>
        /// <remarks>
        /// This method can be used to update certain product data. The list of supported parameters depends on the specific platform. Please transmit only those parameters that are supported by the particular platform. Please note that to update the product quantity, it is recommended to use relative parameters (increase_quantity or reduce_quantity) to avoid unexpected overwrites on heavily loaded stores.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountConfigUpdate200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountConfigUpdate200Response>> ProductUpdateWithHttpInfoAsync(ProductUpdate productUpdate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// product.update.batch
        /// </summary>
        /// <remarks>
        /// Update products on the store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productUpdateBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryAddBatch200Response</returns>
        System.Threading.Tasks.Task<CategoryAddBatch200Response> ProductUpdateBatchAsync(ProductUpdateBatch productUpdateBatch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// product.update.batch
        /// </summary>
        /// <remarks>
        /// Update products on the store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productUpdateBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryAddBatch200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CategoryAddBatch200Response>> ProductUpdateBatchWithHttpInfoAsync(ProductUpdateBatch productUpdateBatch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// product.variant.add
        /// </summary>
        /// <remarks>
        /// Add variant to product.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductVariantAdd200Response</returns>
        System.Threading.Tasks.Task<ProductVariantAdd200Response> ProductVariantAddAsync(ProductVariantAdd productVariantAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// product.variant.add
        /// </summary>
        /// <remarks>
        /// Add variant to product.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductVariantAdd200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductVariantAdd200Response>> ProductVariantAddWithHttpInfoAsync(ProductVariantAdd productVariantAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// product.variant.add.batch
        /// </summary>
        /// <remarks>
        /// Add new product variants to the store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantAddBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryAddBatch200Response</returns>
        System.Threading.Tasks.Task<CategoryAddBatch200Response> ProductVariantAddBatchAsync(ProductVariantAddBatch productVariantAddBatch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// product.variant.add.batch
        /// </summary>
        /// <remarks>
        /// Add new product variants to the store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantAddBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryAddBatch200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CategoryAddBatch200Response>> ProductVariantAddBatchWithHttpInfoAsync(ProductVariantAddBatch productVariantAddBatch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// product.variant.delete
        /// </summary>
        /// <remarks>
        /// Delete variant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Defines variant removal, specified by variant id</param>
        /// <param name="productId">Defines product&#39;s id where the variant has to be deleted</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttributeValueDelete200Response</returns>
        System.Threading.Tasks.Task<AttributeValueDelete200Response> ProductVariantDeleteAsync(string id, string productId, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// product.variant.delete
        /// </summary>
        /// <remarks>
        /// Delete variant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Defines variant removal, specified by variant id</param>
        /// <param name="productId">Defines product&#39;s id where the variant has to be deleted</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttributeValueDelete200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttributeValueDelete200Response>> ProductVariantDeleteWithHttpInfoAsync(string id, string productId, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// product.variant.delete.batch
        /// </summary>
        /// <remarks>
        /// Remove product variants from the store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantDeleteBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryAddBatch200Response</returns>
        System.Threading.Tasks.Task<CategoryAddBatch200Response> ProductVariantDeleteBatchAsync(ProductVariantDeleteBatch productVariantDeleteBatch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// product.variant.delete.batch
        /// </summary>
        /// <remarks>
        /// Remove product variants from the store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantDeleteBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryAddBatch200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CategoryAddBatch200Response>> ProductVariantDeleteBatchWithHttpInfoAsync(ProductVariantDeleteBatch productVariantDeleteBatch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// product.variant.image.add
        /// </summary>
        /// <remarks>
        /// Add image to product
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantImageAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductVariantImageAdd200Response</returns>
        System.Threading.Tasks.Task<ProductVariantImageAdd200Response> ProductVariantImageAddAsync(ProductVariantImageAdd productVariantImageAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// product.variant.image.add
        /// </summary>
        /// <remarks>
        /// Add image to product
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantImageAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductVariantImageAdd200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductVariantImageAdd200Response>> ProductVariantImageAddWithHttpInfoAsync(ProductVariantImageAdd productVariantImageAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// product.variant.image.delete
        /// </summary>
        /// <remarks>
        /// Delete  image to product
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the variant image should be deleted</param>
        /// <param name="productVariantId">Defines product&#39;s variants specified by variant id</param>
        /// <param name="id">Entity id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttributeDelete200Response</returns>
        System.Threading.Tasks.Task<AttributeDelete200Response> ProductVariantImageDeleteAsync(string productId, string productVariantId, string id, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// product.variant.image.delete
        /// </summary>
        /// <remarks>
        /// Delete  image to product
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the variant image should be deleted</param>
        /// <param name="productVariantId">Defines product&#39;s variants specified by variant id</param>
        /// <param name="id">Entity id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttributeDelete200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttributeDelete200Response>> ProductVariantImageDeleteWithHttpInfoAsync(string productId, string productVariantId, string id, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// product.variant.price.add
        /// </summary>
        /// <remarks>
        /// Add some prices to the product variant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantPriceAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CartValidate200Response</returns>
        System.Threading.Tasks.Task<CartValidate200Response> ProductVariantPriceAddAsync(ProductVariantPriceAdd productVariantPriceAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// product.variant.price.add
        /// </summary>
        /// <remarks>
        /// Add some prices to the product variant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantPriceAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CartValidate200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CartValidate200Response>> ProductVariantPriceAddWithHttpInfoAsync(ProductVariantPriceAdd productVariantPriceAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// product.variant.price.delete
        /// </summary>
        /// <remarks>
        /// Delete some prices of the product variant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Defines the variant where the price has to be deleted</param>
        /// <param name="productId">Product id</param>
        /// <param name="groupPrices">Defines variants&#39;s group prices</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttributeDelete200Response</returns>
        System.Threading.Tasks.Task<AttributeDelete200Response> ProductVariantPriceDeleteAsync(string id, string productId, string groupPrices, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// product.variant.price.delete
        /// </summary>
        /// <remarks>
        /// Delete some prices of the product variant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Defines the variant where the price has to be deleted</param>
        /// <param name="productId">Product id</param>
        /// <param name="groupPrices">Defines variants&#39;s group prices</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttributeDelete200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttributeDelete200Response>> ProductVariantPriceDeleteWithHttpInfoAsync(string id, string productId, string groupPrices, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// product.variant.price.update
        /// </summary>
        /// <remarks>
        /// Update some prices of the product variant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantPriceUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountConfigUpdate200Response</returns>
        System.Threading.Tasks.Task<AccountConfigUpdate200Response> ProductVariantPriceUpdateAsync(ProductVariantPriceUpdate productVariantPriceUpdate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// product.variant.price.update
        /// </summary>
        /// <remarks>
        /// Update some prices of the product variant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantPriceUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountConfigUpdate200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountConfigUpdate200Response>> ProductVariantPriceUpdateWithHttpInfoAsync(ProductVariantPriceUpdate productVariantPriceUpdate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// product.variant.update
        /// </summary>
        /// <remarks>
        /// Update variant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountConfigUpdate200Response</returns>
        System.Threading.Tasks.Task<AccountConfigUpdate200Response> ProductVariantUpdateAsync(ProductVariantUpdate productVariantUpdate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// product.variant.update
        /// </summary>
        /// <remarks>
        /// Update variant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountConfigUpdate200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountConfigUpdate200Response>> ProductVariantUpdateWithHttpInfoAsync(ProductVariantUpdate productVariantUpdate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// product.variant.update.batch
        /// </summary>
        /// <remarks>
        /// Update products variants on the store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantUpdateBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryAddBatch200Response</returns>
        System.Threading.Tasks.Task<CategoryAddBatch200Response> ProductVariantUpdateBatchAsync(ProductVariantUpdateBatch productVariantUpdateBatch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// product.variant.update.batch
        /// </summary>
        /// <remarks>
        /// Update products variants on the store.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantUpdateBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryAddBatch200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CategoryAddBatch200Response>> ProductVariantUpdateBatchWithHttpInfoAsync(ProductVariantUpdateBatch productVariantUpdateBatch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductApi : IProductApiSync, IProductApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProductApi : IProductApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProductApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProductApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProductApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ProductApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// product.add Add new product to store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductAdd200Response</returns>
        public ProductAdd200Response ProductAdd(ProductAdd productAdd, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ProductAdd200Response> localVarResponse = ProductAddWithHttpInfo(productAdd);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.add Add new product to store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductAdd200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ProductAdd200Response> ProductAddWithHttpInfo(ProductAdd productAdd, int operationIndex = 0)
        {
            // verify the required parameter 'productAdd' is set
            if (productAdd == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productAdd' when calling ProductApi->ProductAdd");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productAdd;

            localVarRequestOptions.Operation = "ProductApi.ProductAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductAdd200Response>("/product.add.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.add Add new product to store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductAdd200Response</returns>
        public async System.Threading.Tasks.Task<ProductAdd200Response> ProductAddAsync(ProductAdd productAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ProductAdd200Response> localVarResponse = await ProductAddWithHttpInfoAsync(productAdd, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.add Add new product to store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductAdd200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ProductAdd200Response>> ProductAddWithHttpInfoAsync(ProductAdd productAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'productAdd' is set
            if (productAdd == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productAdd' when calling ProductApi->ProductAdd");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productAdd;

            localVarRequestOptions.Operation = "ProductApi.ProductAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductAdd200Response>("/product.add.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.add.batch Add new products to the store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productAddBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoryAddBatch200Response</returns>
        public CategoryAddBatch200Response ProductAddBatch(ProductAddBatch productAddBatch, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CategoryAddBatch200Response> localVarResponse = ProductAddBatchWithHttpInfo(productAddBatch);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.add.batch Add new products to the store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productAddBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoryAddBatch200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<CategoryAddBatch200Response> ProductAddBatchWithHttpInfo(ProductAddBatch productAddBatch, int operationIndex = 0)
        {
            // verify the required parameter 'productAddBatch' is set
            if (productAddBatch == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productAddBatch' when calling ProductApi->ProductAddBatch");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productAddBatch;

            localVarRequestOptions.Operation = "ProductApi.ProductAddBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CategoryAddBatch200Response>("/product.add.batch.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductAddBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.add.batch Add new products to the store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productAddBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryAddBatch200Response</returns>
        public async System.Threading.Tasks.Task<CategoryAddBatch200Response> ProductAddBatchAsync(ProductAddBatch productAddBatch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CategoryAddBatch200Response> localVarResponse = await ProductAddBatchWithHttpInfoAsync(productAddBatch, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.add.batch Add new products to the store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productAddBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryAddBatch200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CategoryAddBatch200Response>> ProductAddBatchWithHttpInfoAsync(ProductAddBatch productAddBatch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'productAddBatch' is set
            if (productAddBatch == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productAddBatch' when calling ProductApi->ProductAddBatch");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productAddBatch;

            localVarRequestOptions.Operation = "ProductApi.ProductAddBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CategoryAddBatch200Response>("/product.add.batch.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductAddBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.attribute.list Get list of attributes and values.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Retrieves attributes specified by product id</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="attributeId">Retrieves info for specified attribute_id (optional)</param>
        /// <param name="variantId">Defines product&#39;s variants specified by variant id (optional)</param>
        /// <param name="attributeGroupId">Filter by attribute_group_id (optional)</param>
        /// <param name="langId">Retrieves attributes specified by language id (optional)</param>
        /// <param name="storeId">Retrieves attributes specified by store id (optional)</param>
        /// <param name="setName">Retrieves attributes specified by set_name in Magento (optional)</param>
        /// <param name="sortBy">Set field to sort by (optional, default to &quot;attribute_id&quot;)</param>
        /// <param name="sortDirection">Set sorting direction (optional, default to &quot;asc&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;attribute_id,name&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelResponseProductAttributeList</returns>
        public ModelResponseProductAttributeList ProductAttributeList(string productId, int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? attributeId = default(string?), string? variantId = default(string?), string? attributeGroupId = default(string?), string? langId = default(string?), string? storeId = default(string?), string? setName = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModelResponseProductAttributeList> localVarResponse = ProductAttributeListWithHttpInfo(productId, start, count, pageCursor, attributeId, variantId, attributeGroupId, langId, storeId, setName, sortBy, sortDirection, responseFields, varParams, exclude);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.attribute.list Get list of attributes and values.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Retrieves attributes specified by product id</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="attributeId">Retrieves info for specified attribute_id (optional)</param>
        /// <param name="variantId">Defines product&#39;s variants specified by variant id (optional)</param>
        /// <param name="attributeGroupId">Filter by attribute_group_id (optional)</param>
        /// <param name="langId">Retrieves attributes specified by language id (optional)</param>
        /// <param name="storeId">Retrieves attributes specified by store id (optional)</param>
        /// <param name="setName">Retrieves attributes specified by set_name in Magento (optional)</param>
        /// <param name="sortBy">Set field to sort by (optional, default to &quot;attribute_id&quot;)</param>
        /// <param name="sortDirection">Set sorting direction (optional, default to &quot;asc&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;attribute_id,name&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelResponseProductAttributeList</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModelResponseProductAttributeList> ProductAttributeListWithHttpInfo(string productId, int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? attributeId = default(string?), string? variantId = default(string?), string? attributeGroupId = default(string?), string? langId = default(string?), string? storeId = default(string?), string? setName = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->ProductAttributeList");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (pageCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_cursor", pageCursor));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_id", productId));
            if (attributeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "attribute_id", attributeId));
            }
            if (variantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "variant_id", variantId));
            }
            if (attributeGroupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "attribute_group_id", attributeGroupId));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (setName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "set_name", setName));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sort_direction", sortDirection));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductAttributeList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ModelResponseProductAttributeList>("/product.attribute.list.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductAttributeList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.attribute.list Get list of attributes and values.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Retrieves attributes specified by product id</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="attributeId">Retrieves info for specified attribute_id (optional)</param>
        /// <param name="variantId">Defines product&#39;s variants specified by variant id (optional)</param>
        /// <param name="attributeGroupId">Filter by attribute_group_id (optional)</param>
        /// <param name="langId">Retrieves attributes specified by language id (optional)</param>
        /// <param name="storeId">Retrieves attributes specified by store id (optional)</param>
        /// <param name="setName">Retrieves attributes specified by set_name in Magento (optional)</param>
        /// <param name="sortBy">Set field to sort by (optional, default to &quot;attribute_id&quot;)</param>
        /// <param name="sortDirection">Set sorting direction (optional, default to &quot;asc&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;attribute_id,name&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelResponseProductAttributeList</returns>
        public async System.Threading.Tasks.Task<ModelResponseProductAttributeList> ProductAttributeListAsync(string productId, int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? attributeId = default(string?), string? variantId = default(string?), string? attributeGroupId = default(string?), string? langId = default(string?), string? storeId = default(string?), string? setName = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModelResponseProductAttributeList> localVarResponse = await ProductAttributeListWithHttpInfoAsync(productId, start, count, pageCursor, attributeId, variantId, attributeGroupId, langId, storeId, setName, sortBy, sortDirection, responseFields, varParams, exclude, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.attribute.list Get list of attributes and values.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Retrieves attributes specified by product id</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="attributeId">Retrieves info for specified attribute_id (optional)</param>
        /// <param name="variantId">Defines product&#39;s variants specified by variant id (optional)</param>
        /// <param name="attributeGroupId">Filter by attribute_group_id (optional)</param>
        /// <param name="langId">Retrieves attributes specified by language id (optional)</param>
        /// <param name="storeId">Retrieves attributes specified by store id (optional)</param>
        /// <param name="setName">Retrieves attributes specified by set_name in Magento (optional)</param>
        /// <param name="sortBy">Set field to sort by (optional, default to &quot;attribute_id&quot;)</param>
        /// <param name="sortDirection">Set sorting direction (optional, default to &quot;asc&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;attribute_id,name&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelResponseProductAttributeList)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModelResponseProductAttributeList>> ProductAttributeListWithHttpInfoAsync(string productId, int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? attributeId = default(string?), string? variantId = default(string?), string? attributeGroupId = default(string?), string? langId = default(string?), string? storeId = default(string?), string? setName = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->ProductAttributeList");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (pageCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_cursor", pageCursor));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_id", productId));
            if (attributeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "attribute_id", attributeId));
            }
            if (variantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "variant_id", variantId));
            }
            if (attributeGroupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "attribute_group_id", attributeGroupId));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (setName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "set_name", setName));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sort_direction", sortDirection));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductAttributeList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ModelResponseProductAttributeList>("/product.attribute.list.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductAttributeList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.attribute.value.set Set attribute value to product.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the attribute should be added</param>
        /// <param name="attributeId">Filter by attribute_id (optional)</param>
        /// <param name="attributeGroupId">Filter by attribute_group_id (optional)</param>
        /// <param name="attributeName">Define attribute name (optional)</param>
        /// <param name="value">Define attribute value (optional)</param>
        /// <param name="valueId">Define attribute value id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductAttributeValueSet200Response</returns>
        public ProductAttributeValueSet200Response ProductAttributeValueSet(string productId, string? attributeId = default(string?), string? attributeGroupId = default(string?), string? attributeName = default(string?), string? value = default(string?), int? valueId = default(int?), string? langId = default(string?), string? storeId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ProductAttributeValueSet200Response> localVarResponse = ProductAttributeValueSetWithHttpInfo(productId, attributeId, attributeGroupId, attributeName, value, valueId, langId, storeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.attribute.value.set Set attribute value to product.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the attribute should be added</param>
        /// <param name="attributeId">Filter by attribute_id (optional)</param>
        /// <param name="attributeGroupId">Filter by attribute_group_id (optional)</param>
        /// <param name="attributeName">Define attribute name (optional)</param>
        /// <param name="value">Define attribute value (optional)</param>
        /// <param name="valueId">Define attribute value id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductAttributeValueSet200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ProductAttributeValueSet200Response> ProductAttributeValueSetWithHttpInfo(string productId, string? attributeId = default(string?), string? attributeGroupId = default(string?), string? attributeName = default(string?), string? value = default(string?), int? valueId = default(int?), string? langId = default(string?), string? storeId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->ProductAttributeValueSet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_id", productId));
            if (attributeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "attribute_id", attributeId));
            }
            if (attributeGroupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "attribute_group_id", attributeGroupId));
            }
            if (attributeName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "attribute_name", attributeName));
            }
            if (value != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "value", value));
            }
            if (valueId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "value_id", valueId));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductAttributeValueSet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductAttributeValueSet200Response>("/product.attribute.value.set.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductAttributeValueSet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.attribute.value.set Set attribute value to product.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the attribute should be added</param>
        /// <param name="attributeId">Filter by attribute_id (optional)</param>
        /// <param name="attributeGroupId">Filter by attribute_group_id (optional)</param>
        /// <param name="attributeName">Define attribute name (optional)</param>
        /// <param name="value">Define attribute value (optional)</param>
        /// <param name="valueId">Define attribute value id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductAttributeValueSet200Response</returns>
        public async System.Threading.Tasks.Task<ProductAttributeValueSet200Response> ProductAttributeValueSetAsync(string productId, string? attributeId = default(string?), string? attributeGroupId = default(string?), string? attributeName = default(string?), string? value = default(string?), int? valueId = default(int?), string? langId = default(string?), string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ProductAttributeValueSet200Response> localVarResponse = await ProductAttributeValueSetWithHttpInfoAsync(productId, attributeId, attributeGroupId, attributeName, value, valueId, langId, storeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.attribute.value.set Set attribute value to product.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the attribute should be added</param>
        /// <param name="attributeId">Filter by attribute_id (optional)</param>
        /// <param name="attributeGroupId">Filter by attribute_group_id (optional)</param>
        /// <param name="attributeName">Define attribute name (optional)</param>
        /// <param name="value">Define attribute value (optional)</param>
        /// <param name="valueId">Define attribute value id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductAttributeValueSet200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ProductAttributeValueSet200Response>> ProductAttributeValueSetWithHttpInfoAsync(string productId, string? attributeId = default(string?), string? attributeGroupId = default(string?), string? attributeName = default(string?), string? value = default(string?), int? valueId = default(int?), string? langId = default(string?), string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->ProductAttributeValueSet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_id", productId));
            if (attributeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "attribute_id", attributeId));
            }
            if (attributeGroupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "attribute_group_id", attributeGroupId));
            }
            if (attributeName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "attribute_name", attributeName));
            }
            if (value != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "value", value));
            }
            if (valueId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "value_id", valueId));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductAttributeValueSet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductAttributeValueSet200Response>("/product.attribute.value.set.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductAttributeValueSet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.attribute.value.unset Removes attribute value for a product.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product id</param>
        /// <param name="attributeId">Attribute Id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="includeDefault">Boolean, whether or not to unset default value of the attribute, if applicable (optional, default to false)</param>
        /// <param name="reindex">Is reindex required (optional, default to true)</param>
        /// <param name="clearCache">Is cache clear required (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductAttributeValueUnset200Response</returns>
        public ProductAttributeValueUnset200Response ProductAttributeValueUnset(string productId, string attributeId, string? storeId = default(string?), bool? includeDefault = default(bool?), bool? reindex = default(bool?), bool? clearCache = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ProductAttributeValueUnset200Response> localVarResponse = ProductAttributeValueUnsetWithHttpInfo(productId, attributeId, storeId, includeDefault, reindex, clearCache);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.attribute.value.unset Removes attribute value for a product.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product id</param>
        /// <param name="attributeId">Attribute Id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="includeDefault">Boolean, whether or not to unset default value of the attribute, if applicable (optional, default to false)</param>
        /// <param name="reindex">Is reindex required (optional, default to true)</param>
        /// <param name="clearCache">Is cache clear required (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductAttributeValueUnset200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ProductAttributeValueUnset200Response> ProductAttributeValueUnsetWithHttpInfo(string productId, string attributeId, string? storeId = default(string?), bool? includeDefault = default(bool?), bool? reindex = default(bool?), bool? clearCache = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->ProductAttributeValueUnset");
            }

            // verify the required parameter 'attributeId' is set
            if (attributeId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'attributeId' when calling ProductApi->ProductAttributeValueUnset");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_id", productId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "attribute_id", attributeId));
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (includeDefault != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "include_default", includeDefault));
            }
            if (reindex != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "reindex", reindex));
            }
            if (clearCache != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "clear_cache", clearCache));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductAttributeValueUnset";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductAttributeValueUnset200Response>("/product.attribute.value.unset.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductAttributeValueUnset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.attribute.value.unset Removes attribute value for a product.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product id</param>
        /// <param name="attributeId">Attribute Id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="includeDefault">Boolean, whether or not to unset default value of the attribute, if applicable (optional, default to false)</param>
        /// <param name="reindex">Is reindex required (optional, default to true)</param>
        /// <param name="clearCache">Is cache clear required (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductAttributeValueUnset200Response</returns>
        public async System.Threading.Tasks.Task<ProductAttributeValueUnset200Response> ProductAttributeValueUnsetAsync(string productId, string attributeId, string? storeId = default(string?), bool? includeDefault = default(bool?), bool? reindex = default(bool?), bool? clearCache = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ProductAttributeValueUnset200Response> localVarResponse = await ProductAttributeValueUnsetWithHttpInfoAsync(productId, attributeId, storeId, includeDefault, reindex, clearCache, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.attribute.value.unset Removes attribute value for a product.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product id</param>
        /// <param name="attributeId">Attribute Id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="includeDefault">Boolean, whether or not to unset default value of the attribute, if applicable (optional, default to false)</param>
        /// <param name="reindex">Is reindex required (optional, default to true)</param>
        /// <param name="clearCache">Is cache clear required (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductAttributeValueUnset200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ProductAttributeValueUnset200Response>> ProductAttributeValueUnsetWithHttpInfoAsync(string productId, string attributeId, string? storeId = default(string?), bool? includeDefault = default(bool?), bool? reindex = default(bool?), bool? clearCache = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->ProductAttributeValueUnset");
            }

            // verify the required parameter 'attributeId' is set
            if (attributeId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'attributeId' when calling ProductApi->ProductAttributeValueUnset");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_id", productId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "attribute_id", attributeId));
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (includeDefault != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "include_default", includeDefault));
            }
            if (reindex != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "reindex", reindex));
            }
            if (clearCache != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "clear_cache", clearCache));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductAttributeValueUnset";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductAttributeValueUnset200Response>("/product.attribute.value.unset.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductAttributeValueUnset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.brand.list Get list of brands from your store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="brandIds">Retrieves brands specified by brand ids (optional)</param>
        /// <param name="categoryId">Retrieves product brands specified by category id (optional)</param>
        /// <param name="parentId">Retrieves brands specified by parent id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="findWhere">Entity search that is specified by the comma-separated unique fields (optional)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name,short_description,active,url&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelResponseProductBrandList</returns>
        public ModelResponseProductBrandList ProductBrandList(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? brandIds = default(string?), string? categoryId = default(string?), string? parentId = default(string?), string? storeId = default(string?), string? langId = default(string?), string? findWhere = default(string?), string? findValue = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModelResponseProductBrandList> localVarResponse = ProductBrandListWithHttpInfo(start, count, pageCursor, brandIds, categoryId, parentId, storeId, langId, findWhere, findValue, createdFrom, createdTo, modifiedFrom, modifiedTo, responseFields, varParams, exclude);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.brand.list Get list of brands from your store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="brandIds">Retrieves brands specified by brand ids (optional)</param>
        /// <param name="categoryId">Retrieves product brands specified by category id (optional)</param>
        /// <param name="parentId">Retrieves brands specified by parent id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="findWhere">Entity search that is specified by the comma-separated unique fields (optional)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name,short_description,active,url&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelResponseProductBrandList</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModelResponseProductBrandList> ProductBrandListWithHttpInfo(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? brandIds = default(string?), string? categoryId = default(string?), string? parentId = default(string?), string? storeId = default(string?), string? langId = default(string?), string? findWhere = default(string?), string? findValue = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (pageCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_cursor", pageCursor));
            }
            if (brandIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "brand_ids", brandIds));
            }
            if (categoryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "category_id", categoryId));
            }
            if (parentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "parent_id", parentId));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }
            if (findWhere != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_where", findWhere));
            }
            if (findValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_value", findValue));
            }
            if (createdFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_from", createdFrom));
            }
            if (createdTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_to", createdTo));
            }
            if (modifiedFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_from", modifiedFrom));
            }
            if (modifiedTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_to", modifiedTo));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductBrandList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ModelResponseProductBrandList>("/product.brand.list.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductBrandList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.brand.list Get list of brands from your store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="brandIds">Retrieves brands specified by brand ids (optional)</param>
        /// <param name="categoryId">Retrieves product brands specified by category id (optional)</param>
        /// <param name="parentId">Retrieves brands specified by parent id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="findWhere">Entity search that is specified by the comma-separated unique fields (optional)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name,short_description,active,url&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelResponseProductBrandList</returns>
        public async System.Threading.Tasks.Task<ModelResponseProductBrandList> ProductBrandListAsync(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? brandIds = default(string?), string? categoryId = default(string?), string? parentId = default(string?), string? storeId = default(string?), string? langId = default(string?), string? findWhere = default(string?), string? findValue = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModelResponseProductBrandList> localVarResponse = await ProductBrandListWithHttpInfoAsync(start, count, pageCursor, brandIds, categoryId, parentId, storeId, langId, findWhere, findValue, createdFrom, createdTo, modifiedFrom, modifiedTo, responseFields, varParams, exclude, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.brand.list Get list of brands from your store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="brandIds">Retrieves brands specified by brand ids (optional)</param>
        /// <param name="categoryId">Retrieves product brands specified by category id (optional)</param>
        /// <param name="parentId">Retrieves brands specified by parent id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="findWhere">Entity search that is specified by the comma-separated unique fields (optional)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name,short_description,active,url&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelResponseProductBrandList)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModelResponseProductBrandList>> ProductBrandListWithHttpInfoAsync(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? brandIds = default(string?), string? categoryId = default(string?), string? parentId = default(string?), string? storeId = default(string?), string? langId = default(string?), string? findWhere = default(string?), string? findValue = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (pageCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_cursor", pageCursor));
            }
            if (brandIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "brand_ids", brandIds));
            }
            if (categoryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "category_id", categoryId));
            }
            if (parentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "parent_id", parentId));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }
            if (findWhere != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_where", findWhere));
            }
            if (findValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_value", findValue));
            }
            if (createdFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_from", createdFrom));
            }
            if (createdTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_to", createdTo));
            }
            if (modifiedFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_from", modifiedFrom));
            }
            if (modifiedTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_to", modifiedTo));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductBrandList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ModelResponseProductBrandList>("/product.brand.list.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductBrandList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.child_item.find Search product child item (bundled item or configurable product variant) in store catalog.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Entity search that is specified by the comma-separated unique fields (optional)</param>
        /// <param name="findParams">Entity search that is specified by comma-separated parameters (optional, default to &quot;whole_words&quot;)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductChildItemFind200Response</returns>
        public ProductChildItemFind200Response ProductChildItemFind(string? findValue = default(string?), string? findWhere = default(string?), string? findParams = default(string?), string? storeId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ProductChildItemFind200Response> localVarResponse = ProductChildItemFindWithHttpInfo(findValue, findWhere, findParams, storeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.child_item.find Search product child item (bundled item or configurable product variant) in store catalog.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Entity search that is specified by the comma-separated unique fields (optional)</param>
        /// <param name="findParams">Entity search that is specified by comma-separated parameters (optional, default to &quot;whole_words&quot;)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductChildItemFind200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ProductChildItemFind200Response> ProductChildItemFindWithHttpInfo(string? findValue = default(string?), string? findWhere = default(string?), string? findParams = default(string?), string? storeId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (findValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_value", findValue));
            }
            if (findWhere != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_where", findWhere));
            }
            if (findParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_params", findParams));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductChildItemFind";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ProductChildItemFind200Response>("/product.child_item.find.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductChildItemFind", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.child_item.find Search product child item (bundled item or configurable product variant) in store catalog.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Entity search that is specified by the comma-separated unique fields (optional)</param>
        /// <param name="findParams">Entity search that is specified by comma-separated parameters (optional, default to &quot;whole_words&quot;)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductChildItemFind200Response</returns>
        public async System.Threading.Tasks.Task<ProductChildItemFind200Response> ProductChildItemFindAsync(string? findValue = default(string?), string? findWhere = default(string?), string? findParams = default(string?), string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ProductChildItemFind200Response> localVarResponse = await ProductChildItemFindWithHttpInfoAsync(findValue, findWhere, findParams, storeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.child_item.find Search product child item (bundled item or configurable product variant) in store catalog.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Entity search that is specified by the comma-separated unique fields (optional)</param>
        /// <param name="findParams">Entity search that is specified by comma-separated parameters (optional, default to &quot;whole_words&quot;)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductChildItemFind200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ProductChildItemFind200Response>> ProductChildItemFindWithHttpInfoAsync(string? findValue = default(string?), string? findWhere = default(string?), string? findParams = default(string?), string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (findValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_value", findValue));
            }
            if (findWhere != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_where", findWhere));
            }
            if (findParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_params", findParams));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductChildItemFind";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ProductChildItemFind200Response>("/product.child_item.find.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductChildItemFind", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.child_item.info Get child for specific product.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Filter by parent product id</param>
        /// <param name="id">Entity id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="currencyId">Currency Id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductChildItemInfo200Response</returns>
        public ProductChildItemInfo200Response ProductChildItemInfo(string productId, string id, string? storeId = default(string?), string? langId = default(string?), string? currencyId = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), bool? useLatestApiVersion = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ProductChildItemInfo200Response> localVarResponse = ProductChildItemInfoWithHttpInfo(productId, id, storeId, langId, currencyId, responseFields, varParams, exclude, useLatestApiVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.child_item.info Get child for specific product.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Filter by parent product id</param>
        /// <param name="id">Entity id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="currencyId">Currency Id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductChildItemInfo200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ProductChildItemInfo200Response> ProductChildItemInfoWithHttpInfo(string productId, string id, string? storeId = default(string?), string? langId = default(string?), string? currencyId = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), bool? useLatestApiVersion = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->ProductChildItemInfo");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling ProductApi->ProductChildItemInfo");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_id", productId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }
            if (currencyId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "currency_id", currencyId));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }
            if (useLatestApiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "use_latest_api_version", useLatestApiVersion));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductChildItemInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ProductChildItemInfo200Response>("/product.child_item.info.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductChildItemInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.child_item.info Get child for specific product.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Filter by parent product id</param>
        /// <param name="id">Entity id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="currencyId">Currency Id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductChildItemInfo200Response</returns>
        public async System.Threading.Tasks.Task<ProductChildItemInfo200Response> ProductChildItemInfoAsync(string productId, string id, string? storeId = default(string?), string? langId = default(string?), string? currencyId = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), bool? useLatestApiVersion = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ProductChildItemInfo200Response> localVarResponse = await ProductChildItemInfoWithHttpInfoAsync(productId, id, storeId, langId, currencyId, responseFields, varParams, exclude, useLatestApiVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.child_item.info Get child for specific product.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Filter by parent product id</param>
        /// <param name="id">Entity id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="currencyId">Currency Id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductChildItemInfo200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ProductChildItemInfo200Response>> ProductChildItemInfoWithHttpInfoAsync(string productId, string id, string? storeId = default(string?), string? langId = default(string?), string? currencyId = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), bool? useLatestApiVersion = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->ProductChildItemInfo");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling ProductApi->ProductChildItemInfo");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_id", productId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }
            if (currencyId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "currency_id", currencyId));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }
            if (useLatestApiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "use_latest_api_version", useLatestApiVersion));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductChildItemInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ProductChildItemInfo200Response>("/product.child_item.info.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductChildItemInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.child_item.list Get a list of a product&#39;s child items, such as variants or bundle components. The total_count field in the response indicates the total number of items in the context of the current filter.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve products child items via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="productId">Filter by parent product id (optional)</param>
        /// <param name="productIds">Filter by parent product ids (optional)</param>
        /// <param name="sku">Filter by products variant&#39;s sku (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="currencyId">Currency Id (optional)</param>
        /// <param name="availSale">Specifies the set of available/not available products for sale (optional)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Child products search that is specified by field (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="returnGlobal">Determines the type of products to be returned. If set to &#39;true&#39;, only global products will be returned; if set to &#39;false&#39;, only local products will be returned. (optional, default to false)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelResponseProductChildItemList</returns>
        public ModelResponseProductChildItemList ProductChildItemList(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? productId = default(string?), string? productIds = default(string?), string? sku = default(string?), string? storeId = default(string?), string? langId = default(string?), string? currencyId = default(string?), bool? availSale = default(bool?), string? findValue = default(string?), string? findWhere = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), bool? returnGlobal = default(bool?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), string? reportRequestId = default(string?), bool? disableReportCache = default(bool?), bool? useLatestApiVersion = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModelResponseProductChildItemList> localVarResponse = ProductChildItemListWithHttpInfo(start, count, pageCursor, productId, productIds, sku, storeId, langId, currencyId, availSale, findValue, findWhere, createdFrom, createdTo, modifiedFrom, modifiedTo, returnGlobal, responseFields, varParams, exclude, reportRequestId, disableReportCache, useLatestApiVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.child_item.list Get a list of a product&#39;s child items, such as variants or bundle components. The total_count field in the response indicates the total number of items in the context of the current filter.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve products child items via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="productId">Filter by parent product id (optional)</param>
        /// <param name="productIds">Filter by parent product ids (optional)</param>
        /// <param name="sku">Filter by products variant&#39;s sku (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="currencyId">Currency Id (optional)</param>
        /// <param name="availSale">Specifies the set of available/not available products for sale (optional)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Child products search that is specified by field (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="returnGlobal">Determines the type of products to be returned. If set to &#39;true&#39;, only global products will be returned; if set to &#39;false&#39;, only local products will be returned. (optional, default to false)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelResponseProductChildItemList</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModelResponseProductChildItemList> ProductChildItemListWithHttpInfo(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? productId = default(string?), string? productIds = default(string?), string? sku = default(string?), string? storeId = default(string?), string? langId = default(string?), string? currencyId = default(string?), bool? availSale = default(bool?), string? findValue = default(string?), string? findWhere = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), bool? returnGlobal = default(bool?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), string? reportRequestId = default(string?), bool? disableReportCache = default(bool?), bool? useLatestApiVersion = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (pageCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_cursor", pageCursor));
            }
            if (productId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_id", productId));
            }
            if (productIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_ids", productIds));
            }
            if (sku != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sku", sku));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }
            if (currencyId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "currency_id", currencyId));
            }
            if (availSale != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "avail_sale", availSale));
            }
            if (findValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_value", findValue));
            }
            if (findWhere != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_where", findWhere));
            }
            if (createdFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_from", createdFrom));
            }
            if (createdTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_to", createdTo));
            }
            if (modifiedFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_from", modifiedFrom));
            }
            if (modifiedTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_to", modifiedTo));
            }
            if (returnGlobal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "return_global", returnGlobal));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }
            if (reportRequestId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "report_request_id", reportRequestId));
            }
            if (disableReportCache != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "disable_report_cache", disableReportCache));
            }
            if (useLatestApiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "use_latest_api_version", useLatestApiVersion));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductChildItemList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ModelResponseProductChildItemList>("/product.child_item.list.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductChildItemList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.child_item.list Get a list of a product&#39;s child items, such as variants or bundle components. The total_count field in the response indicates the total number of items in the context of the current filter.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve products child items via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="productId">Filter by parent product id (optional)</param>
        /// <param name="productIds">Filter by parent product ids (optional)</param>
        /// <param name="sku">Filter by products variant&#39;s sku (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="currencyId">Currency Id (optional)</param>
        /// <param name="availSale">Specifies the set of available/not available products for sale (optional)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Child products search that is specified by field (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="returnGlobal">Determines the type of products to be returned. If set to &#39;true&#39;, only global products will be returned; if set to &#39;false&#39;, only local products will be returned. (optional, default to false)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelResponseProductChildItemList</returns>
        public async System.Threading.Tasks.Task<ModelResponseProductChildItemList> ProductChildItemListAsync(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? productId = default(string?), string? productIds = default(string?), string? sku = default(string?), string? storeId = default(string?), string? langId = default(string?), string? currencyId = default(string?), bool? availSale = default(bool?), string? findValue = default(string?), string? findWhere = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), bool? returnGlobal = default(bool?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), string? reportRequestId = default(string?), bool? disableReportCache = default(bool?), bool? useLatestApiVersion = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModelResponseProductChildItemList> localVarResponse = await ProductChildItemListWithHttpInfoAsync(start, count, pageCursor, productId, productIds, sku, storeId, langId, currencyId, availSale, findValue, findWhere, createdFrom, createdTo, modifiedFrom, modifiedTo, returnGlobal, responseFields, varParams, exclude, reportRequestId, disableReportCache, useLatestApiVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.child_item.list Get a list of a product&#39;s child items, such as variants or bundle components. The total_count field in the response indicates the total number of items in the context of the current filter.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve products child items via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="productId">Filter by parent product id (optional)</param>
        /// <param name="productIds">Filter by parent product ids (optional)</param>
        /// <param name="sku">Filter by products variant&#39;s sku (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="currencyId">Currency Id (optional)</param>
        /// <param name="availSale">Specifies the set of available/not available products for sale (optional)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Child products search that is specified by field (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="returnGlobal">Determines the type of products to be returned. If set to &#39;true&#39;, only global products will be returned; if set to &#39;false&#39;, only local products will be returned. (optional, default to false)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;force_all&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelResponseProductChildItemList)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModelResponseProductChildItemList>> ProductChildItemListWithHttpInfoAsync(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? productId = default(string?), string? productIds = default(string?), string? sku = default(string?), string? storeId = default(string?), string? langId = default(string?), string? currencyId = default(string?), bool? availSale = default(bool?), string? findValue = default(string?), string? findWhere = default(string?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), bool? returnGlobal = default(bool?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), string? reportRequestId = default(string?), bool? disableReportCache = default(bool?), bool? useLatestApiVersion = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (pageCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_cursor", pageCursor));
            }
            if (productId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_id", productId));
            }
            if (productIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_ids", productIds));
            }
            if (sku != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sku", sku));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }
            if (currencyId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "currency_id", currencyId));
            }
            if (availSale != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "avail_sale", availSale));
            }
            if (findValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_value", findValue));
            }
            if (findWhere != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_where", findWhere));
            }
            if (createdFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_from", createdFrom));
            }
            if (createdTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_to", createdTo));
            }
            if (modifiedFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_from", modifiedFrom));
            }
            if (modifiedTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_to", modifiedTo));
            }
            if (returnGlobal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "return_global", returnGlobal));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }
            if (reportRequestId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "report_request_id", reportRequestId));
            }
            if (disableReportCache != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "disable_report_cache", disableReportCache));
            }
            if (useLatestApiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "use_latest_api_version", useLatestApiVersion));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductChildItemList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ModelResponseProductChildItemList>("/product.child_item.list.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductChildItemList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.count Count products in store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productIds">Counts products specified by product ids (optional)</param>
        /// <param name="sinceId">Retrieve entities starting from the specified id. (optional)</param>
        /// <param name="categoriesIds">Defines product add that is specified by comma-separated categories id (optional)</param>
        /// <param name="categoryId">Counts products specified by category id (optional)</param>
        /// <param name="storeId">Counts products specified by store id (optional)</param>
        /// <param name="langId">Counts products specified by language id (optional)</param>
        /// <param name="availView">Specifies the set of visible/invisible products (optional)</param>
        /// <param name="availSale">Specifies the set of available/not available products for sale (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="brandName">Retrieves brands specified by brand name (optional)</param>
        /// <param name="productAttributes">Defines product attributes (optional)</param>
        /// <param name="status">Defines product&#39;s status (optional)</param>
        /// <param name="type">Defines products&#39;s type (optional)</param>
        /// <param name="visible">Filter items by visibility status (optional, default to &quot;everywhere&quot;)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Counts products that are searched specified by field (optional)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="returnGlobal">Determines the type of products to be returned. If set to &#39;true&#39;, only global products will be returned; if set to &#39;false&#39;, only local products will be returned. (optional, default to false)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductCount200Response</returns>
        public ProductCount200Response ProductCount(string? productIds = default(string?), string? sinceId = default(string?), string? categoriesIds = default(string?), string? categoryId = default(string?), string? storeId = default(string?), string? langId = default(string?), bool? availView = default(bool?), bool? availSale = default(bool?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), string? brandName = default(string?), List<string>? productAttributes = default(List<string>?), string? status = default(string?), string? type = default(string?), string? visible = default(string?), string? findValue = default(string?), string? findWhere = default(string?), string? reportRequestId = default(string?), bool? returnGlobal = default(bool?), bool? disableReportCache = default(bool?), bool? useLatestApiVersion = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ProductCount200Response> localVarResponse = ProductCountWithHttpInfo(productIds, sinceId, categoriesIds, categoryId, storeId, langId, availView, availSale, createdFrom, createdTo, modifiedFrom, modifiedTo, brandName, productAttributes, status, type, visible, findValue, findWhere, reportRequestId, returnGlobal, disableReportCache, useLatestApiVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.count Count products in store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productIds">Counts products specified by product ids (optional)</param>
        /// <param name="sinceId">Retrieve entities starting from the specified id. (optional)</param>
        /// <param name="categoriesIds">Defines product add that is specified by comma-separated categories id (optional)</param>
        /// <param name="categoryId">Counts products specified by category id (optional)</param>
        /// <param name="storeId">Counts products specified by store id (optional)</param>
        /// <param name="langId">Counts products specified by language id (optional)</param>
        /// <param name="availView">Specifies the set of visible/invisible products (optional)</param>
        /// <param name="availSale">Specifies the set of available/not available products for sale (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="brandName">Retrieves brands specified by brand name (optional)</param>
        /// <param name="productAttributes">Defines product attributes (optional)</param>
        /// <param name="status">Defines product&#39;s status (optional)</param>
        /// <param name="type">Defines products&#39;s type (optional)</param>
        /// <param name="visible">Filter items by visibility status (optional, default to &quot;everywhere&quot;)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Counts products that are searched specified by field (optional)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="returnGlobal">Determines the type of products to be returned. If set to &#39;true&#39;, only global products will be returned; if set to &#39;false&#39;, only local products will be returned. (optional, default to false)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductCount200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ProductCount200Response> ProductCountWithHttpInfo(string? productIds = default(string?), string? sinceId = default(string?), string? categoriesIds = default(string?), string? categoryId = default(string?), string? storeId = default(string?), string? langId = default(string?), bool? availView = default(bool?), bool? availSale = default(bool?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), string? brandName = default(string?), List<string>? productAttributes = default(List<string>?), string? status = default(string?), string? type = default(string?), string? visible = default(string?), string? findValue = default(string?), string? findWhere = default(string?), string? reportRequestId = default(string?), bool? returnGlobal = default(bool?), bool? disableReportCache = default(bool?), bool? useLatestApiVersion = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (productIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_ids", productIds));
            }
            if (sinceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "since_id", sinceId));
            }
            if (categoriesIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "categories_ids", categoriesIds));
            }
            if (categoryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "category_id", categoryId));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }
            if (availView != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "avail_view", availView));
            }
            if (availSale != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "avail_sale", availSale));
            }
            if (createdFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_from", createdFrom));
            }
            if (createdTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_to", createdTo));
            }
            if (modifiedFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_from", modifiedFrom));
            }
            if (modifiedTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_to", modifiedTo));
            }
            if (brandName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "brand_name", brandName));
            }
            if (productAttributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "product_attributes", productAttributes));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (visible != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "visible", visible));
            }
            if (findValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_value", findValue));
            }
            if (findWhere != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_where", findWhere));
            }
            if (reportRequestId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "report_request_id", reportRequestId));
            }
            if (returnGlobal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "return_global", returnGlobal));
            }
            if (disableReportCache != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "disable_report_cache", disableReportCache));
            }
            if (useLatestApiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "use_latest_api_version", useLatestApiVersion));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductCount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ProductCount200Response>("/product.count.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.count Count products in store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productIds">Counts products specified by product ids (optional)</param>
        /// <param name="sinceId">Retrieve entities starting from the specified id. (optional)</param>
        /// <param name="categoriesIds">Defines product add that is specified by comma-separated categories id (optional)</param>
        /// <param name="categoryId">Counts products specified by category id (optional)</param>
        /// <param name="storeId">Counts products specified by store id (optional)</param>
        /// <param name="langId">Counts products specified by language id (optional)</param>
        /// <param name="availView">Specifies the set of visible/invisible products (optional)</param>
        /// <param name="availSale">Specifies the set of available/not available products for sale (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="brandName">Retrieves brands specified by brand name (optional)</param>
        /// <param name="productAttributes">Defines product attributes (optional)</param>
        /// <param name="status">Defines product&#39;s status (optional)</param>
        /// <param name="type">Defines products&#39;s type (optional)</param>
        /// <param name="visible">Filter items by visibility status (optional, default to &quot;everywhere&quot;)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Counts products that are searched specified by field (optional)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="returnGlobal">Determines the type of products to be returned. If set to &#39;true&#39;, only global products will be returned; if set to &#39;false&#39;, only local products will be returned. (optional, default to false)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductCount200Response</returns>
        public async System.Threading.Tasks.Task<ProductCount200Response> ProductCountAsync(string? productIds = default(string?), string? sinceId = default(string?), string? categoriesIds = default(string?), string? categoryId = default(string?), string? storeId = default(string?), string? langId = default(string?), bool? availView = default(bool?), bool? availSale = default(bool?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), string? brandName = default(string?), List<string>? productAttributes = default(List<string>?), string? status = default(string?), string? type = default(string?), string? visible = default(string?), string? findValue = default(string?), string? findWhere = default(string?), string? reportRequestId = default(string?), bool? returnGlobal = default(bool?), bool? disableReportCache = default(bool?), bool? useLatestApiVersion = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ProductCount200Response> localVarResponse = await ProductCountWithHttpInfoAsync(productIds, sinceId, categoriesIds, categoryId, storeId, langId, availView, availSale, createdFrom, createdTo, modifiedFrom, modifiedTo, brandName, productAttributes, status, type, visible, findValue, findWhere, reportRequestId, returnGlobal, disableReportCache, useLatestApiVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.count Count products in store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productIds">Counts products specified by product ids (optional)</param>
        /// <param name="sinceId">Retrieve entities starting from the specified id. (optional)</param>
        /// <param name="categoriesIds">Defines product add that is specified by comma-separated categories id (optional)</param>
        /// <param name="categoryId">Counts products specified by category id (optional)</param>
        /// <param name="storeId">Counts products specified by store id (optional)</param>
        /// <param name="langId">Counts products specified by language id (optional)</param>
        /// <param name="availView">Specifies the set of visible/invisible products (optional)</param>
        /// <param name="availSale">Specifies the set of available/not available products for sale (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="brandName">Retrieves brands specified by brand name (optional)</param>
        /// <param name="productAttributes">Defines product attributes (optional)</param>
        /// <param name="status">Defines product&#39;s status (optional)</param>
        /// <param name="type">Defines products&#39;s type (optional)</param>
        /// <param name="visible">Filter items by visibility status (optional, default to &quot;everywhere&quot;)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Counts products that are searched specified by field (optional)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="returnGlobal">Determines the type of products to be returned. If set to &#39;true&#39;, only global products will be returned; if set to &#39;false&#39;, only local products will be returned. (optional, default to false)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductCount200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ProductCount200Response>> ProductCountWithHttpInfoAsync(string? productIds = default(string?), string? sinceId = default(string?), string? categoriesIds = default(string?), string? categoryId = default(string?), string? storeId = default(string?), string? langId = default(string?), bool? availView = default(bool?), bool? availSale = default(bool?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), string? brandName = default(string?), List<string>? productAttributes = default(List<string>?), string? status = default(string?), string? type = default(string?), string? visible = default(string?), string? findValue = default(string?), string? findWhere = default(string?), string? reportRequestId = default(string?), bool? returnGlobal = default(bool?), bool? disableReportCache = default(bool?), bool? useLatestApiVersion = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (productIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_ids", productIds));
            }
            if (sinceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "since_id", sinceId));
            }
            if (categoriesIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "categories_ids", categoriesIds));
            }
            if (categoryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "category_id", categoryId));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }
            if (availView != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "avail_view", availView));
            }
            if (availSale != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "avail_sale", availSale));
            }
            if (createdFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_from", createdFrom));
            }
            if (createdTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_to", createdTo));
            }
            if (modifiedFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_from", modifiedFrom));
            }
            if (modifiedTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_to", modifiedTo));
            }
            if (brandName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "brand_name", brandName));
            }
            if (productAttributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "product_attributes", productAttributes));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (visible != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "visible", visible));
            }
            if (findValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_value", findValue));
            }
            if (findWhere != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_where", findWhere));
            }
            if (reportRequestId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "report_request_id", reportRequestId));
            }
            if (returnGlobal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "return_global", returnGlobal));
            }
            if (disableReportCache != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "disable_report_cache", disableReportCache));
            }
            if (useLatestApiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "use_latest_api_version", useLatestApiVersion));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductCount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ProductCount200Response>("/product.count.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.currency.add Add currency and/or set default in store
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iso3">Specifies standardized currency code</param>
        /// <param name="rate">Defines the numerical identifier against to the major currency</param>
        /// <param name="name">Defines currency&#39;s name (optional)</param>
        /// <param name="avail">Specifies whether the currency is available (optional, default to true)</param>
        /// <param name="symbolLeft">Defines the symbol that is located before the currency (optional)</param>
        /// <param name="symbolRight">Defines the symbol that is located after the currency (optional)</param>
        /// <param name="varDefault">Specifies currency&#39;s default meaning (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductCurrencyAdd200Response</returns>
        public ProductCurrencyAdd200Response ProductCurrencyAdd(string iso3, decimal rate, string? name = default(string?), bool? avail = default(bool?), string? symbolLeft = default(string?), string? symbolRight = default(string?), bool? varDefault = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ProductCurrencyAdd200Response> localVarResponse = ProductCurrencyAddWithHttpInfo(iso3, rate, name, avail, symbolLeft, symbolRight, varDefault);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.currency.add Add currency and/or set default in store
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iso3">Specifies standardized currency code</param>
        /// <param name="rate">Defines the numerical identifier against to the major currency</param>
        /// <param name="name">Defines currency&#39;s name (optional)</param>
        /// <param name="avail">Specifies whether the currency is available (optional, default to true)</param>
        /// <param name="symbolLeft">Defines the symbol that is located before the currency (optional)</param>
        /// <param name="symbolRight">Defines the symbol that is located after the currency (optional)</param>
        /// <param name="varDefault">Specifies currency&#39;s default meaning (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductCurrencyAdd200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ProductCurrencyAdd200Response> ProductCurrencyAddWithHttpInfo(string iso3, decimal rate, string? name = default(string?), bool? avail = default(bool?), string? symbolLeft = default(string?), string? symbolRight = default(string?), bool? varDefault = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'iso3' is set
            if (iso3 == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'iso3' when calling ProductApi->ProductCurrencyAdd");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "iso3", iso3));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "rate", rate));
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (avail != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "avail", avail));
            }
            if (symbolLeft != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "symbol_left", symbolLeft));
            }
            if (symbolRight != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "symbol_right", symbolRight));
            }
            if (varDefault != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "default", varDefault));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductCurrencyAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductCurrencyAdd200Response>("/product.currency.add.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductCurrencyAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.currency.add Add currency and/or set default in store
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iso3">Specifies standardized currency code</param>
        /// <param name="rate">Defines the numerical identifier against to the major currency</param>
        /// <param name="name">Defines currency&#39;s name (optional)</param>
        /// <param name="avail">Specifies whether the currency is available (optional, default to true)</param>
        /// <param name="symbolLeft">Defines the symbol that is located before the currency (optional)</param>
        /// <param name="symbolRight">Defines the symbol that is located after the currency (optional)</param>
        /// <param name="varDefault">Specifies currency&#39;s default meaning (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductCurrencyAdd200Response</returns>
        public async System.Threading.Tasks.Task<ProductCurrencyAdd200Response> ProductCurrencyAddAsync(string iso3, decimal rate, string? name = default(string?), bool? avail = default(bool?), string? symbolLeft = default(string?), string? symbolRight = default(string?), bool? varDefault = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ProductCurrencyAdd200Response> localVarResponse = await ProductCurrencyAddWithHttpInfoAsync(iso3, rate, name, avail, symbolLeft, symbolRight, varDefault, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.currency.add Add currency and/or set default in store
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iso3">Specifies standardized currency code</param>
        /// <param name="rate">Defines the numerical identifier against to the major currency</param>
        /// <param name="name">Defines currency&#39;s name (optional)</param>
        /// <param name="avail">Specifies whether the currency is available (optional, default to true)</param>
        /// <param name="symbolLeft">Defines the symbol that is located before the currency (optional)</param>
        /// <param name="symbolRight">Defines the symbol that is located after the currency (optional)</param>
        /// <param name="varDefault">Specifies currency&#39;s default meaning (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductCurrencyAdd200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ProductCurrencyAdd200Response>> ProductCurrencyAddWithHttpInfoAsync(string iso3, decimal rate, string? name = default(string?), bool? avail = default(bool?), string? symbolLeft = default(string?), string? symbolRight = default(string?), bool? varDefault = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'iso3' is set
            if (iso3 == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'iso3' when calling ProductApi->ProductCurrencyAdd");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "iso3", iso3));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "rate", rate));
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (avail != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "avail", avail));
            }
            if (symbolLeft != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "symbol_left", symbolLeft));
            }
            if (symbolRight != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "symbol_right", symbolRight));
            }
            if (varDefault != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "default", varDefault));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductCurrencyAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductCurrencyAdd200Response>("/product.currency.add.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductCurrencyAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.currency.list Get list of currencies
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="varDefault">Specifies the set of default/not default currencies (optional)</param>
        /// <param name="avail">Specifies the set of available/not available currencies (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;name,iso3,default,avail&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelResponseProductCurrencyList</returns>
        public ModelResponseProductCurrencyList ProductCurrencyList(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), bool? varDefault = default(bool?), bool? avail = default(bool?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModelResponseProductCurrencyList> localVarResponse = ProductCurrencyListWithHttpInfo(start, count, pageCursor, varDefault, avail, responseFields, varParams, exclude);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.currency.list Get list of currencies
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="varDefault">Specifies the set of default/not default currencies (optional)</param>
        /// <param name="avail">Specifies the set of available/not available currencies (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;name,iso3,default,avail&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelResponseProductCurrencyList</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModelResponseProductCurrencyList> ProductCurrencyListWithHttpInfo(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), bool? varDefault = default(bool?), bool? avail = default(bool?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (pageCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_cursor", pageCursor));
            }
            if (varDefault != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "default", varDefault));
            }
            if (avail != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "avail", avail));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductCurrencyList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ModelResponseProductCurrencyList>("/product.currency.list.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductCurrencyList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.currency.list Get list of currencies
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="varDefault">Specifies the set of default/not default currencies (optional)</param>
        /// <param name="avail">Specifies the set of available/not available currencies (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;name,iso3,default,avail&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelResponseProductCurrencyList</returns>
        public async System.Threading.Tasks.Task<ModelResponseProductCurrencyList> ProductCurrencyListAsync(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), bool? varDefault = default(bool?), bool? avail = default(bool?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModelResponseProductCurrencyList> localVarResponse = await ProductCurrencyListWithHttpInfoAsync(start, count, pageCursor, varDefault, avail, responseFields, varParams, exclude, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.currency.list Get list of currencies
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="varDefault">Specifies the set of default/not default currencies (optional)</param>
        /// <param name="avail">Specifies the set of available/not available currencies (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;name,iso3,default,avail&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelResponseProductCurrencyList)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModelResponseProductCurrencyList>> ProductCurrencyListWithHttpInfoAsync(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), bool? varDefault = default(bool?), bool? avail = default(bool?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (pageCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_cursor", pageCursor));
            }
            if (varDefault != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "default", varDefault));
            }
            if (avail != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "avail", avail));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductCurrencyList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ModelResponseProductCurrencyList>("/product.currency.list.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductCurrencyList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.delete Product delete
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Product id that will be removed</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomerDelete200Response</returns>
        public CustomerDelete200Response ProductDelete(string id, string? storeId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CustomerDelete200Response> localVarResponse = ProductDeleteWithHttpInfo(id, storeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.delete Product delete
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Product id that will be removed</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomerDelete200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<CustomerDelete200Response> ProductDeleteWithHttpInfo(string id, string? storeId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling ProductApi->ProductDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<CustomerDelete200Response>("/product.delete.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.delete Product delete
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Product id that will be removed</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomerDelete200Response</returns>
        public async System.Threading.Tasks.Task<CustomerDelete200Response> ProductDeleteAsync(string id, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CustomerDelete200Response> localVarResponse = await ProductDeleteWithHttpInfoAsync(id, storeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.delete Product delete
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Product id that will be removed</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomerDelete200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CustomerDelete200Response>> ProductDeleteWithHttpInfoAsync(string id, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling ProductApi->ProductDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<CustomerDelete200Response>("/product.delete.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.delete.batch Remove product from the store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productDeleteBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoryAddBatch200Response</returns>
        public CategoryAddBatch200Response ProductDeleteBatch(ProductDeleteBatch productDeleteBatch, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CategoryAddBatch200Response> localVarResponse = ProductDeleteBatchWithHttpInfo(productDeleteBatch);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.delete.batch Remove product from the store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productDeleteBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoryAddBatch200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<CategoryAddBatch200Response> ProductDeleteBatchWithHttpInfo(ProductDeleteBatch productDeleteBatch, int operationIndex = 0)
        {
            // verify the required parameter 'productDeleteBatch' is set
            if (productDeleteBatch == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productDeleteBatch' when calling ProductApi->ProductDeleteBatch");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productDeleteBatch;

            localVarRequestOptions.Operation = "ProductApi.ProductDeleteBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CategoryAddBatch200Response>("/product.delete.batch.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductDeleteBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.delete.batch Remove product from the store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productDeleteBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryAddBatch200Response</returns>
        public async System.Threading.Tasks.Task<CategoryAddBatch200Response> ProductDeleteBatchAsync(ProductDeleteBatch productDeleteBatch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CategoryAddBatch200Response> localVarResponse = await ProductDeleteBatchWithHttpInfoAsync(productDeleteBatch, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.delete.batch Remove product from the store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productDeleteBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryAddBatch200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CategoryAddBatch200Response>> ProductDeleteBatchWithHttpInfoAsync(ProductDeleteBatch productDeleteBatch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'productDeleteBatch' is set
            if (productDeleteBatch == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productDeleteBatch' when calling ProductApi->ProductDeleteBatch");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productDeleteBatch;

            localVarRequestOptions.Operation = "ProductApi.ProductDeleteBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CategoryAddBatch200Response>("/product.delete.batch.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductDeleteBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.find Search product in store catalog. \&quot;Apple\&quot; is specified here by default.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findValue">Entity search that is specified by some value</param>
        /// <param name="findWhere">Entity search that is specified by the comma-separated unique fields (optional, default to &quot;name&quot;)</param>
        /// <param name="findParams">Entity search that is specified by comma-separated parameters (optional, default to &quot;whole_words&quot;)</param>
        /// <param name="findWhat">Parameter&#39;s value specifies the entity that has to be found (optional, default to &quot;product&quot;)</param>
        /// <param name="langId">Search products specified by language id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductFind200Response</returns>
        public ProductFind200Response ProductFind(string findValue, string? findWhere = default(string?), string? findParams = default(string?), string? findWhat = default(string?), string? langId = default(string?), string? storeId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ProductFind200Response> localVarResponse = ProductFindWithHttpInfo(findValue, findWhere, findParams, findWhat, langId, storeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.find Search product in store catalog. \&quot;Apple\&quot; is specified here by default.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findValue">Entity search that is specified by some value</param>
        /// <param name="findWhere">Entity search that is specified by the comma-separated unique fields (optional, default to &quot;name&quot;)</param>
        /// <param name="findParams">Entity search that is specified by comma-separated parameters (optional, default to &quot;whole_words&quot;)</param>
        /// <param name="findWhat">Parameter&#39;s value specifies the entity that has to be found (optional, default to &quot;product&quot;)</param>
        /// <param name="langId">Search products specified by language id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductFind200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ProductFind200Response> ProductFindWithHttpInfo(string findValue, string? findWhere = default(string?), string? findParams = default(string?), string? findWhat = default(string?), string? langId = default(string?), string? storeId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'findValue' is set
            if (findValue == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'findValue' when calling ProductApi->ProductFind");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_value", findValue));
            if (findWhere != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_where", findWhere));
            }
            if (findParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_params", findParams));
            }
            if (findWhat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_what", findWhat));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductFind";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ProductFind200Response>("/product.find.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductFind", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.find Search product in store catalog. \&quot;Apple\&quot; is specified here by default.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findValue">Entity search that is specified by some value</param>
        /// <param name="findWhere">Entity search that is specified by the comma-separated unique fields (optional, default to &quot;name&quot;)</param>
        /// <param name="findParams">Entity search that is specified by comma-separated parameters (optional, default to &quot;whole_words&quot;)</param>
        /// <param name="findWhat">Parameter&#39;s value specifies the entity that has to be found (optional, default to &quot;product&quot;)</param>
        /// <param name="langId">Search products specified by language id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductFind200Response</returns>
        public async System.Threading.Tasks.Task<ProductFind200Response> ProductFindAsync(string findValue, string? findWhere = default(string?), string? findParams = default(string?), string? findWhat = default(string?), string? langId = default(string?), string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ProductFind200Response> localVarResponse = await ProductFindWithHttpInfoAsync(findValue, findWhere, findParams, findWhat, langId, storeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.find Search product in store catalog. \&quot;Apple\&quot; is specified here by default.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findValue">Entity search that is specified by some value</param>
        /// <param name="findWhere">Entity search that is specified by the comma-separated unique fields (optional, default to &quot;name&quot;)</param>
        /// <param name="findParams">Entity search that is specified by comma-separated parameters (optional, default to &quot;whole_words&quot;)</param>
        /// <param name="findWhat">Parameter&#39;s value specifies the entity that has to be found (optional, default to &quot;product&quot;)</param>
        /// <param name="langId">Search products specified by language id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductFind200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ProductFind200Response>> ProductFindWithHttpInfoAsync(string findValue, string? findWhere = default(string?), string? findParams = default(string?), string? findWhat = default(string?), string? langId = default(string?), string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'findValue' is set
            if (findValue == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'findValue' when calling ProductApi->ProductFind");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_value", findValue));
            if (findWhere != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_where", findWhere));
            }
            if (findParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_params", findParams));
            }
            if (findWhat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_what", findWhat));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductFind";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ProductFind200Response>("/product.find.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductFind", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.image.add Add image to product
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productImageAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductImageAdd200Response</returns>
        public ProductImageAdd200Response ProductImageAdd(ProductImageAdd productImageAdd, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ProductImageAdd200Response> localVarResponse = ProductImageAddWithHttpInfo(productImageAdd);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.image.add Add image to product
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productImageAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductImageAdd200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ProductImageAdd200Response> ProductImageAddWithHttpInfo(ProductImageAdd productImageAdd, int operationIndex = 0)
        {
            // verify the required parameter 'productImageAdd' is set
            if (productImageAdd == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productImageAdd' when calling ProductApi->ProductImageAdd");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productImageAdd;

            localVarRequestOptions.Operation = "ProductApi.ProductImageAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductImageAdd200Response>("/product.image.add.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductImageAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.image.add Add image to product
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productImageAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductImageAdd200Response</returns>
        public async System.Threading.Tasks.Task<ProductImageAdd200Response> ProductImageAddAsync(ProductImageAdd productImageAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ProductImageAdd200Response> localVarResponse = await ProductImageAddWithHttpInfoAsync(productImageAdd, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.image.add Add image to product
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productImageAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductImageAdd200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ProductImageAdd200Response>> ProductImageAddWithHttpInfoAsync(ProductImageAdd productImageAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'productImageAdd' is set
            if (productImageAdd == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productImageAdd' when calling ProductApi->ProductImageAdd");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productImageAdd;

            localVarRequestOptions.Operation = "ProductApi.ProductImageAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductImageAdd200Response>("/product.image.add.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductImageAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.image.delete Delete image
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the image should be deleted</param>
        /// <param name="id">Entity id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttributeDelete200Response</returns>
        public AttributeDelete200Response ProductImageDelete(string productId, string id, string? storeId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AttributeDelete200Response> localVarResponse = ProductImageDeleteWithHttpInfo(productId, id, storeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.image.delete Delete image
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the image should be deleted</param>
        /// <param name="id">Entity id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttributeDelete200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<AttributeDelete200Response> ProductImageDeleteWithHttpInfo(string productId, string id, string? storeId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->ProductImageDelete");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling ProductApi->ProductImageDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_id", productId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductImageDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<AttributeDelete200Response>("/product.image.delete.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductImageDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.image.delete Delete image
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the image should be deleted</param>
        /// <param name="id">Entity id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttributeDelete200Response</returns>
        public async System.Threading.Tasks.Task<AttributeDelete200Response> ProductImageDeleteAsync(string productId, string id, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AttributeDelete200Response> localVarResponse = await ProductImageDeleteWithHttpInfoAsync(productId, id, storeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.image.delete Delete image
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the image should be deleted</param>
        /// <param name="id">Entity id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttributeDelete200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AttributeDelete200Response>> ProductImageDeleteWithHttpInfoAsync(string productId, string id, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->ProductImageDelete");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling ProductApi->ProductImageDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_id", productId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductImageDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<AttributeDelete200Response>("/product.image.delete.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductImageDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.image.update Update details of image
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the image should be updated</param>
        /// <param name="id">Defines image update specified by image id</param>
        /// <param name="variantIds">Defines product&#39;s variants ids (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="imageName">Defines image&#39;s name (optional)</param>
        /// <param name="type">Defines image&#39;s types that are specified by comma-separated list (optional, default to &quot;additional&quot;)</param>
        /// <param name="label">Defines alternative text that has to be attached to the picture (optional)</param>
        /// <param name="position">Defines image’s position in the list (optional)</param>
        /// <param name="hidden">Define is hide image (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductImageUpdate200Response</returns>
        public ProductImageUpdate200Response ProductImageUpdate(string productId, string id, string? variantIds = default(string?), string? storeId = default(string?), string? langId = default(string?), string? imageName = default(string?), string? type = default(string?), string? label = default(string?), int? position = default(int?), bool? hidden = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ProductImageUpdate200Response> localVarResponse = ProductImageUpdateWithHttpInfo(productId, id, variantIds, storeId, langId, imageName, type, label, position, hidden);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.image.update Update details of image
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the image should be updated</param>
        /// <param name="id">Defines image update specified by image id</param>
        /// <param name="variantIds">Defines product&#39;s variants ids (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="imageName">Defines image&#39;s name (optional)</param>
        /// <param name="type">Defines image&#39;s types that are specified by comma-separated list (optional, default to &quot;additional&quot;)</param>
        /// <param name="label">Defines alternative text that has to be attached to the picture (optional)</param>
        /// <param name="position">Defines image’s position in the list (optional)</param>
        /// <param name="hidden">Define is hide image (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductImageUpdate200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ProductImageUpdate200Response> ProductImageUpdateWithHttpInfo(string productId, string id, string? variantIds = default(string?), string? storeId = default(string?), string? langId = default(string?), string? imageName = default(string?), string? type = default(string?), string? label = default(string?), int? position = default(int?), bool? hidden = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->ProductImageUpdate");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling ProductApi->ProductImageUpdate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_id", productId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (variantIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "variant_ids", variantIds));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }
            if (imageName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "image_name", imageName));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (label != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "label", label));
            }
            if (position != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "position", position));
            }
            if (hidden != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "hidden", hidden));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductImageUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ProductImageUpdate200Response>("/product.image.update.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductImageUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.image.update Update details of image
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the image should be updated</param>
        /// <param name="id">Defines image update specified by image id</param>
        /// <param name="variantIds">Defines product&#39;s variants ids (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="imageName">Defines image&#39;s name (optional)</param>
        /// <param name="type">Defines image&#39;s types that are specified by comma-separated list (optional, default to &quot;additional&quot;)</param>
        /// <param name="label">Defines alternative text that has to be attached to the picture (optional)</param>
        /// <param name="position">Defines image’s position in the list (optional)</param>
        /// <param name="hidden">Define is hide image (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductImageUpdate200Response</returns>
        public async System.Threading.Tasks.Task<ProductImageUpdate200Response> ProductImageUpdateAsync(string productId, string id, string? variantIds = default(string?), string? storeId = default(string?), string? langId = default(string?), string? imageName = default(string?), string? type = default(string?), string? label = default(string?), int? position = default(int?), bool? hidden = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ProductImageUpdate200Response> localVarResponse = await ProductImageUpdateWithHttpInfoAsync(productId, id, variantIds, storeId, langId, imageName, type, label, position, hidden, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.image.update Update details of image
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the image should be updated</param>
        /// <param name="id">Defines image update specified by image id</param>
        /// <param name="variantIds">Defines product&#39;s variants ids (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="imageName">Defines image&#39;s name (optional)</param>
        /// <param name="type">Defines image&#39;s types that are specified by comma-separated list (optional, default to &quot;additional&quot;)</param>
        /// <param name="label">Defines alternative text that has to be attached to the picture (optional)</param>
        /// <param name="position">Defines image’s position in the list (optional)</param>
        /// <param name="hidden">Define is hide image (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductImageUpdate200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ProductImageUpdate200Response>> ProductImageUpdateWithHttpInfoAsync(string productId, string id, string? variantIds = default(string?), string? storeId = default(string?), string? langId = default(string?), string? imageName = default(string?), string? type = default(string?), string? label = default(string?), int? position = default(int?), bool? hidden = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->ProductImageUpdate");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling ProductApi->ProductImageUpdate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_id", productId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (variantIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "variant_ids", variantIds));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }
            if (imageName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "image_name", imageName));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (label != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "label", label));
            }
            if (position != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "position", position));
            }
            if (hidden != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "hidden", hidden));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductImageUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ProductImageUpdate200Response>("/product.image.update.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductImageUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.info Get information about a specific product by its ID. In the case of a multistore configuration, use the store_id filter to get a response in the context of a specific store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Retrieves product&#39;s info specified by product id</param>
        /// <param name="storeId">Retrieves product info specified by store id (optional)</param>
        /// <param name="langId">Retrieves product info specified by language id (optional)</param>
        /// <param name="currencyId">Currency Id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name,description,price,categories_ids&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductInfo200Response</returns>
        public ProductInfo200Response ProductInfo(string id, string? storeId = default(string?), string? langId = default(string?), string? currencyId = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), string? reportRequestId = default(string?), bool? disableReportCache = default(bool?), bool? useLatestApiVersion = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ProductInfo200Response> localVarResponse = ProductInfoWithHttpInfo(id, storeId, langId, currencyId, responseFields, varParams, exclude, reportRequestId, disableReportCache, useLatestApiVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.info Get information about a specific product by its ID. In the case of a multistore configuration, use the store_id filter to get a response in the context of a specific store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Retrieves product&#39;s info specified by product id</param>
        /// <param name="storeId">Retrieves product info specified by store id (optional)</param>
        /// <param name="langId">Retrieves product info specified by language id (optional)</param>
        /// <param name="currencyId">Currency Id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name,description,price,categories_ids&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductInfo200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ProductInfo200Response> ProductInfoWithHttpInfo(string id, string? storeId = default(string?), string? langId = default(string?), string? currencyId = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), string? reportRequestId = default(string?), bool? disableReportCache = default(bool?), bool? useLatestApiVersion = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling ProductApi->ProductInfo");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }
            if (currencyId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "currency_id", currencyId));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }
            if (reportRequestId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "report_request_id", reportRequestId));
            }
            if (disableReportCache != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "disable_report_cache", disableReportCache));
            }
            if (useLatestApiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "use_latest_api_version", useLatestApiVersion));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ProductInfo200Response>("/product.info.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.info Get information about a specific product by its ID. In the case of a multistore configuration, use the store_id filter to get a response in the context of a specific store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Retrieves product&#39;s info specified by product id</param>
        /// <param name="storeId">Retrieves product info specified by store id (optional)</param>
        /// <param name="langId">Retrieves product info specified by language id (optional)</param>
        /// <param name="currencyId">Currency Id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name,description,price,categories_ids&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductInfo200Response</returns>
        public async System.Threading.Tasks.Task<ProductInfo200Response> ProductInfoAsync(string id, string? storeId = default(string?), string? langId = default(string?), string? currencyId = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), string? reportRequestId = default(string?), bool? disableReportCache = default(bool?), bool? useLatestApiVersion = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ProductInfo200Response> localVarResponse = await ProductInfoWithHttpInfoAsync(id, storeId, langId, currencyId, responseFields, varParams, exclude, reportRequestId, disableReportCache, useLatestApiVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.info Get information about a specific product by its ID. In the case of a multistore configuration, use the store_id filter to get a response in the context of a specific store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Retrieves product&#39;s info specified by product id</param>
        /// <param name="storeId">Retrieves product info specified by store id (optional)</param>
        /// <param name="langId">Retrieves product info specified by language id (optional)</param>
        /// <param name="currencyId">Currency Id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name,description,price,categories_ids&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductInfo200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ProductInfo200Response>> ProductInfoWithHttpInfoAsync(string id, string? storeId = default(string?), string? langId = default(string?), string? currencyId = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), string? reportRequestId = default(string?), bool? disableReportCache = default(bool?), bool? useLatestApiVersion = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling ProductApi->ProductInfo");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }
            if (currencyId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "currency_id", currencyId));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }
            if (reportRequestId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "report_request_id", reportRequestId));
            }
            if (disableReportCache != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "disable_report_cache", disableReportCache));
            }
            if (useLatestApiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "use_latest_api_version", useLatestApiVersion));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ProductInfo200Response>("/product.info.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.list Get list of products from your store. Returns 10 products by default.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve products via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="productIds">Retrieves products specified by product ids (optional)</param>
        /// <param name="sinceId">Retrieve entities starting from the specified id. (optional)</param>
        /// <param name="categoriesIds">Retrieves products specified by categories ids (optional)</param>
        /// <param name="categoryId">Retrieves products specified by category id (optional)</param>
        /// <param name="storeId">Retrieves products specified by store id (optional)</param>
        /// <param name="langId">Retrieves products specified by language id (optional)</param>
        /// <param name="currencyId">Currency Id (optional)</param>
        /// <param name="availView">Specifies the set of visible/invisible products (optional)</param>
        /// <param name="availSale">Specifies the set of available/not available products for sale (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="sku">Filter by product&#39;s sku (optional)</param>
        /// <param name="brandName">Retrieves brands specified by brand name (optional)</param>
        /// <param name="productAttributes">Defines product attributes (optional)</param>
        /// <param name="status">Defines product&#39;s status (optional)</param>
        /// <param name="type">Defines products&#39;s type (optional)</param>
        /// <param name="visible">Filter items by visibility status (optional, default to &quot;everywhere&quot;)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Product search that is specified by field (optional)</param>
        /// <param name="returnGlobal">Determines the type of products to be returned. If set to &#39;true&#39;, only global products will be returned; if set to &#39;false&#39;, only local products will be returned. (optional, default to false)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name,description,price,categories_ids&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="sortBy">Set field to sort by (optional, default to &quot;id&quot;)</param>
        /// <param name="sortDirection">Set sorting direction (optional, default to &quot;asc&quot;)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="disableCache">Disable cache for current request (optional, default to false)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="productType">A categorization for the product (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelResponseProductList</returns>
        public ModelResponseProductList ProductList(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? productIds = default(string?), string? sinceId = default(string?), string? categoriesIds = default(string?), string? categoryId = default(string?), string? storeId = default(string?), string? langId = default(string?), string? currencyId = default(string?), bool? availView = default(bool?), bool? availSale = default(bool?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), string? sku = default(string?), string? brandName = default(string?), List<string>? productAttributes = default(List<string>?), string? status = default(string?), string? type = default(string?), string? visible = default(string?), string? findValue = default(string?), string? findWhere = default(string?), bool? returnGlobal = default(bool?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? reportRequestId = default(string?), bool? disableCache = default(bool?), bool? disableReportCache = default(bool?), bool? useLatestApiVersion = default(bool?), string? productType = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModelResponseProductList> localVarResponse = ProductListWithHttpInfo(start, count, pageCursor, productIds, sinceId, categoriesIds, categoryId, storeId, langId, currencyId, availView, availSale, createdFrom, createdTo, modifiedFrom, modifiedTo, sku, brandName, productAttributes, status, type, visible, findValue, findWhere, returnGlobal, varParams, responseFields, exclude, sortBy, sortDirection, reportRequestId, disableCache, disableReportCache, useLatestApiVersion, productType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.list Get list of products from your store. Returns 10 products by default.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve products via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="productIds">Retrieves products specified by product ids (optional)</param>
        /// <param name="sinceId">Retrieve entities starting from the specified id. (optional)</param>
        /// <param name="categoriesIds">Retrieves products specified by categories ids (optional)</param>
        /// <param name="categoryId">Retrieves products specified by category id (optional)</param>
        /// <param name="storeId">Retrieves products specified by store id (optional)</param>
        /// <param name="langId">Retrieves products specified by language id (optional)</param>
        /// <param name="currencyId">Currency Id (optional)</param>
        /// <param name="availView">Specifies the set of visible/invisible products (optional)</param>
        /// <param name="availSale">Specifies the set of available/not available products for sale (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="sku">Filter by product&#39;s sku (optional)</param>
        /// <param name="brandName">Retrieves brands specified by brand name (optional)</param>
        /// <param name="productAttributes">Defines product attributes (optional)</param>
        /// <param name="status">Defines product&#39;s status (optional)</param>
        /// <param name="type">Defines products&#39;s type (optional)</param>
        /// <param name="visible">Filter items by visibility status (optional, default to &quot;everywhere&quot;)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Product search that is specified by field (optional)</param>
        /// <param name="returnGlobal">Determines the type of products to be returned. If set to &#39;true&#39;, only global products will be returned; if set to &#39;false&#39;, only local products will be returned. (optional, default to false)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name,description,price,categories_ids&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="sortBy">Set field to sort by (optional, default to &quot;id&quot;)</param>
        /// <param name="sortDirection">Set sorting direction (optional, default to &quot;asc&quot;)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="disableCache">Disable cache for current request (optional, default to false)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="productType">A categorization for the product (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelResponseProductList</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModelResponseProductList> ProductListWithHttpInfo(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? productIds = default(string?), string? sinceId = default(string?), string? categoriesIds = default(string?), string? categoryId = default(string?), string? storeId = default(string?), string? langId = default(string?), string? currencyId = default(string?), bool? availView = default(bool?), bool? availSale = default(bool?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), string? sku = default(string?), string? brandName = default(string?), List<string>? productAttributes = default(List<string>?), string? status = default(string?), string? type = default(string?), string? visible = default(string?), string? findValue = default(string?), string? findWhere = default(string?), bool? returnGlobal = default(bool?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? reportRequestId = default(string?), bool? disableCache = default(bool?), bool? disableReportCache = default(bool?), bool? useLatestApiVersion = default(bool?), string? productType = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (pageCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_cursor", pageCursor));
            }
            if (productIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_ids", productIds));
            }
            if (sinceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "since_id", sinceId));
            }
            if (categoriesIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "categories_ids", categoriesIds));
            }
            if (categoryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "category_id", categoryId));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }
            if (currencyId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "currency_id", currencyId));
            }
            if (availView != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "avail_view", availView));
            }
            if (availSale != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "avail_sale", availSale));
            }
            if (createdFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_from", createdFrom));
            }
            if (createdTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_to", createdTo));
            }
            if (modifiedFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_from", modifiedFrom));
            }
            if (modifiedTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_to", modifiedTo));
            }
            if (sku != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sku", sku));
            }
            if (brandName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "brand_name", brandName));
            }
            if (productAttributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "product_attributes", productAttributes));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (visible != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "visible", visible));
            }
            if (findValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_value", findValue));
            }
            if (findWhere != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_where", findWhere));
            }
            if (returnGlobal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "return_global", returnGlobal));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sort_direction", sortDirection));
            }
            if (reportRequestId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "report_request_id", reportRequestId));
            }
            if (disableCache != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "disable_cache", disableCache));
            }
            if (disableReportCache != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "disable_report_cache", disableReportCache));
            }
            if (useLatestApiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "use_latest_api_version", useLatestApiVersion));
            }
            if (productType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_type", productType));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ModelResponseProductList>("/product.list.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.list Get list of products from your store. Returns 10 products by default.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve products via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="productIds">Retrieves products specified by product ids (optional)</param>
        /// <param name="sinceId">Retrieve entities starting from the specified id. (optional)</param>
        /// <param name="categoriesIds">Retrieves products specified by categories ids (optional)</param>
        /// <param name="categoryId">Retrieves products specified by category id (optional)</param>
        /// <param name="storeId">Retrieves products specified by store id (optional)</param>
        /// <param name="langId">Retrieves products specified by language id (optional)</param>
        /// <param name="currencyId">Currency Id (optional)</param>
        /// <param name="availView">Specifies the set of visible/invisible products (optional)</param>
        /// <param name="availSale">Specifies the set of available/not available products for sale (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="sku">Filter by product&#39;s sku (optional)</param>
        /// <param name="brandName">Retrieves brands specified by brand name (optional)</param>
        /// <param name="productAttributes">Defines product attributes (optional)</param>
        /// <param name="status">Defines product&#39;s status (optional)</param>
        /// <param name="type">Defines products&#39;s type (optional)</param>
        /// <param name="visible">Filter items by visibility status (optional, default to &quot;everywhere&quot;)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Product search that is specified by field (optional)</param>
        /// <param name="returnGlobal">Determines the type of products to be returned. If set to &#39;true&#39;, only global products will be returned; if set to &#39;false&#39;, only local products will be returned. (optional, default to false)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name,description,price,categories_ids&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="sortBy">Set field to sort by (optional, default to &quot;id&quot;)</param>
        /// <param name="sortDirection">Set sorting direction (optional, default to &quot;asc&quot;)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="disableCache">Disable cache for current request (optional, default to false)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="productType">A categorization for the product (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelResponseProductList</returns>
        public async System.Threading.Tasks.Task<ModelResponseProductList> ProductListAsync(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? productIds = default(string?), string? sinceId = default(string?), string? categoriesIds = default(string?), string? categoryId = default(string?), string? storeId = default(string?), string? langId = default(string?), string? currencyId = default(string?), bool? availView = default(bool?), bool? availSale = default(bool?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), string? sku = default(string?), string? brandName = default(string?), List<string>? productAttributes = default(List<string>?), string? status = default(string?), string? type = default(string?), string? visible = default(string?), string? findValue = default(string?), string? findWhere = default(string?), bool? returnGlobal = default(bool?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? reportRequestId = default(string?), bool? disableCache = default(bool?), bool? disableReportCache = default(bool?), bool? useLatestApiVersion = default(bool?), string? productType = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModelResponseProductList> localVarResponse = await ProductListWithHttpInfoAsync(start, count, pageCursor, productIds, sinceId, categoriesIds, categoryId, storeId, langId, currencyId, availView, availSale, createdFrom, createdTo, modifiedFrom, modifiedTo, sku, brandName, productAttributes, status, type, visible, findValue, findWhere, returnGlobal, varParams, responseFields, exclude, sortBy, sortDirection, reportRequestId, disableCache, disableReportCache, useLatestApiVersion, productType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.list Get list of products from your store. Returns 10 products by default.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve products via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="productIds">Retrieves products specified by product ids (optional)</param>
        /// <param name="sinceId">Retrieve entities starting from the specified id. (optional)</param>
        /// <param name="categoriesIds">Retrieves products specified by categories ids (optional)</param>
        /// <param name="categoryId">Retrieves products specified by category id (optional)</param>
        /// <param name="storeId">Retrieves products specified by store id (optional)</param>
        /// <param name="langId">Retrieves products specified by language id (optional)</param>
        /// <param name="currencyId">Currency Id (optional)</param>
        /// <param name="availView">Specifies the set of visible/invisible products (optional)</param>
        /// <param name="availSale">Specifies the set of available/not available products for sale (optional)</param>
        /// <param name="createdFrom">Retrieve entities from their creation date (optional)</param>
        /// <param name="createdTo">Retrieve entities to their creation date (optional)</param>
        /// <param name="modifiedFrom">Retrieve entities from their modification date (optional)</param>
        /// <param name="modifiedTo">Retrieve entities to their modification date (optional)</param>
        /// <param name="sku">Filter by product&#39;s sku (optional)</param>
        /// <param name="brandName">Retrieves brands specified by brand name (optional)</param>
        /// <param name="productAttributes">Defines product attributes (optional)</param>
        /// <param name="status">Defines product&#39;s status (optional)</param>
        /// <param name="type">Defines products&#39;s type (optional)</param>
        /// <param name="visible">Filter items by visibility status (optional, default to &quot;everywhere&quot;)</param>
        /// <param name="findValue">Entity search that is specified by some value (optional)</param>
        /// <param name="findWhere">Product search that is specified by field (optional)</param>
        /// <param name="returnGlobal">Determines the type of products to be returned. If set to &#39;true&#39;, only global products will be returned; if set to &#39;false&#39;, only local products will be returned. (optional, default to false)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name,description,price,categories_ids&quot;)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="sortBy">Set field to sort by (optional, default to &quot;id&quot;)</param>
        /// <param name="sortDirection">Set sorting direction (optional, default to &quot;asc&quot;)</param>
        /// <param name="reportRequestId">Report request id (optional)</param>
        /// <param name="disableCache">Disable cache for current request (optional, default to false)</param>
        /// <param name="disableReportCache">Disable report cache for current request (optional, default to false)</param>
        /// <param name="useLatestApiVersion">Use the latest platform API version (optional, default to false)</param>
        /// <param name="productType">A categorization for the product (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelResponseProductList)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModelResponseProductList>> ProductListWithHttpInfoAsync(int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? productIds = default(string?), string? sinceId = default(string?), string? categoriesIds = default(string?), string? categoryId = default(string?), string? storeId = default(string?), string? langId = default(string?), string? currencyId = default(string?), bool? availView = default(bool?), bool? availSale = default(bool?), string? createdFrom = default(string?), string? createdTo = default(string?), string? modifiedFrom = default(string?), string? modifiedTo = default(string?), string? sku = default(string?), string? brandName = default(string?), List<string>? productAttributes = default(List<string>?), string? status = default(string?), string? type = default(string?), string? visible = default(string?), string? findValue = default(string?), string? findWhere = default(string?), bool? returnGlobal = default(bool?), string? varParams = default(string?), string? responseFields = default(string?), string? exclude = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? reportRequestId = default(string?), bool? disableCache = default(bool?), bool? disableReportCache = default(bool?), bool? useLatestApiVersion = default(bool?), string? productType = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (pageCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_cursor", pageCursor));
            }
            if (productIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_ids", productIds));
            }
            if (sinceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "since_id", sinceId));
            }
            if (categoriesIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "categories_ids", categoriesIds));
            }
            if (categoryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "category_id", categoryId));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }
            if (currencyId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "currency_id", currencyId));
            }
            if (availView != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "avail_view", availView));
            }
            if (availSale != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "avail_sale", availSale));
            }
            if (createdFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_from", createdFrom));
            }
            if (createdTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_to", createdTo));
            }
            if (modifiedFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_from", modifiedFrom));
            }
            if (modifiedTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modified_to", modifiedTo));
            }
            if (sku != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sku", sku));
            }
            if (brandName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "brand_name", brandName));
            }
            if (productAttributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "product_attributes", productAttributes));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (visible != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "visible", visible));
            }
            if (findValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_value", findValue));
            }
            if (findWhere != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "find_where", findWhere));
            }
            if (returnGlobal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "return_global", returnGlobal));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sort_direction", sortDirection));
            }
            if (reportRequestId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "report_request_id", reportRequestId));
            }
            if (disableCache != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "disable_cache", disableCache));
            }
            if (disableReportCache != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "disable_report_cache", disableReportCache));
            }
            if (useLatestApiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "use_latest_api_version", useLatestApiVersion));
            }
            if (productType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_type", productType));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ModelResponseProductList>("/product.list.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.manufacturer.add Add manufacturer to store and assign to product
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines products specified by product id</param>
        /// <param name="manufacturer">Defines product’s manufacturer&#39;s name</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductManufacturerAdd200Response</returns>
        public ProductManufacturerAdd200Response ProductManufacturerAdd(string productId, string manufacturer, string? storeId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ProductManufacturerAdd200Response> localVarResponse = ProductManufacturerAddWithHttpInfo(productId, manufacturer, storeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.manufacturer.add Add manufacturer to store and assign to product
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines products specified by product id</param>
        /// <param name="manufacturer">Defines product’s manufacturer&#39;s name</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductManufacturerAdd200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ProductManufacturerAdd200Response> ProductManufacturerAddWithHttpInfo(string productId, string manufacturer, string? storeId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->ProductManufacturerAdd");
            }

            // verify the required parameter 'manufacturer' is set
            if (manufacturer == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'manufacturer' when calling ProductApi->ProductManufacturerAdd");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_id", productId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manufacturer", manufacturer));
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductManufacturerAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductManufacturerAdd200Response>("/product.manufacturer.add.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductManufacturerAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.manufacturer.add Add manufacturer to store and assign to product
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines products specified by product id</param>
        /// <param name="manufacturer">Defines product’s manufacturer&#39;s name</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductManufacturerAdd200Response</returns>
        public async System.Threading.Tasks.Task<ProductManufacturerAdd200Response> ProductManufacturerAddAsync(string productId, string manufacturer, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ProductManufacturerAdd200Response> localVarResponse = await ProductManufacturerAddWithHttpInfoAsync(productId, manufacturer, storeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.manufacturer.add Add manufacturer to store and assign to product
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines products specified by product id</param>
        /// <param name="manufacturer">Defines product’s manufacturer&#39;s name</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductManufacturerAdd200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ProductManufacturerAdd200Response>> ProductManufacturerAddWithHttpInfoAsync(string productId, string manufacturer, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->ProductManufacturerAdd");
            }

            // verify the required parameter 'manufacturer' is set
            if (manufacturer == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'manufacturer' when calling ProductApi->ProductManufacturerAdd");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_id", productId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manufacturer", manufacturer));
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductManufacturerAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductManufacturerAdd200Response>("/product.manufacturer.add.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductManufacturerAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.option.add Add product option from store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productOptionAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductOptionAdd200Response</returns>
        public ProductOptionAdd200Response ProductOptionAdd(ProductOptionAdd productOptionAdd, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ProductOptionAdd200Response> localVarResponse = ProductOptionAddWithHttpInfo(productOptionAdd);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.option.add Add product option from store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productOptionAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductOptionAdd200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ProductOptionAdd200Response> ProductOptionAddWithHttpInfo(ProductOptionAdd productOptionAdd, int operationIndex = 0)
        {
            // verify the required parameter 'productOptionAdd' is set
            if (productOptionAdd == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productOptionAdd' when calling ProductApi->ProductOptionAdd");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productOptionAdd;

            localVarRequestOptions.Operation = "ProductApi.ProductOptionAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductOptionAdd200Response>("/product.option.add.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductOptionAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.option.add Add product option from store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productOptionAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductOptionAdd200Response</returns>
        public async System.Threading.Tasks.Task<ProductOptionAdd200Response> ProductOptionAddAsync(ProductOptionAdd productOptionAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ProductOptionAdd200Response> localVarResponse = await ProductOptionAddWithHttpInfoAsync(productOptionAdd, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.option.add Add product option from store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productOptionAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductOptionAdd200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ProductOptionAdd200Response>> ProductOptionAddWithHttpInfoAsync(ProductOptionAdd productOptionAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'productOptionAdd' is set
            if (productOptionAdd == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productOptionAdd' when calling ProductApi->ProductOptionAdd");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productOptionAdd;

            localVarRequestOptions.Operation = "ProductApi.ProductOptionAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductOptionAdd200Response>("/product.option.add.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductOptionAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.option.assign Assign option from product.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the option should be assigned</param>
        /// <param name="optionId">Defines option id which has to be assigned</param>
        /// <param name="required">Defines if the option is required (optional, default to false)</param>
        /// <param name="sortOrder">Sort number in the list (optional, default to 0)</param>
        /// <param name="optionValues">Defines option values that has to be assigned (optional)</param>
        /// <param name="clearCache">Is cache clear required (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductOptionAssign200Response</returns>
        public ProductOptionAssign200Response ProductOptionAssign(string productId, string optionId, bool? required = default(bool?), int? sortOrder = default(int?), string? optionValues = default(string?), bool? clearCache = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ProductOptionAssign200Response> localVarResponse = ProductOptionAssignWithHttpInfo(productId, optionId, required, sortOrder, optionValues, clearCache);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.option.assign Assign option from product.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the option should be assigned</param>
        /// <param name="optionId">Defines option id which has to be assigned</param>
        /// <param name="required">Defines if the option is required (optional, default to false)</param>
        /// <param name="sortOrder">Sort number in the list (optional, default to 0)</param>
        /// <param name="optionValues">Defines option values that has to be assigned (optional)</param>
        /// <param name="clearCache">Is cache clear required (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductOptionAssign200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ProductOptionAssign200Response> ProductOptionAssignWithHttpInfo(string productId, string optionId, bool? required = default(bool?), int? sortOrder = default(int?), string? optionValues = default(string?), bool? clearCache = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->ProductOptionAssign");
            }

            // verify the required parameter 'optionId' is set
            if (optionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'optionId' when calling ProductApi->ProductOptionAssign");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_id", productId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "option_id", optionId));
            if (required != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "required", required));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sort_order", sortOrder));
            }
            if (optionValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "option_values", optionValues));
            }
            if (clearCache != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "clear_cache", clearCache));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductOptionAssign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductOptionAssign200Response>("/product.option.assign.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductOptionAssign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.option.assign Assign option from product.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the option should be assigned</param>
        /// <param name="optionId">Defines option id which has to be assigned</param>
        /// <param name="required">Defines if the option is required (optional, default to false)</param>
        /// <param name="sortOrder">Sort number in the list (optional, default to 0)</param>
        /// <param name="optionValues">Defines option values that has to be assigned (optional)</param>
        /// <param name="clearCache">Is cache clear required (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductOptionAssign200Response</returns>
        public async System.Threading.Tasks.Task<ProductOptionAssign200Response> ProductOptionAssignAsync(string productId, string optionId, bool? required = default(bool?), int? sortOrder = default(int?), string? optionValues = default(string?), bool? clearCache = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ProductOptionAssign200Response> localVarResponse = await ProductOptionAssignWithHttpInfoAsync(productId, optionId, required, sortOrder, optionValues, clearCache, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.option.assign Assign option from product.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the option should be assigned</param>
        /// <param name="optionId">Defines option id which has to be assigned</param>
        /// <param name="required">Defines if the option is required (optional, default to false)</param>
        /// <param name="sortOrder">Sort number in the list (optional, default to 0)</param>
        /// <param name="optionValues">Defines option values that has to be assigned (optional)</param>
        /// <param name="clearCache">Is cache clear required (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductOptionAssign200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ProductOptionAssign200Response>> ProductOptionAssignWithHttpInfoAsync(string productId, string optionId, bool? required = default(bool?), int? sortOrder = default(int?), string? optionValues = default(string?), bool? clearCache = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->ProductOptionAssign");
            }

            // verify the required parameter 'optionId' is set
            if (optionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'optionId' when calling ProductApi->ProductOptionAssign");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_id", productId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "option_id", optionId));
            if (required != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "required", required));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sort_order", sortOrder));
            }
            if (optionValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "option_values", optionValues));
            }
            if (clearCache != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "clear_cache", clearCache));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductOptionAssign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductOptionAssign200Response>("/product.option.assign.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductOptionAssign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.option.delete Product option delete.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionId">Defines option id that should be deleted</param>
        /// <param name="productId">Defines product id where the option should be deleted</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttributeDelete200Response</returns>
        public AttributeDelete200Response ProductOptionDelete(string optionId, string productId, string? storeId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AttributeDelete200Response> localVarResponse = ProductOptionDeleteWithHttpInfo(optionId, productId, storeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.option.delete Product option delete.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionId">Defines option id that should be deleted</param>
        /// <param name="productId">Defines product id where the option should be deleted</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttributeDelete200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<AttributeDelete200Response> ProductOptionDeleteWithHttpInfo(string optionId, string productId, string? storeId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'optionId' is set
            if (optionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'optionId' when calling ProductApi->ProductOptionDelete");
            }

            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->ProductOptionDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "option_id", optionId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_id", productId));
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductOptionDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<AttributeDelete200Response>("/product.option.delete.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductOptionDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.option.delete Product option delete.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionId">Defines option id that should be deleted</param>
        /// <param name="productId">Defines product id where the option should be deleted</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttributeDelete200Response</returns>
        public async System.Threading.Tasks.Task<AttributeDelete200Response> ProductOptionDeleteAsync(string optionId, string productId, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AttributeDelete200Response> localVarResponse = await ProductOptionDeleteWithHttpInfoAsync(optionId, productId, storeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.option.delete Product option delete.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionId">Defines option id that should be deleted</param>
        /// <param name="productId">Defines product id where the option should be deleted</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttributeDelete200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AttributeDelete200Response>> ProductOptionDeleteWithHttpInfoAsync(string optionId, string productId, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'optionId' is set
            if (optionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'optionId' when calling ProductApi->ProductOptionDelete");
            }

            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->ProductOptionDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "option_id", optionId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_id", productId));
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductOptionDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<AttributeDelete200Response>("/product.option.delete.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductOptionDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.option.list Get list of options.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="productId">Retrieves products&#39; options specified by product id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name,description&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelResponseProductOptionList</returns>
        public ModelResponseProductOptionList ProductOptionList(int? start = default(int?), int? count = default(int?), string? productId = default(string?), string? langId = default(string?), string? storeId = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModelResponseProductOptionList> localVarResponse = ProductOptionListWithHttpInfo(start, count, productId, langId, storeId, responseFields, varParams, exclude);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.option.list Get list of options.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="productId">Retrieves products&#39; options specified by product id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name,description&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelResponseProductOptionList</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModelResponseProductOptionList> ProductOptionListWithHttpInfo(int? start = default(int?), int? count = default(int?), string? productId = default(string?), string? langId = default(string?), string? storeId = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (productId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_id", productId));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductOptionList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ModelResponseProductOptionList>("/product.option.list.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductOptionList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.option.list Get list of options.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="productId">Retrieves products&#39; options specified by product id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name,description&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelResponseProductOptionList</returns>
        public async System.Threading.Tasks.Task<ModelResponseProductOptionList> ProductOptionListAsync(int? start = default(int?), int? count = default(int?), string? productId = default(string?), string? langId = default(string?), string? storeId = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModelResponseProductOptionList> localVarResponse = await ProductOptionListWithHttpInfoAsync(start, count, productId, langId, storeId, responseFields, varParams, exclude, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.option.list Get list of options.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="productId">Retrieves products&#39; options specified by product id (optional)</param>
        /// <param name="langId">Language id (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,name,description&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelResponseProductOptionList)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModelResponseProductOptionList>> ProductOptionListWithHttpInfoAsync(int? start = default(int?), int? count = default(int?), string? productId = default(string?), string? langId = default(string?), string? storeId = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (productId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_id", productId));
            }
            if (langId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "lang_id", langId));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductOptionList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ModelResponseProductOptionList>("/product.option.list.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductOptionList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.option.value.add Add product option item from option.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the option value should be added</param>
        /// <param name="optionId">Defines option id where the value has to be added</param>
        /// <param name="optionValue">Defines option value that has to be added (optional)</param>
        /// <param name="sortOrder">Sort number in the list (optional, default to 0)</param>
        /// <param name="displayValue">Defines the value that will be displayed for the option value (optional)</param>
        /// <param name="isDefault">Defines as a default (optional)</param>
        /// <param name="clearCache">Is cache clear required (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductOptionValueAdd200Response</returns>
        public ProductOptionValueAdd200Response ProductOptionValueAdd(string productId, string optionId, string? optionValue = default(string?), int? sortOrder = default(int?), string? displayValue = default(string?), bool? isDefault = default(bool?), bool? clearCache = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ProductOptionValueAdd200Response> localVarResponse = ProductOptionValueAddWithHttpInfo(productId, optionId, optionValue, sortOrder, displayValue, isDefault, clearCache);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.option.value.add Add product option item from option.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the option value should be added</param>
        /// <param name="optionId">Defines option id where the value has to be added</param>
        /// <param name="optionValue">Defines option value that has to be added (optional)</param>
        /// <param name="sortOrder">Sort number in the list (optional, default to 0)</param>
        /// <param name="displayValue">Defines the value that will be displayed for the option value (optional)</param>
        /// <param name="isDefault">Defines as a default (optional)</param>
        /// <param name="clearCache">Is cache clear required (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductOptionValueAdd200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ProductOptionValueAdd200Response> ProductOptionValueAddWithHttpInfo(string productId, string optionId, string? optionValue = default(string?), int? sortOrder = default(int?), string? displayValue = default(string?), bool? isDefault = default(bool?), bool? clearCache = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->ProductOptionValueAdd");
            }

            // verify the required parameter 'optionId' is set
            if (optionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'optionId' when calling ProductApi->ProductOptionValueAdd");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_id", productId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "option_id", optionId));
            if (optionValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "option_value", optionValue));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sort_order", sortOrder));
            }
            if (displayValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "display_value", displayValue));
            }
            if (isDefault != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "is_default", isDefault));
            }
            if (clearCache != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "clear_cache", clearCache));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductOptionValueAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductOptionValueAdd200Response>("/product.option.value.add.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductOptionValueAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.option.value.add Add product option item from option.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the option value should be added</param>
        /// <param name="optionId">Defines option id where the value has to be added</param>
        /// <param name="optionValue">Defines option value that has to be added (optional)</param>
        /// <param name="sortOrder">Sort number in the list (optional, default to 0)</param>
        /// <param name="displayValue">Defines the value that will be displayed for the option value (optional)</param>
        /// <param name="isDefault">Defines as a default (optional)</param>
        /// <param name="clearCache">Is cache clear required (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductOptionValueAdd200Response</returns>
        public async System.Threading.Tasks.Task<ProductOptionValueAdd200Response> ProductOptionValueAddAsync(string productId, string optionId, string? optionValue = default(string?), int? sortOrder = default(int?), string? displayValue = default(string?), bool? isDefault = default(bool?), bool? clearCache = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ProductOptionValueAdd200Response> localVarResponse = await ProductOptionValueAddWithHttpInfoAsync(productId, optionId, optionValue, sortOrder, displayValue, isDefault, clearCache, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.option.value.add Add product option item from option.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the option value should be added</param>
        /// <param name="optionId">Defines option id where the value has to be added</param>
        /// <param name="optionValue">Defines option value that has to be added (optional)</param>
        /// <param name="sortOrder">Sort number in the list (optional, default to 0)</param>
        /// <param name="displayValue">Defines the value that will be displayed for the option value (optional)</param>
        /// <param name="isDefault">Defines as a default (optional)</param>
        /// <param name="clearCache">Is cache clear required (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductOptionValueAdd200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ProductOptionValueAdd200Response>> ProductOptionValueAddWithHttpInfoAsync(string productId, string optionId, string? optionValue = default(string?), int? sortOrder = default(int?), string? displayValue = default(string?), bool? isDefault = default(bool?), bool? clearCache = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->ProductOptionValueAdd");
            }

            // verify the required parameter 'optionId' is set
            if (optionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'optionId' when calling ProductApi->ProductOptionValueAdd");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_id", productId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "option_id", optionId));
            if (optionValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "option_value", optionValue));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sort_order", sortOrder));
            }
            if (displayValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "display_value", displayValue));
            }
            if (isDefault != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "is_default", isDefault));
            }
            if (clearCache != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "clear_cache", clearCache));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductOptionValueAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductOptionValueAdd200Response>("/product.option.value.add.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductOptionValueAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.option.value.assign Assign product option item from product.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productOptionId">Defines product&#39;s option id where the value has to be assigned</param>
        /// <param name="optionValueId">Defines value id that has to be assigned</param>
        /// <param name="clearCache">Is cache clear required (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductOptionValueAssign200Response</returns>
        public ProductOptionValueAssign200Response ProductOptionValueAssign(int productOptionId, string optionValueId, bool? clearCache = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ProductOptionValueAssign200Response> localVarResponse = ProductOptionValueAssignWithHttpInfo(productOptionId, optionValueId, clearCache);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.option.value.assign Assign product option item from product.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productOptionId">Defines product&#39;s option id where the value has to be assigned</param>
        /// <param name="optionValueId">Defines value id that has to be assigned</param>
        /// <param name="clearCache">Is cache clear required (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductOptionValueAssign200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ProductOptionValueAssign200Response> ProductOptionValueAssignWithHttpInfo(int productOptionId, string optionValueId, bool? clearCache = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'optionValueId' is set
            if (optionValueId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'optionValueId' when calling ProductApi->ProductOptionValueAssign");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_option_id", productOptionId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "option_value_id", optionValueId));
            if (clearCache != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "clear_cache", clearCache));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductOptionValueAssign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductOptionValueAssign200Response>("/product.option.value.assign.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductOptionValueAssign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.option.value.assign Assign product option item from product.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productOptionId">Defines product&#39;s option id where the value has to be assigned</param>
        /// <param name="optionValueId">Defines value id that has to be assigned</param>
        /// <param name="clearCache">Is cache clear required (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductOptionValueAssign200Response</returns>
        public async System.Threading.Tasks.Task<ProductOptionValueAssign200Response> ProductOptionValueAssignAsync(int productOptionId, string optionValueId, bool? clearCache = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ProductOptionValueAssign200Response> localVarResponse = await ProductOptionValueAssignWithHttpInfoAsync(productOptionId, optionValueId, clearCache, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.option.value.assign Assign product option item from product.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productOptionId">Defines product&#39;s option id where the value has to be assigned</param>
        /// <param name="optionValueId">Defines value id that has to be assigned</param>
        /// <param name="clearCache">Is cache clear required (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductOptionValueAssign200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ProductOptionValueAssign200Response>> ProductOptionValueAssignWithHttpInfoAsync(int productOptionId, string optionValueId, bool? clearCache = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'optionValueId' is set
            if (optionValueId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'optionValueId' when calling ProductApi->ProductOptionValueAssign");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_option_id", productOptionId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "option_value_id", optionValueId));
            if (clearCache != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "clear_cache", clearCache));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductOptionValueAssign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductOptionValueAssign200Response>("/product.option.value.assign.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductOptionValueAssign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.option.value.delete Product option value delete.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionId">Defines option id where the value should be deleted</param>
        /// <param name="optionValueId">Defines option value id that should be deleted</param>
        /// <param name="productId">Defines product id where the option value should be deleted</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttributeDelete200Response</returns>
        public AttributeDelete200Response ProductOptionValueDelete(string optionId, string optionValueId, string productId, string? storeId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AttributeDelete200Response> localVarResponse = ProductOptionValueDeleteWithHttpInfo(optionId, optionValueId, productId, storeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.option.value.delete Product option value delete.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionId">Defines option id where the value should be deleted</param>
        /// <param name="optionValueId">Defines option value id that should be deleted</param>
        /// <param name="productId">Defines product id where the option value should be deleted</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttributeDelete200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<AttributeDelete200Response> ProductOptionValueDeleteWithHttpInfo(string optionId, string optionValueId, string productId, string? storeId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'optionId' is set
            if (optionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'optionId' when calling ProductApi->ProductOptionValueDelete");
            }

            // verify the required parameter 'optionValueId' is set
            if (optionValueId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'optionValueId' when calling ProductApi->ProductOptionValueDelete");
            }

            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->ProductOptionValueDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "option_id", optionId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "option_value_id", optionValueId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_id", productId));
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductOptionValueDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<AttributeDelete200Response>("/product.option.value.delete.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductOptionValueDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.option.value.delete Product option value delete.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionId">Defines option id where the value should be deleted</param>
        /// <param name="optionValueId">Defines option value id that should be deleted</param>
        /// <param name="productId">Defines product id where the option value should be deleted</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttributeDelete200Response</returns>
        public async System.Threading.Tasks.Task<AttributeDelete200Response> ProductOptionValueDeleteAsync(string optionId, string optionValueId, string productId, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AttributeDelete200Response> localVarResponse = await ProductOptionValueDeleteWithHttpInfoAsync(optionId, optionValueId, productId, storeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.option.value.delete Product option value delete.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionId">Defines option id where the value should be deleted</param>
        /// <param name="optionValueId">Defines option value id that should be deleted</param>
        /// <param name="productId">Defines product id where the option value should be deleted</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttributeDelete200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AttributeDelete200Response>> ProductOptionValueDeleteWithHttpInfoAsync(string optionId, string optionValueId, string productId, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'optionId' is set
            if (optionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'optionId' when calling ProductApi->ProductOptionValueDelete");
            }

            // verify the required parameter 'optionValueId' is set
            if (optionValueId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'optionValueId' when calling ProductApi->ProductOptionValueDelete");
            }

            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->ProductOptionValueDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "option_id", optionId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "option_value_id", optionValueId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_id", productId));
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductOptionValueDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<AttributeDelete200Response>("/product.option.value.delete.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductOptionValueDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.option.value.update Update product option item from option.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the option value should be updated</param>
        /// <param name="optionId">Defines option id where the value has to be updated</param>
        /// <param name="optionValueId">Defines value id that has to be assigned</param>
        /// <param name="optionValue">Defines option value that has to be added (optional)</param>
        /// <param name="price">Defines new product option price (optional)</param>
        /// <param name="quantity">Defines new products&#39; options quantity (optional)</param>
        /// <param name="displayValue">Defines the value that will be displayed for the option value (optional)</param>
        /// <param name="clearCache">Is cache clear required (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountConfigUpdate200Response</returns>
        public AccountConfigUpdate200Response ProductOptionValueUpdate(string productId, string optionId, string optionValueId, string? optionValue = default(string?), decimal? price = default(decimal?), decimal? quantity = default(decimal?), string? displayValue = default(string?), bool? clearCache = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AccountConfigUpdate200Response> localVarResponse = ProductOptionValueUpdateWithHttpInfo(productId, optionId, optionValueId, optionValue, price, quantity, displayValue, clearCache);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.option.value.update Update product option item from option.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the option value should be updated</param>
        /// <param name="optionId">Defines option id where the value has to be updated</param>
        /// <param name="optionValueId">Defines value id that has to be assigned</param>
        /// <param name="optionValue">Defines option value that has to be added (optional)</param>
        /// <param name="price">Defines new product option price (optional)</param>
        /// <param name="quantity">Defines new products&#39; options quantity (optional)</param>
        /// <param name="displayValue">Defines the value that will be displayed for the option value (optional)</param>
        /// <param name="clearCache">Is cache clear required (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountConfigUpdate200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<AccountConfigUpdate200Response> ProductOptionValueUpdateWithHttpInfo(string productId, string optionId, string optionValueId, string? optionValue = default(string?), decimal? price = default(decimal?), decimal? quantity = default(decimal?), string? displayValue = default(string?), bool? clearCache = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->ProductOptionValueUpdate");
            }

            // verify the required parameter 'optionId' is set
            if (optionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'optionId' when calling ProductApi->ProductOptionValueUpdate");
            }

            // verify the required parameter 'optionValueId' is set
            if (optionValueId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'optionValueId' when calling ProductApi->ProductOptionValueUpdate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_id", productId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "option_id", optionId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "option_value_id", optionValueId));
            if (optionValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "option_value", optionValue));
            }
            if (price != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "price", price));
            }
            if (quantity != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "quantity", quantity));
            }
            if (displayValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "display_value", displayValue));
            }
            if (clearCache != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "clear_cache", clearCache));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductOptionValueUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<AccountConfigUpdate200Response>("/product.option.value.update.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductOptionValueUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.option.value.update Update product option item from option.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the option value should be updated</param>
        /// <param name="optionId">Defines option id where the value has to be updated</param>
        /// <param name="optionValueId">Defines value id that has to be assigned</param>
        /// <param name="optionValue">Defines option value that has to be added (optional)</param>
        /// <param name="price">Defines new product option price (optional)</param>
        /// <param name="quantity">Defines new products&#39; options quantity (optional)</param>
        /// <param name="displayValue">Defines the value that will be displayed for the option value (optional)</param>
        /// <param name="clearCache">Is cache clear required (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountConfigUpdate200Response</returns>
        public async System.Threading.Tasks.Task<AccountConfigUpdate200Response> ProductOptionValueUpdateAsync(string productId, string optionId, string optionValueId, string? optionValue = default(string?), decimal? price = default(decimal?), decimal? quantity = default(decimal?), string? displayValue = default(string?), bool? clearCache = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AccountConfigUpdate200Response> localVarResponse = await ProductOptionValueUpdateWithHttpInfoAsync(productId, optionId, optionValueId, optionValue, price, quantity, displayValue, clearCache, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.option.value.update Update product option item from option.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the option value should be updated</param>
        /// <param name="optionId">Defines option id where the value has to be updated</param>
        /// <param name="optionValueId">Defines value id that has to be assigned</param>
        /// <param name="optionValue">Defines option value that has to be added (optional)</param>
        /// <param name="price">Defines new product option price (optional)</param>
        /// <param name="quantity">Defines new products&#39; options quantity (optional)</param>
        /// <param name="displayValue">Defines the value that will be displayed for the option value (optional)</param>
        /// <param name="clearCache">Is cache clear required (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountConfigUpdate200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AccountConfigUpdate200Response>> ProductOptionValueUpdateWithHttpInfoAsync(string productId, string optionId, string optionValueId, string? optionValue = default(string?), decimal? price = default(decimal?), decimal? quantity = default(decimal?), string? displayValue = default(string?), bool? clearCache = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->ProductOptionValueUpdate");
            }

            // verify the required parameter 'optionId' is set
            if (optionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'optionId' when calling ProductApi->ProductOptionValueUpdate");
            }

            // verify the required parameter 'optionValueId' is set
            if (optionValueId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'optionValueId' when calling ProductApi->ProductOptionValueUpdate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_id", productId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "option_id", optionId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "option_value_id", optionValueId));
            if (optionValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "option_value", optionValue));
            }
            if (price != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "price", price));
            }
            if (quantity != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "quantity", quantity));
            }
            if (displayValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "display_value", displayValue));
            }
            if (clearCache != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "clear_cache", clearCache));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductOptionValueUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<AccountConfigUpdate200Response>("/product.option.value.update.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductOptionValueUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.price.add Add some prices to the product.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productPriceAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CartValidate200Response</returns>
        public CartValidate200Response ProductPriceAdd(ProductPriceAdd productPriceAdd, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CartValidate200Response> localVarResponse = ProductPriceAddWithHttpInfo(productPriceAdd);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.price.add Add some prices to the product.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productPriceAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CartValidate200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<CartValidate200Response> ProductPriceAddWithHttpInfo(ProductPriceAdd productPriceAdd, int operationIndex = 0)
        {
            // verify the required parameter 'productPriceAdd' is set
            if (productPriceAdd == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productPriceAdd' when calling ProductApi->ProductPriceAdd");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productPriceAdd;

            localVarRequestOptions.Operation = "ProductApi.ProductPriceAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CartValidate200Response>("/product.price.add.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductPriceAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.price.add Add some prices to the product.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productPriceAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CartValidate200Response</returns>
        public async System.Threading.Tasks.Task<CartValidate200Response> ProductPriceAddAsync(ProductPriceAdd productPriceAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CartValidate200Response> localVarResponse = await ProductPriceAddWithHttpInfoAsync(productPriceAdd, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.price.add Add some prices to the product.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productPriceAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CartValidate200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CartValidate200Response>> ProductPriceAddWithHttpInfoAsync(ProductPriceAdd productPriceAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'productPriceAdd' is set
            if (productPriceAdd == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productPriceAdd' when calling ProductApi->ProductPriceAdd");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productPriceAdd;

            localVarRequestOptions.Operation = "ProductApi.ProductPriceAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CartValidate200Response>("/product.price.add.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductPriceAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.price.delete Delete some prices of the product
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines the product where the price has to be deleted</param>
        /// <param name="groupPrices">Defines product&#39;s group prices (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttributeDelete200Response</returns>
        public AttributeDelete200Response ProductPriceDelete(string productId, string? groupPrices = default(string?), string? storeId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AttributeDelete200Response> localVarResponse = ProductPriceDeleteWithHttpInfo(productId, groupPrices, storeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.price.delete Delete some prices of the product
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines the product where the price has to be deleted</param>
        /// <param name="groupPrices">Defines product&#39;s group prices (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttributeDelete200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<AttributeDelete200Response> ProductPriceDeleteWithHttpInfo(string productId, string? groupPrices = default(string?), string? storeId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->ProductPriceDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_id", productId));
            if (groupPrices != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "group_prices", groupPrices));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductPriceDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<AttributeDelete200Response>("/product.price.delete.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductPriceDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.price.delete Delete some prices of the product
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines the product where the price has to be deleted</param>
        /// <param name="groupPrices">Defines product&#39;s group prices (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttributeDelete200Response</returns>
        public async System.Threading.Tasks.Task<AttributeDelete200Response> ProductPriceDeleteAsync(string productId, string? groupPrices = default(string?), string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AttributeDelete200Response> localVarResponse = await ProductPriceDeleteWithHttpInfoAsync(productId, groupPrices, storeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.price.delete Delete some prices of the product
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines the product where the price has to be deleted</param>
        /// <param name="groupPrices">Defines product&#39;s group prices (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttributeDelete200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AttributeDelete200Response>> ProductPriceDeleteWithHttpInfoAsync(string productId, string? groupPrices = default(string?), string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->ProductPriceDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_id", productId));
            if (groupPrices != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "group_prices", groupPrices));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductPriceDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<AttributeDelete200Response>("/product.price.delete.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductPriceDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.price.update Update some prices of the product.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productPriceUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountConfigUpdate200Response</returns>
        public AccountConfigUpdate200Response ProductPriceUpdate(ProductPriceUpdate productPriceUpdate, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AccountConfigUpdate200Response> localVarResponse = ProductPriceUpdateWithHttpInfo(productPriceUpdate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.price.update Update some prices of the product.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productPriceUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountConfigUpdate200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<AccountConfigUpdate200Response> ProductPriceUpdateWithHttpInfo(ProductPriceUpdate productPriceUpdate, int operationIndex = 0)
        {
            // verify the required parameter 'productPriceUpdate' is set
            if (productPriceUpdate == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productPriceUpdate' when calling ProductApi->ProductPriceUpdate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productPriceUpdate;

            localVarRequestOptions.Operation = "ProductApi.ProductPriceUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<AccountConfigUpdate200Response>("/product.price.update.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductPriceUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.price.update Update some prices of the product.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productPriceUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountConfigUpdate200Response</returns>
        public async System.Threading.Tasks.Task<AccountConfigUpdate200Response> ProductPriceUpdateAsync(ProductPriceUpdate productPriceUpdate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AccountConfigUpdate200Response> localVarResponse = await ProductPriceUpdateWithHttpInfoAsync(productPriceUpdate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.price.update Update some prices of the product.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productPriceUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountConfigUpdate200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AccountConfigUpdate200Response>> ProductPriceUpdateWithHttpInfoAsync(ProductPriceUpdate productPriceUpdate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'productPriceUpdate' is set
            if (productPriceUpdate == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productPriceUpdate' when calling ProductApi->ProductPriceUpdate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productPriceUpdate;

            localVarRequestOptions.Operation = "ProductApi.ProductPriceUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<AccountConfigUpdate200Response>("/product.price.update.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductPriceUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.review.list Get reviews of a specific product.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product id</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="ids">Retrieves reviews specified by ids (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="status">Defines status (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,customer_id,email,message,status,product_id,nick_name,summary,rating,ratings,status,created_time&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelResponseProductReviewList</returns>
        public ModelResponseProductReviewList ProductReviewList(string productId, int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? ids = default(string?), string? storeId = default(string?), string? status = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModelResponseProductReviewList> localVarResponse = ProductReviewListWithHttpInfo(productId, start, count, pageCursor, ids, storeId, status, responseFields, varParams, exclude);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.review.list Get reviews of a specific product.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product id</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="ids">Retrieves reviews specified by ids (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="status">Defines status (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,customer_id,email,message,status,product_id,nick_name,summary,rating,ratings,status,created_time&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelResponseProductReviewList</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModelResponseProductReviewList> ProductReviewListWithHttpInfo(string productId, int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? ids = default(string?), string? storeId = default(string?), string? status = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->ProductReviewList");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (pageCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_cursor", pageCursor));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_id", productId));
            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductReviewList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ModelResponseProductReviewList>("/product.review.list.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductReviewList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.review.list Get reviews of a specific product.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product id</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="ids">Retrieves reviews specified by ids (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="status">Defines status (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,customer_id,email,message,status,product_id,nick_name,summary,rating,ratings,status,created_time&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelResponseProductReviewList</returns>
        public async System.Threading.Tasks.Task<ModelResponseProductReviewList> ProductReviewListAsync(string productId, int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? ids = default(string?), string? storeId = default(string?), string? status = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModelResponseProductReviewList> localVarResponse = await ProductReviewListWithHttpInfoAsync(productId, start, count, pageCursor, ids, storeId, status, responseFields, varParams, exclude, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.review.list Get reviews of a specific product.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Product id</param>
        /// <param name="start">This parameter sets the number from which you want to get entities (optional, default to 0)</param>
        /// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)</param>
        /// <param name="pageCursor">Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)</param>
        /// <param name="ids">Retrieves reviews specified by ids (optional)</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="status">Defines status (optional)</param>
        /// <param name="responseFields">Set this parameter in order to choose which entity fields you want to retrieve (optional)</param>
        /// <param name="varParams">Set this parameter in order to choose which entity fields you want to retrieve (optional, default to &quot;id,customer_id,email,message,status,product_id,nick_name,summary,rating,ratings,status,created_time&quot;)</param>
        /// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelResponseProductReviewList)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModelResponseProductReviewList>> ProductReviewListWithHttpInfoAsync(string productId, int? start = default(int?), int? count = default(int?), string? pageCursor = default(string?), string? ids = default(string?), string? storeId = default(string?), string? status = default(string?), string? responseFields = default(string?), string? varParams = default(string?), string? exclude = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->ProductReviewList");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (pageCursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_cursor", pageCursor));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_id", productId));
            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (responseFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "response_fields", responseFields));
            }
            if (varParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "params", varParams));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductReviewList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ModelResponseProductReviewList>("/product.review.list.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductReviewList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.store.assign Assign product to store
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines id of the product which should be assigned to a store</param>
        /// <param name="storeId">Defines id of the store product should be assigned to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountConfigUpdate200Response</returns>
        public AccountConfigUpdate200Response ProductStoreAssign(string productId, string storeId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AccountConfigUpdate200Response> localVarResponse = ProductStoreAssignWithHttpInfo(productId, storeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.store.assign Assign product to store
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines id of the product which should be assigned to a store</param>
        /// <param name="storeId">Defines id of the store product should be assigned to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountConfigUpdate200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<AccountConfigUpdate200Response> ProductStoreAssignWithHttpInfo(string productId, string storeId, int operationIndex = 0)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->ProductStoreAssign");
            }

            // verify the required parameter 'storeId' is set
            if (storeId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'storeId' when calling ProductApi->ProductStoreAssign");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_id", productId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));

            localVarRequestOptions.Operation = "ProductApi.ProductStoreAssign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AccountConfigUpdate200Response>("/product.store.assign.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductStoreAssign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.store.assign Assign product to store
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines id of the product which should be assigned to a store</param>
        /// <param name="storeId">Defines id of the store product should be assigned to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountConfigUpdate200Response</returns>
        public async System.Threading.Tasks.Task<AccountConfigUpdate200Response> ProductStoreAssignAsync(string productId, string storeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AccountConfigUpdate200Response> localVarResponse = await ProductStoreAssignWithHttpInfoAsync(productId, storeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.store.assign Assign product to store
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines id of the product which should be assigned to a store</param>
        /// <param name="storeId">Defines id of the store product should be assigned to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountConfigUpdate200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AccountConfigUpdate200Response>> ProductStoreAssignWithHttpInfoAsync(string productId, string storeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->ProductStoreAssign");
            }

            // verify the required parameter 'storeId' is set
            if (storeId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'storeId' when calling ProductApi->ProductStoreAssign");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_id", productId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));

            localVarRequestOptions.Operation = "ProductApi.ProductStoreAssign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AccountConfigUpdate200Response>("/product.store.assign.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductStoreAssign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.tax.add Add tax class and tax rate to store and assign to product.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productTaxAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductTaxAdd200Response</returns>
        public ProductTaxAdd200Response ProductTaxAdd(ProductTaxAdd productTaxAdd, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ProductTaxAdd200Response> localVarResponse = ProductTaxAddWithHttpInfo(productTaxAdd);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.tax.add Add tax class and tax rate to store and assign to product.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productTaxAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductTaxAdd200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ProductTaxAdd200Response> ProductTaxAddWithHttpInfo(ProductTaxAdd productTaxAdd, int operationIndex = 0)
        {
            // verify the required parameter 'productTaxAdd' is set
            if (productTaxAdd == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productTaxAdd' when calling ProductApi->ProductTaxAdd");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productTaxAdd;

            localVarRequestOptions.Operation = "ProductApi.ProductTaxAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductTaxAdd200Response>("/product.tax.add.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductTaxAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.tax.add Add tax class and tax rate to store and assign to product.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productTaxAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductTaxAdd200Response</returns>
        public async System.Threading.Tasks.Task<ProductTaxAdd200Response> ProductTaxAddAsync(ProductTaxAdd productTaxAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ProductTaxAdd200Response> localVarResponse = await ProductTaxAddWithHttpInfoAsync(productTaxAdd, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.tax.add Add tax class and tax rate to store and assign to product.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productTaxAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductTaxAdd200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ProductTaxAdd200Response>> ProductTaxAddWithHttpInfoAsync(ProductTaxAdd productTaxAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'productTaxAdd' is set
            if (productTaxAdd == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productTaxAdd' when calling ProductApi->ProductTaxAdd");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productTaxAdd;

            localVarRequestOptions.Operation = "ProductApi.ProductTaxAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductTaxAdd200Response>("/product.tax.add.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductTaxAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.update This method can be used to update certain product data. The list of supported parameters depends on the specific platform. Please transmit only those parameters that are supported by the particular platform. Please note that to update the product quantity, it is recommended to use relative parameters (increase_quantity or reduce_quantity) to avoid unexpected overwrites on heavily loaded stores.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountConfigUpdate200Response</returns>
        public AccountConfigUpdate200Response ProductUpdate(ProductUpdate productUpdate, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AccountConfigUpdate200Response> localVarResponse = ProductUpdateWithHttpInfo(productUpdate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.update This method can be used to update certain product data. The list of supported parameters depends on the specific platform. Please transmit only those parameters that are supported by the particular platform. Please note that to update the product quantity, it is recommended to use relative parameters (increase_quantity or reduce_quantity) to avoid unexpected overwrites on heavily loaded stores.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountConfigUpdate200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<AccountConfigUpdate200Response> ProductUpdateWithHttpInfo(ProductUpdate productUpdate, int operationIndex = 0)
        {
            // verify the required parameter 'productUpdate' is set
            if (productUpdate == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productUpdate' when calling ProductApi->ProductUpdate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productUpdate;

            localVarRequestOptions.Operation = "ProductApi.ProductUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<AccountConfigUpdate200Response>("/product.update.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.update This method can be used to update certain product data. The list of supported parameters depends on the specific platform. Please transmit only those parameters that are supported by the particular platform. Please note that to update the product quantity, it is recommended to use relative parameters (increase_quantity or reduce_quantity) to avoid unexpected overwrites on heavily loaded stores.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountConfigUpdate200Response</returns>
        public async System.Threading.Tasks.Task<AccountConfigUpdate200Response> ProductUpdateAsync(ProductUpdate productUpdate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AccountConfigUpdate200Response> localVarResponse = await ProductUpdateWithHttpInfoAsync(productUpdate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.update This method can be used to update certain product data. The list of supported parameters depends on the specific platform. Please transmit only those parameters that are supported by the particular platform. Please note that to update the product quantity, it is recommended to use relative parameters (increase_quantity or reduce_quantity) to avoid unexpected overwrites on heavily loaded stores.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountConfigUpdate200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AccountConfigUpdate200Response>> ProductUpdateWithHttpInfoAsync(ProductUpdate productUpdate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'productUpdate' is set
            if (productUpdate == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productUpdate' when calling ProductApi->ProductUpdate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productUpdate;

            localVarRequestOptions.Operation = "ProductApi.ProductUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<AccountConfigUpdate200Response>("/product.update.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.update.batch Update products on the store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productUpdateBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoryAddBatch200Response</returns>
        public CategoryAddBatch200Response ProductUpdateBatch(ProductUpdateBatch productUpdateBatch, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CategoryAddBatch200Response> localVarResponse = ProductUpdateBatchWithHttpInfo(productUpdateBatch);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.update.batch Update products on the store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productUpdateBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoryAddBatch200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<CategoryAddBatch200Response> ProductUpdateBatchWithHttpInfo(ProductUpdateBatch productUpdateBatch, int operationIndex = 0)
        {
            // verify the required parameter 'productUpdateBatch' is set
            if (productUpdateBatch == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productUpdateBatch' when calling ProductApi->ProductUpdateBatch");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productUpdateBatch;

            localVarRequestOptions.Operation = "ProductApi.ProductUpdateBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CategoryAddBatch200Response>("/product.update.batch.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductUpdateBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.update.batch Update products on the store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productUpdateBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryAddBatch200Response</returns>
        public async System.Threading.Tasks.Task<CategoryAddBatch200Response> ProductUpdateBatchAsync(ProductUpdateBatch productUpdateBatch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CategoryAddBatch200Response> localVarResponse = await ProductUpdateBatchWithHttpInfoAsync(productUpdateBatch, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.update.batch Update products on the store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productUpdateBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryAddBatch200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CategoryAddBatch200Response>> ProductUpdateBatchWithHttpInfoAsync(ProductUpdateBatch productUpdateBatch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'productUpdateBatch' is set
            if (productUpdateBatch == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productUpdateBatch' when calling ProductApi->ProductUpdateBatch");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productUpdateBatch;

            localVarRequestOptions.Operation = "ProductApi.ProductUpdateBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CategoryAddBatch200Response>("/product.update.batch.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductUpdateBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.variant.add Add variant to product.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductVariantAdd200Response</returns>
        public ProductVariantAdd200Response ProductVariantAdd(ProductVariantAdd productVariantAdd, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ProductVariantAdd200Response> localVarResponse = ProductVariantAddWithHttpInfo(productVariantAdd);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.variant.add Add variant to product.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductVariantAdd200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ProductVariantAdd200Response> ProductVariantAddWithHttpInfo(ProductVariantAdd productVariantAdd, int operationIndex = 0)
        {
            // verify the required parameter 'productVariantAdd' is set
            if (productVariantAdd == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productVariantAdd' when calling ProductApi->ProductVariantAdd");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productVariantAdd;

            localVarRequestOptions.Operation = "ProductApi.ProductVariantAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductVariantAdd200Response>("/product.variant.add.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductVariantAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.variant.add Add variant to product.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductVariantAdd200Response</returns>
        public async System.Threading.Tasks.Task<ProductVariantAdd200Response> ProductVariantAddAsync(ProductVariantAdd productVariantAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ProductVariantAdd200Response> localVarResponse = await ProductVariantAddWithHttpInfoAsync(productVariantAdd, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.variant.add Add variant to product.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductVariantAdd200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ProductVariantAdd200Response>> ProductVariantAddWithHttpInfoAsync(ProductVariantAdd productVariantAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'productVariantAdd' is set
            if (productVariantAdd == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productVariantAdd' when calling ProductApi->ProductVariantAdd");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productVariantAdd;

            localVarRequestOptions.Operation = "ProductApi.ProductVariantAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductVariantAdd200Response>("/product.variant.add.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductVariantAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.variant.add.batch Add new product variants to the store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantAddBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoryAddBatch200Response</returns>
        public CategoryAddBatch200Response ProductVariantAddBatch(ProductVariantAddBatch productVariantAddBatch, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CategoryAddBatch200Response> localVarResponse = ProductVariantAddBatchWithHttpInfo(productVariantAddBatch);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.variant.add.batch Add new product variants to the store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantAddBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoryAddBatch200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<CategoryAddBatch200Response> ProductVariantAddBatchWithHttpInfo(ProductVariantAddBatch productVariantAddBatch, int operationIndex = 0)
        {
            // verify the required parameter 'productVariantAddBatch' is set
            if (productVariantAddBatch == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productVariantAddBatch' when calling ProductApi->ProductVariantAddBatch");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productVariantAddBatch;

            localVarRequestOptions.Operation = "ProductApi.ProductVariantAddBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CategoryAddBatch200Response>("/product.variant.add.batch.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductVariantAddBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.variant.add.batch Add new product variants to the store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantAddBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryAddBatch200Response</returns>
        public async System.Threading.Tasks.Task<CategoryAddBatch200Response> ProductVariantAddBatchAsync(ProductVariantAddBatch productVariantAddBatch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CategoryAddBatch200Response> localVarResponse = await ProductVariantAddBatchWithHttpInfoAsync(productVariantAddBatch, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.variant.add.batch Add new product variants to the store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantAddBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryAddBatch200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CategoryAddBatch200Response>> ProductVariantAddBatchWithHttpInfoAsync(ProductVariantAddBatch productVariantAddBatch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'productVariantAddBatch' is set
            if (productVariantAddBatch == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productVariantAddBatch' when calling ProductApi->ProductVariantAddBatch");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productVariantAddBatch;

            localVarRequestOptions.Operation = "ProductApi.ProductVariantAddBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CategoryAddBatch200Response>("/product.variant.add.batch.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductVariantAddBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.variant.delete Delete variant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Defines variant removal, specified by variant id</param>
        /// <param name="productId">Defines product&#39;s id where the variant has to be deleted</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttributeValueDelete200Response</returns>
        public AttributeValueDelete200Response ProductVariantDelete(string id, string productId, string? storeId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AttributeValueDelete200Response> localVarResponse = ProductVariantDeleteWithHttpInfo(id, productId, storeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.variant.delete Delete variant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Defines variant removal, specified by variant id</param>
        /// <param name="productId">Defines product&#39;s id where the variant has to be deleted</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttributeValueDelete200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<AttributeValueDelete200Response> ProductVariantDeleteWithHttpInfo(string id, string productId, string? storeId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling ProductApi->ProductVariantDelete");
            }

            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->ProductVariantDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_id", productId));
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductVariantDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<AttributeValueDelete200Response>("/product.variant.delete.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductVariantDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.variant.delete Delete variant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Defines variant removal, specified by variant id</param>
        /// <param name="productId">Defines product&#39;s id where the variant has to be deleted</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttributeValueDelete200Response</returns>
        public async System.Threading.Tasks.Task<AttributeValueDelete200Response> ProductVariantDeleteAsync(string id, string productId, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AttributeValueDelete200Response> localVarResponse = await ProductVariantDeleteWithHttpInfoAsync(id, productId, storeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.variant.delete Delete variant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Defines variant removal, specified by variant id</param>
        /// <param name="productId">Defines product&#39;s id where the variant has to be deleted</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttributeValueDelete200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AttributeValueDelete200Response>> ProductVariantDeleteWithHttpInfoAsync(string id, string productId, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling ProductApi->ProductVariantDelete");
            }

            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->ProductVariantDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_id", productId));
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductVariantDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<AttributeValueDelete200Response>("/product.variant.delete.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductVariantDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.variant.delete.batch Remove product variants from the store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantDeleteBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoryAddBatch200Response</returns>
        public CategoryAddBatch200Response ProductVariantDeleteBatch(ProductVariantDeleteBatch productVariantDeleteBatch, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CategoryAddBatch200Response> localVarResponse = ProductVariantDeleteBatchWithHttpInfo(productVariantDeleteBatch);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.variant.delete.batch Remove product variants from the store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantDeleteBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoryAddBatch200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<CategoryAddBatch200Response> ProductVariantDeleteBatchWithHttpInfo(ProductVariantDeleteBatch productVariantDeleteBatch, int operationIndex = 0)
        {
            // verify the required parameter 'productVariantDeleteBatch' is set
            if (productVariantDeleteBatch == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productVariantDeleteBatch' when calling ProductApi->ProductVariantDeleteBatch");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productVariantDeleteBatch;

            localVarRequestOptions.Operation = "ProductApi.ProductVariantDeleteBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CategoryAddBatch200Response>("/product.variant.delete.batch.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductVariantDeleteBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.variant.delete.batch Remove product variants from the store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantDeleteBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryAddBatch200Response</returns>
        public async System.Threading.Tasks.Task<CategoryAddBatch200Response> ProductVariantDeleteBatchAsync(ProductVariantDeleteBatch productVariantDeleteBatch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CategoryAddBatch200Response> localVarResponse = await ProductVariantDeleteBatchWithHttpInfoAsync(productVariantDeleteBatch, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.variant.delete.batch Remove product variants from the store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantDeleteBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryAddBatch200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CategoryAddBatch200Response>> ProductVariantDeleteBatchWithHttpInfoAsync(ProductVariantDeleteBatch productVariantDeleteBatch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'productVariantDeleteBatch' is set
            if (productVariantDeleteBatch == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productVariantDeleteBatch' when calling ProductApi->ProductVariantDeleteBatch");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productVariantDeleteBatch;

            localVarRequestOptions.Operation = "ProductApi.ProductVariantDeleteBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CategoryAddBatch200Response>("/product.variant.delete.batch.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductVariantDeleteBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.variant.image.add Add image to product
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantImageAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductVariantImageAdd200Response</returns>
        public ProductVariantImageAdd200Response ProductVariantImageAdd(ProductVariantImageAdd productVariantImageAdd, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ProductVariantImageAdd200Response> localVarResponse = ProductVariantImageAddWithHttpInfo(productVariantImageAdd);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.variant.image.add Add image to product
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantImageAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductVariantImageAdd200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ProductVariantImageAdd200Response> ProductVariantImageAddWithHttpInfo(ProductVariantImageAdd productVariantImageAdd, int operationIndex = 0)
        {
            // verify the required parameter 'productVariantImageAdd' is set
            if (productVariantImageAdd == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productVariantImageAdd' when calling ProductApi->ProductVariantImageAdd");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productVariantImageAdd;

            localVarRequestOptions.Operation = "ProductApi.ProductVariantImageAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductVariantImageAdd200Response>("/product.variant.image.add.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductVariantImageAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.variant.image.add Add image to product
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantImageAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductVariantImageAdd200Response</returns>
        public async System.Threading.Tasks.Task<ProductVariantImageAdd200Response> ProductVariantImageAddAsync(ProductVariantImageAdd productVariantImageAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ProductVariantImageAdd200Response> localVarResponse = await ProductVariantImageAddWithHttpInfoAsync(productVariantImageAdd, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.variant.image.add Add image to product
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantImageAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductVariantImageAdd200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ProductVariantImageAdd200Response>> ProductVariantImageAddWithHttpInfoAsync(ProductVariantImageAdd productVariantImageAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'productVariantImageAdd' is set
            if (productVariantImageAdd == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productVariantImageAdd' when calling ProductApi->ProductVariantImageAdd");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productVariantImageAdd;

            localVarRequestOptions.Operation = "ProductApi.ProductVariantImageAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductVariantImageAdd200Response>("/product.variant.image.add.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductVariantImageAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.variant.image.delete Delete  image to product
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the variant image should be deleted</param>
        /// <param name="productVariantId">Defines product&#39;s variants specified by variant id</param>
        /// <param name="id">Entity id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttributeDelete200Response</returns>
        public AttributeDelete200Response ProductVariantImageDelete(string productId, string productVariantId, string id, string? storeId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AttributeDelete200Response> localVarResponse = ProductVariantImageDeleteWithHttpInfo(productId, productVariantId, id, storeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.variant.image.delete Delete  image to product
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the variant image should be deleted</param>
        /// <param name="productVariantId">Defines product&#39;s variants specified by variant id</param>
        /// <param name="id">Entity id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttributeDelete200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<AttributeDelete200Response> ProductVariantImageDeleteWithHttpInfo(string productId, string productVariantId, string id, string? storeId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->ProductVariantImageDelete");
            }

            // verify the required parameter 'productVariantId' is set
            if (productVariantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productVariantId' when calling ProductApi->ProductVariantImageDelete");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling ProductApi->ProductVariantImageDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_id", productId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_variant_id", productVariantId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductVariantImageDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<AttributeDelete200Response>("/product.variant.image.delete.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductVariantImageDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.variant.image.delete Delete  image to product
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the variant image should be deleted</param>
        /// <param name="productVariantId">Defines product&#39;s variants specified by variant id</param>
        /// <param name="id">Entity id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttributeDelete200Response</returns>
        public async System.Threading.Tasks.Task<AttributeDelete200Response> ProductVariantImageDeleteAsync(string productId, string productVariantId, string id, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AttributeDelete200Response> localVarResponse = await ProductVariantImageDeleteWithHttpInfoAsync(productId, productVariantId, id, storeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.variant.image.delete Delete  image to product
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Defines product id where the variant image should be deleted</param>
        /// <param name="productVariantId">Defines product&#39;s variants specified by variant id</param>
        /// <param name="id">Entity id</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttributeDelete200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AttributeDelete200Response>> ProductVariantImageDeleteWithHttpInfoAsync(string productId, string productVariantId, string id, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->ProductVariantImageDelete");
            }

            // verify the required parameter 'productVariantId' is set
            if (productVariantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productVariantId' when calling ProductApi->ProductVariantImageDelete");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling ProductApi->ProductVariantImageDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_id", productId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_variant_id", productVariantId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductVariantImageDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<AttributeDelete200Response>("/product.variant.image.delete.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductVariantImageDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.variant.price.add Add some prices to the product variant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantPriceAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CartValidate200Response</returns>
        public CartValidate200Response ProductVariantPriceAdd(ProductVariantPriceAdd productVariantPriceAdd, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CartValidate200Response> localVarResponse = ProductVariantPriceAddWithHttpInfo(productVariantPriceAdd);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.variant.price.add Add some prices to the product variant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantPriceAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CartValidate200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<CartValidate200Response> ProductVariantPriceAddWithHttpInfo(ProductVariantPriceAdd productVariantPriceAdd, int operationIndex = 0)
        {
            // verify the required parameter 'productVariantPriceAdd' is set
            if (productVariantPriceAdd == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productVariantPriceAdd' when calling ProductApi->ProductVariantPriceAdd");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productVariantPriceAdd;

            localVarRequestOptions.Operation = "ProductApi.ProductVariantPriceAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CartValidate200Response>("/product.variant.price.add.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductVariantPriceAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.variant.price.add Add some prices to the product variant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantPriceAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CartValidate200Response</returns>
        public async System.Threading.Tasks.Task<CartValidate200Response> ProductVariantPriceAddAsync(ProductVariantPriceAdd productVariantPriceAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CartValidate200Response> localVarResponse = await ProductVariantPriceAddWithHttpInfoAsync(productVariantPriceAdd, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.variant.price.add Add some prices to the product variant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantPriceAdd"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CartValidate200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CartValidate200Response>> ProductVariantPriceAddWithHttpInfoAsync(ProductVariantPriceAdd productVariantPriceAdd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'productVariantPriceAdd' is set
            if (productVariantPriceAdd == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productVariantPriceAdd' when calling ProductApi->ProductVariantPriceAdd");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productVariantPriceAdd;

            localVarRequestOptions.Operation = "ProductApi.ProductVariantPriceAdd";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CartValidate200Response>("/product.variant.price.add.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductVariantPriceAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.variant.price.delete Delete some prices of the product variant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Defines the variant where the price has to be deleted</param>
        /// <param name="productId">Product id</param>
        /// <param name="groupPrices">Defines variants&#39;s group prices</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttributeDelete200Response</returns>
        public AttributeDelete200Response ProductVariantPriceDelete(string id, string productId, string groupPrices, string? storeId = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AttributeDelete200Response> localVarResponse = ProductVariantPriceDeleteWithHttpInfo(id, productId, groupPrices, storeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.variant.price.delete Delete some prices of the product variant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Defines the variant where the price has to be deleted</param>
        /// <param name="productId">Product id</param>
        /// <param name="groupPrices">Defines variants&#39;s group prices</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttributeDelete200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<AttributeDelete200Response> ProductVariantPriceDeleteWithHttpInfo(string id, string productId, string groupPrices, string? storeId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling ProductApi->ProductVariantPriceDelete");
            }

            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->ProductVariantPriceDelete");
            }

            // verify the required parameter 'groupPrices' is set
            if (groupPrices == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'groupPrices' when calling ProductApi->ProductVariantPriceDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_id", productId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "group_prices", groupPrices));
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductVariantPriceDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<AttributeDelete200Response>("/product.variant.price.delete.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductVariantPriceDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.variant.price.delete Delete some prices of the product variant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Defines the variant where the price has to be deleted</param>
        /// <param name="productId">Product id</param>
        /// <param name="groupPrices">Defines variants&#39;s group prices</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttributeDelete200Response</returns>
        public async System.Threading.Tasks.Task<AttributeDelete200Response> ProductVariantPriceDeleteAsync(string id, string productId, string groupPrices, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AttributeDelete200Response> localVarResponse = await ProductVariantPriceDeleteWithHttpInfoAsync(id, productId, groupPrices, storeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.variant.price.delete Delete some prices of the product variant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Defines the variant where the price has to be deleted</param>
        /// <param name="productId">Product id</param>
        /// <param name="groupPrices">Defines variants&#39;s group prices</param>
        /// <param name="storeId">Store Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttributeDelete200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AttributeDelete200Response>> ProductVariantPriceDeleteWithHttpInfoAsync(string id, string productId, string groupPrices, string? storeId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling ProductApi->ProductVariantPriceDelete");
            }

            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductApi->ProductVariantPriceDelete");
            }

            // verify the required parameter 'groupPrices' is set
            if (groupPrices == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'groupPrices' when calling ProductApi->ProductVariantPriceDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "product_id", productId));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "group_prices", groupPrices));
            if (storeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "store_id", storeId));
            }

            localVarRequestOptions.Operation = "ProductApi.ProductVariantPriceDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<AttributeDelete200Response>("/product.variant.price.delete.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductVariantPriceDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.variant.price.update Update some prices of the product variant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantPriceUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountConfigUpdate200Response</returns>
        public AccountConfigUpdate200Response ProductVariantPriceUpdate(ProductVariantPriceUpdate productVariantPriceUpdate, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AccountConfigUpdate200Response> localVarResponse = ProductVariantPriceUpdateWithHttpInfo(productVariantPriceUpdate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.variant.price.update Update some prices of the product variant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantPriceUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountConfigUpdate200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<AccountConfigUpdate200Response> ProductVariantPriceUpdateWithHttpInfo(ProductVariantPriceUpdate productVariantPriceUpdate, int operationIndex = 0)
        {
            // verify the required parameter 'productVariantPriceUpdate' is set
            if (productVariantPriceUpdate == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productVariantPriceUpdate' when calling ProductApi->ProductVariantPriceUpdate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productVariantPriceUpdate;

            localVarRequestOptions.Operation = "ProductApi.ProductVariantPriceUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<AccountConfigUpdate200Response>("/product.variant.price.update.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductVariantPriceUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.variant.price.update Update some prices of the product variant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantPriceUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountConfigUpdate200Response</returns>
        public async System.Threading.Tasks.Task<AccountConfigUpdate200Response> ProductVariantPriceUpdateAsync(ProductVariantPriceUpdate productVariantPriceUpdate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AccountConfigUpdate200Response> localVarResponse = await ProductVariantPriceUpdateWithHttpInfoAsync(productVariantPriceUpdate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.variant.price.update Update some prices of the product variant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantPriceUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountConfigUpdate200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AccountConfigUpdate200Response>> ProductVariantPriceUpdateWithHttpInfoAsync(ProductVariantPriceUpdate productVariantPriceUpdate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'productVariantPriceUpdate' is set
            if (productVariantPriceUpdate == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productVariantPriceUpdate' when calling ProductApi->ProductVariantPriceUpdate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productVariantPriceUpdate;

            localVarRequestOptions.Operation = "ProductApi.ProductVariantPriceUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<AccountConfigUpdate200Response>("/product.variant.price.update.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductVariantPriceUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.variant.update Update variant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountConfigUpdate200Response</returns>
        public AccountConfigUpdate200Response ProductVariantUpdate(ProductVariantUpdate productVariantUpdate, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AccountConfigUpdate200Response> localVarResponse = ProductVariantUpdateWithHttpInfo(productVariantUpdate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.variant.update Update variant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountConfigUpdate200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<AccountConfigUpdate200Response> ProductVariantUpdateWithHttpInfo(ProductVariantUpdate productVariantUpdate, int operationIndex = 0)
        {
            // verify the required parameter 'productVariantUpdate' is set
            if (productVariantUpdate == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productVariantUpdate' when calling ProductApi->ProductVariantUpdate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productVariantUpdate;

            localVarRequestOptions.Operation = "ProductApi.ProductVariantUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<AccountConfigUpdate200Response>("/product.variant.update.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductVariantUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.variant.update Update variant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountConfigUpdate200Response</returns>
        public async System.Threading.Tasks.Task<AccountConfigUpdate200Response> ProductVariantUpdateAsync(ProductVariantUpdate productVariantUpdate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AccountConfigUpdate200Response> localVarResponse = await ProductVariantUpdateWithHttpInfoAsync(productVariantUpdate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.variant.update Update variant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountConfigUpdate200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AccountConfigUpdate200Response>> ProductVariantUpdateWithHttpInfoAsync(ProductVariantUpdate productVariantUpdate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'productVariantUpdate' is set
            if (productVariantUpdate == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productVariantUpdate' when calling ProductApi->ProductVariantUpdate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productVariantUpdate;

            localVarRequestOptions.Operation = "ProductApi.ProductVariantUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<AccountConfigUpdate200Response>("/product.variant.update.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductVariantUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.variant.update.batch Update products variants on the store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantUpdateBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoryAddBatch200Response</returns>
        public CategoryAddBatch200Response ProductVariantUpdateBatch(ProductVariantUpdateBatch productVariantUpdateBatch, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CategoryAddBatch200Response> localVarResponse = ProductVariantUpdateBatchWithHttpInfo(productVariantUpdateBatch);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.variant.update.batch Update products variants on the store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantUpdateBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoryAddBatch200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<CategoryAddBatch200Response> ProductVariantUpdateBatchWithHttpInfo(ProductVariantUpdateBatch productVariantUpdateBatch, int operationIndex = 0)
        {
            // verify the required parameter 'productVariantUpdateBatch' is set
            if (productVariantUpdateBatch == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productVariantUpdateBatch' when calling ProductApi->ProductVariantUpdateBatch");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productVariantUpdateBatch;

            localVarRequestOptions.Operation = "ProductApi.ProductVariantUpdateBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CategoryAddBatch200Response>("/product.variant.update.batch.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductVariantUpdateBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// product.variant.update.batch Update products variants on the store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantUpdateBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryAddBatch200Response</returns>
        public async System.Threading.Tasks.Task<CategoryAddBatch200Response> ProductVariantUpdateBatchAsync(ProductVariantUpdateBatch productVariantUpdateBatch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CategoryAddBatch200Response> localVarResponse = await ProductVariantUpdateBatchWithHttpInfoAsync(productVariantUpdateBatch, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// product.variant.update.batch Update products variants on the store.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productVariantUpdateBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryAddBatch200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CategoryAddBatch200Response>> ProductVariantUpdateBatchWithHttpInfoAsync(ProductVariantUpdateBatch productVariantUpdateBatch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'productVariantUpdateBatch' is set
            if (productVariantUpdateBatch == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'productVariantUpdateBatch' when calling ProductApi->ProductVariantUpdateBatch");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productVariantUpdateBatch;

            localVarRequestOptions.Operation = "ProductApi.ProductVariantUpdateBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (StoreKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-store-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-store-key", this.Configuration.GetApiKeyWithPrefix("x-store-key"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CategoryAddBatch200Response>("/product.variant.update.batch.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductVariantUpdateBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
