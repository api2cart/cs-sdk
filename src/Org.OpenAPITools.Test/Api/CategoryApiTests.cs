/*
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing CategoryApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class CategoryApiTests : IDisposable
    {
        private CategoryApi instance;

        public CategoryApiTests()
        {
            instance = new CategoryApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of CategoryApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' CategoryApi
            //Assert.IsType<CategoryApi>(instance);
        }

        /// <summary>
        /// Test CategoryAdd
        /// </summary>
        [Fact]
        public void CategoryAddTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string? description = null;
            //string? shortDescription = null;
            //string? parentId = null;
            //bool? avail = null;
            //string? createdTime = null;
            //string? modifiedTime = null;
            //int? sortOrder = null;
            //string? metaTitle = null;
            //string? metaDescription = null;
            //string? metaKeywords = null;
            //string? seoUrl = null;
            //string? storeId = null;
            //string? storesIds = null;
            //string? langId = null;
            //var response = instance.CategoryAdd(name, description, shortDescription, parentId, avail, createdTime, modifiedTime, sortOrder, metaTitle, metaDescription, metaKeywords, seoUrl, storeId, storesIds, langId);
            //Assert.IsType<CategoryAdd200Response>(response);
        }

        /// <summary>
        /// Test CategoryAddBatch
        /// </summary>
        [Fact]
        public void CategoryAddBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CategoryAddBatch categoryAddBatch = null;
            //var response = instance.CategoryAddBatch(categoryAddBatch);
            //Assert.IsType<CategoryAddBatch200Response>(response);
        }

        /// <summary>
        /// Test CategoryAssign
        /// </summary>
        [Fact]
        public void CategoryAssignTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string categoryId = null;
            //string productId = null;
            //string? storeId = null;
            //var response = instance.CategoryAssign(categoryId, productId, storeId);
            //Assert.IsType<CartConfigUpdate200Response>(response);
        }

        /// <summary>
        /// Test CategoryCount
        /// </summary>
        [Fact]
        public void CategoryCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? parentId = null;
            //string? storeId = null;
            //string? langId = null;
            //bool? avail = null;
            //string? createdFrom = null;
            //string? createdTo = null;
            //string? modifiedFrom = null;
            //string? modifiedTo = null;
            //string? productType = null;
            //string? findValue = null;
            //string? findWhere = null;
            //string? reportRequestId = null;
            //bool? disableReportCache = null;
            //var response = instance.CategoryCount(parentId, storeId, langId, avail, createdFrom, createdTo, modifiedFrom, modifiedTo, productType, findValue, findWhere, reportRequestId, disableReportCache);
            //Assert.IsType<CategoryCount200Response>(response);
        }

        /// <summary>
        /// Test CategoryDelete
        /// </summary>
        [Fact]
        public void CategoryDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string? storeId = null;
            //var response = instance.CategoryDelete(id, storeId);
            //Assert.IsType<CategoryDelete200Response>(response);
        }

        /// <summary>
        /// Test CategoryFind
        /// </summary>
        [Fact]
        public void CategoryFindTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string findValue = null;
            //string? findWhere = null;
            //string? findParams = null;
            //string? storeId = null;
            //string? langId = null;
            //var response = instance.CategoryFind(findValue, findWhere, findParams, storeId, langId);
            //Assert.IsType<CategoryFind200Response>(response);
        }

        /// <summary>
        /// Test CategoryImageAdd
        /// </summary>
        [Fact]
        public void CategoryImageAddTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string categoryId = null;
            //string imageName = null;
            //string url = null;
            //string type = null;
            //string? storeId = null;
            //string? label = null;
            //string? mime = null;
            //int? position = null;
            //var response = instance.CategoryImageAdd(categoryId, imageName, url, type, storeId, label, mime, position);
            //Assert.IsType<CategoryImageAdd200Response>(response);
        }

        /// <summary>
        /// Test CategoryImageDelete
        /// </summary>
        [Fact]
        public void CategoryImageDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string categoryId = null;
            //string imageId = null;
            //string? storeId = null;
            //var response = instance.CategoryImageDelete(categoryId, imageId, storeId);
            //Assert.IsType<AttributeDelete200Response>(response);
        }

        /// <summary>
        /// Test CategoryInfo
        /// </summary>
        [Fact]
        public void CategoryInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string? storeId = null;
            //string? langId = null;
            //string? schemaType = null;
            //string? responseFields = null;
            //string? varParams = null;
            //string? exclude = null;
            //string? reportRequestId = null;
            //bool? disableReportCache = null;
            //var response = instance.CategoryInfo(id, storeId, langId, schemaType, responseFields, varParams, exclude, reportRequestId, disableReportCache);
            //Assert.IsType<CategoryInfo200Response>(response);
        }

        /// <summary>
        /// Test CategoryList
        /// </summary>
        [Fact]
        public void CategoryListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? start = null;
            //int? count = null;
            //string? pageCursor = null;
            //string? storeId = null;
            //string? langId = null;
            //string? parentId = null;
            //bool? avail = null;
            //string? productType = null;
            //string? createdFrom = null;
            //string? createdTo = null;
            //string? modifiedFrom = null;
            //string? modifiedTo = null;
            //string? findValue = null;
            //string? findWhere = null;
            //string? responseFields = null;
            //string? varParams = null;
            //string? exclude = null;
            //string? reportRequestId = null;
            //bool? disableReportCache = null;
            //bool? disableCache = null;
            //var response = instance.CategoryList(start, count, pageCursor, storeId, langId, parentId, avail, productType, createdFrom, createdTo, modifiedFrom, modifiedTo, findValue, findWhere, responseFields, varParams, exclude, reportRequestId, disableReportCache, disableCache);
            //Assert.IsType<ModelResponseCategoryList>(response);
        }

        /// <summary>
        /// Test CategoryUnassign
        /// </summary>
        [Fact]
        public void CategoryUnassignTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string categoryId = null;
            //string productId = null;
            //string? storeId = null;
            //var response = instance.CategoryUnassign(categoryId, productId, storeId);
            //Assert.IsType<CartConfigUpdate200Response>(response);
        }

        /// <summary>
        /// Test CategoryUpdate
        /// </summary>
        [Fact]
        public void CategoryUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string? name = null;
            //string? description = null;
            //string? shortDescription = null;
            //string? parentId = null;
            //bool? avail = null;
            //int? sortOrder = null;
            //string? modifiedTime = null;
            //string? metaTitle = null;
            //string? metaDescription = null;
            //string? metaKeywords = null;
            //string? seoUrl = null;
            //string? storeId = null;
            //string? storesIds = null;
            //string? langId = null;
            //var response = instance.CategoryUpdate(id, name, description, shortDescription, parentId, avail, sortOrder, modifiedTime, metaTitle, metaDescription, metaKeywords, seoUrl, storeId, storesIds, langId);
            //Assert.IsType<AccountConfigUpdate200Response>(response);
        }
    }
}
