/*
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing BasketApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class BasketApiTests : IDisposable
    {
        private BasketApi instance;

        public BasketApiTests()
        {
            instance = new BasketApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of BasketApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' BasketApi
            //Assert.IsType<BasketApi>(instance);
        }

        /// <summary>
        /// Test BasketInfo
        /// </summary>
        [Fact]
        public void BasketInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string? storeId = null;
            //string? responseFields = null;
            //string? varParams = null;
            //string? exclude = null;
            //var response = instance.BasketInfo(id, storeId, responseFields, varParams, exclude);
            //Assert.IsType<BasketInfo200Response>(response);
        }

        /// <summary>
        /// Test BasketItemAdd
        /// </summary>
        [Fact]
        public void BasketItemAddTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string customerId = null;
            //string productId = null;
            //string? variantId = null;
            //decimal? quantity = null;
            //string? storeId = null;
            //var response = instance.BasketItemAdd(customerId, productId, variantId, quantity, storeId);
            //Assert.IsType<BasketItemAdd200Response>(response);
        }

        /// <summary>
        /// Test BasketLiveShippingServiceCreate
        /// </summary>
        [Fact]
        public void BasketLiveShippingServiceCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string callback = null;
            //string? storeId = null;
            //var response = instance.BasketLiveShippingServiceCreate(name, callback, storeId);
            //Assert.IsType<BasketLiveShippingServiceCreate200Response>(response);
        }

        /// <summary>
        /// Test BasketLiveShippingServiceDelete
        /// </summary>
        [Fact]
        public void BasketLiveShippingServiceDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.BasketLiveShippingServiceDelete(id);
            //Assert.IsType<BasketLiveShippingServiceDelete200Response>(response);
        }

        /// <summary>
        /// Test BasketLiveShippingServiceList
        /// </summary>
        [Fact]
        public void BasketLiveShippingServiceListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? start = null;
            //int? count = null;
            //string? storeId = null;
            //var response = instance.BasketLiveShippingServiceList(start, count, storeId);
            //Assert.IsType<BasketLiveShippingServiceList200Response>(response);
        }
    }
}
