/*
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing ProductApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ProductApiTests : IDisposable
    {
        private ProductApi instance;

        public ProductApiTests()
        {
            instance = new ProductApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ProductApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ProductApi
            //Assert.IsType<ProductApi>(instance);
        }

        /// <summary>
        /// Test ProductAdd
        /// </summary>
        [Fact]
        public void ProductAddTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProductAdd productAdd = null;
            //var response = instance.ProductAdd(productAdd);
            //Assert.IsType<ProductAdd200Response>(response);
        }

        /// <summary>
        /// Test ProductAddBatch
        /// </summary>
        [Fact]
        public void ProductAddBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProductAddBatch productAddBatch = null;
            //var response = instance.ProductAddBatch(productAddBatch);
            //Assert.IsType<CategoryAddBatch200Response>(response);
        }

        /// <summary>
        /// Test ProductAttributeList
        /// </summary>
        [Fact]
        public void ProductAttributeListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string productId = null;
            //int? start = null;
            //int? count = null;
            //string? pageCursor = null;
            //string? attributeId = null;
            //string? variantId = null;
            //string? attributeGroupId = null;
            //string? langId = null;
            //string? storeId = null;
            //string? setName = null;
            //string? sortBy = null;
            //string? sortDirection = null;
            //string? responseFields = null;
            //string? varParams = null;
            //string? exclude = null;
            //var response = instance.ProductAttributeList(productId, start, count, pageCursor, attributeId, variantId, attributeGroupId, langId, storeId, setName, sortBy, sortDirection, responseFields, varParams, exclude);
            //Assert.IsType<ModelResponseProductAttributeList>(response);
        }

        /// <summary>
        /// Test ProductAttributeValueSet
        /// </summary>
        [Fact]
        public void ProductAttributeValueSetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string productId = null;
            //string? attributeId = null;
            //string? attributeGroupId = null;
            //string? attributeName = null;
            //string? value = null;
            //int? valueId = null;
            //string? langId = null;
            //string? storeId = null;
            //var response = instance.ProductAttributeValueSet(productId, attributeId, attributeGroupId, attributeName, value, valueId, langId, storeId);
            //Assert.IsType<ProductAttributeValueSet200Response>(response);
        }

        /// <summary>
        /// Test ProductAttributeValueUnset
        /// </summary>
        [Fact]
        public void ProductAttributeValueUnsetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string productId = null;
            //string attributeId = null;
            //string? storeId = null;
            //bool? includeDefault = null;
            //bool? reindex = null;
            //bool? clearCache = null;
            //var response = instance.ProductAttributeValueUnset(productId, attributeId, storeId, includeDefault, reindex, clearCache);
            //Assert.IsType<ProductAttributeValueUnset200Response>(response);
        }

        /// <summary>
        /// Test ProductBrandList
        /// </summary>
        [Fact]
        public void ProductBrandListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? start = null;
            //int? count = null;
            //string? pageCursor = null;
            //string? brandIds = null;
            //string? categoryId = null;
            //string? parentId = null;
            //string? storeId = null;
            //string? langId = null;
            //string? findWhere = null;
            //string? findValue = null;
            //string? createdFrom = null;
            //string? createdTo = null;
            //string? modifiedFrom = null;
            //string? modifiedTo = null;
            //string? responseFields = null;
            //string? varParams = null;
            //string? exclude = null;
            //var response = instance.ProductBrandList(start, count, pageCursor, brandIds, categoryId, parentId, storeId, langId, findWhere, findValue, createdFrom, createdTo, modifiedFrom, modifiedTo, responseFields, varParams, exclude);
            //Assert.IsType<ModelResponseProductBrandList>(response);
        }

        /// <summary>
        /// Test ProductChildItemFind
        /// </summary>
        [Fact]
        public void ProductChildItemFindTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? findValue = null;
            //string? findWhere = null;
            //string? findParams = null;
            //string? storeId = null;
            //var response = instance.ProductChildItemFind(findValue, findWhere, findParams, storeId);
            //Assert.IsType<ProductChildItemFind200Response>(response);
        }

        /// <summary>
        /// Test ProductChildItemInfo
        /// </summary>
        [Fact]
        public void ProductChildItemInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string productId = null;
            //string id = null;
            //string? storeId = null;
            //string? langId = null;
            //string? currencyId = null;
            //string? responseFields = null;
            //string? varParams = null;
            //string? exclude = null;
            //bool? useLatestApiVersion = null;
            //var response = instance.ProductChildItemInfo(productId, id, storeId, langId, currencyId, responseFields, varParams, exclude, useLatestApiVersion);
            //Assert.IsType<ProductChildItemInfo200Response>(response);
        }

        /// <summary>
        /// Test ProductChildItemList
        /// </summary>
        [Fact]
        public void ProductChildItemListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? start = null;
            //int? count = null;
            //string? pageCursor = null;
            //string? productId = null;
            //string? productIds = null;
            //string? sku = null;
            //string? storeId = null;
            //string? langId = null;
            //string? currencyId = null;
            //bool? availSale = null;
            //string? findValue = null;
            //string? findWhere = null;
            //string? createdFrom = null;
            //string? createdTo = null;
            //string? modifiedFrom = null;
            //string? modifiedTo = null;
            //bool? returnGlobal = null;
            //string? responseFields = null;
            //string? varParams = null;
            //string? exclude = null;
            //string? reportRequestId = null;
            //bool? disableReportCache = null;
            //bool? useLatestApiVersion = null;
            //var response = instance.ProductChildItemList(start, count, pageCursor, productId, productIds, sku, storeId, langId, currencyId, availSale, findValue, findWhere, createdFrom, createdTo, modifiedFrom, modifiedTo, returnGlobal, responseFields, varParams, exclude, reportRequestId, disableReportCache, useLatestApiVersion);
            //Assert.IsType<ModelResponseProductChildItemList>(response);
        }

        /// <summary>
        /// Test ProductCount
        /// </summary>
        [Fact]
        public void ProductCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? productIds = null;
            //string? sinceId = null;
            //string? categoriesIds = null;
            //string? categoryId = null;
            //string? storeId = null;
            //string? langId = null;
            //bool? availView = null;
            //bool? availSale = null;
            //string? createdFrom = null;
            //string? createdTo = null;
            //string? modifiedFrom = null;
            //string? modifiedTo = null;
            //string? brandName = null;
            //List<string>? productAttributes = null;
            //string? status = null;
            //string? type = null;
            //string? visible = null;
            //string? findValue = null;
            //string? findWhere = null;
            //string? reportRequestId = null;
            //bool? returnGlobal = null;
            //bool? disableReportCache = null;
            //bool? useLatestApiVersion = null;
            //var response = instance.ProductCount(productIds, sinceId, categoriesIds, categoryId, storeId, langId, availView, availSale, createdFrom, createdTo, modifiedFrom, modifiedTo, brandName, productAttributes, status, type, visible, findValue, findWhere, reportRequestId, returnGlobal, disableReportCache, useLatestApiVersion);
            //Assert.IsType<ProductCount200Response>(response);
        }

        /// <summary>
        /// Test ProductCurrencyAdd
        /// </summary>
        [Fact]
        public void ProductCurrencyAddTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string iso3 = null;
            //decimal rate = null;
            //string? name = null;
            //bool? avail = null;
            //string? symbolLeft = null;
            //string? symbolRight = null;
            //bool? varDefault = null;
            //var response = instance.ProductCurrencyAdd(iso3, rate, name, avail, symbolLeft, symbolRight, varDefault);
            //Assert.IsType<ProductCurrencyAdd200Response>(response);
        }

        /// <summary>
        /// Test ProductCurrencyList
        /// </summary>
        [Fact]
        public void ProductCurrencyListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? start = null;
            //int? count = null;
            //string? pageCursor = null;
            //bool? varDefault = null;
            //bool? avail = null;
            //string? responseFields = null;
            //string? varParams = null;
            //string? exclude = null;
            //var response = instance.ProductCurrencyList(start, count, pageCursor, varDefault, avail, responseFields, varParams, exclude);
            //Assert.IsType<ModelResponseProductCurrencyList>(response);
        }

        /// <summary>
        /// Test ProductDelete
        /// </summary>
        [Fact]
        public void ProductDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string? storeId = null;
            //var response = instance.ProductDelete(id, storeId);
            //Assert.IsType<CustomerDelete200Response>(response);
        }

        /// <summary>
        /// Test ProductDeleteBatch
        /// </summary>
        [Fact]
        public void ProductDeleteBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProductDeleteBatch productDeleteBatch = null;
            //var response = instance.ProductDeleteBatch(productDeleteBatch);
            //Assert.IsType<CategoryAddBatch200Response>(response);
        }

        /// <summary>
        /// Test ProductFind
        /// </summary>
        [Fact]
        public void ProductFindTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string findValue = null;
            //string? findWhere = null;
            //string? findParams = null;
            //string? findWhat = null;
            //string? langId = null;
            //string? storeId = null;
            //var response = instance.ProductFind(findValue, findWhere, findParams, findWhat, langId, storeId);
            //Assert.IsType<ProductFind200Response>(response);
        }

        /// <summary>
        /// Test ProductImageAdd
        /// </summary>
        [Fact]
        public void ProductImageAddTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProductImageAdd productImageAdd = null;
            //var response = instance.ProductImageAdd(productImageAdd);
            //Assert.IsType<ProductImageAdd200Response>(response);
        }

        /// <summary>
        /// Test ProductImageDelete
        /// </summary>
        [Fact]
        public void ProductImageDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string productId = null;
            //string id = null;
            //string? storeId = null;
            //var response = instance.ProductImageDelete(productId, id, storeId);
            //Assert.IsType<AttributeDelete200Response>(response);
        }

        /// <summary>
        /// Test ProductImageUpdate
        /// </summary>
        [Fact]
        public void ProductImageUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string productId = null;
            //string id = null;
            //string? variantIds = null;
            //string? storeId = null;
            //string? langId = null;
            //string? imageName = null;
            //string? type = null;
            //string? label = null;
            //int? position = null;
            //bool? hidden = null;
            //var response = instance.ProductImageUpdate(productId, id, variantIds, storeId, langId, imageName, type, label, position, hidden);
            //Assert.IsType<ProductImageUpdate200Response>(response);
        }

        /// <summary>
        /// Test ProductInfo
        /// </summary>
        [Fact]
        public void ProductInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string? storeId = null;
            //string? langId = null;
            //string? currencyId = null;
            //string? responseFields = null;
            //string? varParams = null;
            //string? exclude = null;
            //string? reportRequestId = null;
            //bool? disableReportCache = null;
            //bool? useLatestApiVersion = null;
            //var response = instance.ProductInfo(id, storeId, langId, currencyId, responseFields, varParams, exclude, reportRequestId, disableReportCache, useLatestApiVersion);
            //Assert.IsType<ProductInfo200Response>(response);
        }

        /// <summary>
        /// Test ProductList
        /// </summary>
        [Fact]
        public void ProductListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? start = null;
            //int? count = null;
            //string? pageCursor = null;
            //string? productIds = null;
            //string? sinceId = null;
            //string? categoriesIds = null;
            //string? categoryId = null;
            //string? storeId = null;
            //string? langId = null;
            //string? currencyId = null;
            //bool? availView = null;
            //bool? availSale = null;
            //string? createdFrom = null;
            //string? createdTo = null;
            //string? modifiedFrom = null;
            //string? modifiedTo = null;
            //string? sku = null;
            //string? brandName = null;
            //List<string>? productAttributes = null;
            //string? status = null;
            //string? type = null;
            //string? visible = null;
            //string? findValue = null;
            //string? findWhere = null;
            //bool? returnGlobal = null;
            //string? varParams = null;
            //string? responseFields = null;
            //string? exclude = null;
            //string? sortBy = null;
            //string? sortDirection = null;
            //string? reportRequestId = null;
            //bool? disableCache = null;
            //bool? disableReportCache = null;
            //bool? useLatestApiVersion = null;
            //string? productType = null;
            //var response = instance.ProductList(start, count, pageCursor, productIds, sinceId, categoriesIds, categoryId, storeId, langId, currencyId, availView, availSale, createdFrom, createdTo, modifiedFrom, modifiedTo, sku, brandName, productAttributes, status, type, visible, findValue, findWhere, returnGlobal, varParams, responseFields, exclude, sortBy, sortDirection, reportRequestId, disableCache, disableReportCache, useLatestApiVersion, productType);
            //Assert.IsType<ModelResponseProductList>(response);
        }

        /// <summary>
        /// Test ProductManufacturerAdd
        /// </summary>
        [Fact]
        public void ProductManufacturerAddTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string productId = null;
            //string manufacturer = null;
            //string? storeId = null;
            //var response = instance.ProductManufacturerAdd(productId, manufacturer, storeId);
            //Assert.IsType<ProductManufacturerAdd200Response>(response);
        }

        /// <summary>
        /// Test ProductOptionAdd
        /// </summary>
        [Fact]
        public void ProductOptionAddTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProductOptionAdd productOptionAdd = null;
            //var response = instance.ProductOptionAdd(productOptionAdd);
            //Assert.IsType<ProductOptionAdd200Response>(response);
        }

        /// <summary>
        /// Test ProductOptionAssign
        /// </summary>
        [Fact]
        public void ProductOptionAssignTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string productId = null;
            //string optionId = null;
            //bool? required = null;
            //int? sortOrder = null;
            //string? optionValues = null;
            //bool? clearCache = null;
            //var response = instance.ProductOptionAssign(productId, optionId, required, sortOrder, optionValues, clearCache);
            //Assert.IsType<ProductOptionAssign200Response>(response);
        }

        /// <summary>
        /// Test ProductOptionDelete
        /// </summary>
        [Fact]
        public void ProductOptionDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string optionId = null;
            //string productId = null;
            //string? storeId = null;
            //var response = instance.ProductOptionDelete(optionId, productId, storeId);
            //Assert.IsType<AttributeDelete200Response>(response);
        }

        /// <summary>
        /// Test ProductOptionList
        /// </summary>
        [Fact]
        public void ProductOptionListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? start = null;
            //int? count = null;
            //string? productId = null;
            //string? langId = null;
            //string? storeId = null;
            //string? responseFields = null;
            //string? varParams = null;
            //string? exclude = null;
            //var response = instance.ProductOptionList(start, count, productId, langId, storeId, responseFields, varParams, exclude);
            //Assert.IsType<ModelResponseProductOptionList>(response);
        }

        /// <summary>
        /// Test ProductOptionValueAdd
        /// </summary>
        [Fact]
        public void ProductOptionValueAddTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string productId = null;
            //string optionId = null;
            //string? optionValue = null;
            //int? sortOrder = null;
            //string? displayValue = null;
            //bool? isDefault = null;
            //bool? clearCache = null;
            //var response = instance.ProductOptionValueAdd(productId, optionId, optionValue, sortOrder, displayValue, isDefault, clearCache);
            //Assert.IsType<ProductOptionValueAdd200Response>(response);
        }

        /// <summary>
        /// Test ProductOptionValueAssign
        /// </summary>
        [Fact]
        public void ProductOptionValueAssignTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int productOptionId = null;
            //string optionValueId = null;
            //bool? clearCache = null;
            //var response = instance.ProductOptionValueAssign(productOptionId, optionValueId, clearCache);
            //Assert.IsType<ProductOptionValueAssign200Response>(response);
        }

        /// <summary>
        /// Test ProductOptionValueDelete
        /// </summary>
        [Fact]
        public void ProductOptionValueDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string optionId = null;
            //string optionValueId = null;
            //string productId = null;
            //string? storeId = null;
            //var response = instance.ProductOptionValueDelete(optionId, optionValueId, productId, storeId);
            //Assert.IsType<AttributeDelete200Response>(response);
        }

        /// <summary>
        /// Test ProductOptionValueUpdate
        /// </summary>
        [Fact]
        public void ProductOptionValueUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string productId = null;
            //string optionId = null;
            //string optionValueId = null;
            //string? optionValue = null;
            //decimal? price = null;
            //decimal? quantity = null;
            //string? displayValue = null;
            //bool? clearCache = null;
            //var response = instance.ProductOptionValueUpdate(productId, optionId, optionValueId, optionValue, price, quantity, displayValue, clearCache);
            //Assert.IsType<AccountConfigUpdate200Response>(response);
        }

        /// <summary>
        /// Test ProductPriceAdd
        /// </summary>
        [Fact]
        public void ProductPriceAddTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProductPriceAdd productPriceAdd = null;
            //var response = instance.ProductPriceAdd(productPriceAdd);
            //Assert.IsType<CartValidate200Response>(response);
        }

        /// <summary>
        /// Test ProductPriceDelete
        /// </summary>
        [Fact]
        public void ProductPriceDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string productId = null;
            //string? groupPrices = null;
            //string? storeId = null;
            //var response = instance.ProductPriceDelete(productId, groupPrices, storeId);
            //Assert.IsType<AttributeDelete200Response>(response);
        }

        /// <summary>
        /// Test ProductPriceUpdate
        /// </summary>
        [Fact]
        public void ProductPriceUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProductPriceUpdate productPriceUpdate = null;
            //var response = instance.ProductPriceUpdate(productPriceUpdate);
            //Assert.IsType<AccountConfigUpdate200Response>(response);
        }

        /// <summary>
        /// Test ProductReviewList
        /// </summary>
        [Fact]
        public void ProductReviewListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string productId = null;
            //int? start = null;
            //int? count = null;
            //string? pageCursor = null;
            //string? ids = null;
            //string? storeId = null;
            //string? status = null;
            //string? responseFields = null;
            //string? varParams = null;
            //string? exclude = null;
            //var response = instance.ProductReviewList(productId, start, count, pageCursor, ids, storeId, status, responseFields, varParams, exclude);
            //Assert.IsType<ModelResponseProductReviewList>(response);
        }

        /// <summary>
        /// Test ProductStoreAssign
        /// </summary>
        [Fact]
        public void ProductStoreAssignTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string productId = null;
            //string storeId = null;
            //var response = instance.ProductStoreAssign(productId, storeId);
            //Assert.IsType<AccountConfigUpdate200Response>(response);
        }

        /// <summary>
        /// Test ProductTaxAdd
        /// </summary>
        [Fact]
        public void ProductTaxAddTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProductTaxAdd productTaxAdd = null;
            //var response = instance.ProductTaxAdd(productTaxAdd);
            //Assert.IsType<ProductTaxAdd200Response>(response);
        }

        /// <summary>
        /// Test ProductUpdate
        /// </summary>
        [Fact]
        public void ProductUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProductUpdate productUpdate = null;
            //var response = instance.ProductUpdate(productUpdate);
            //Assert.IsType<AccountConfigUpdate200Response>(response);
        }

        /// <summary>
        /// Test ProductUpdateBatch
        /// </summary>
        [Fact]
        public void ProductUpdateBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProductUpdateBatch productUpdateBatch = null;
            //var response = instance.ProductUpdateBatch(productUpdateBatch);
            //Assert.IsType<CategoryAddBatch200Response>(response);
        }

        /// <summary>
        /// Test ProductVariantAdd
        /// </summary>
        [Fact]
        public void ProductVariantAddTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProductVariantAdd productVariantAdd = null;
            //var response = instance.ProductVariantAdd(productVariantAdd);
            //Assert.IsType<ProductVariantAdd200Response>(response);
        }

        /// <summary>
        /// Test ProductVariantAddBatch
        /// </summary>
        [Fact]
        public void ProductVariantAddBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProductVariantAddBatch productVariantAddBatch = null;
            //var response = instance.ProductVariantAddBatch(productVariantAddBatch);
            //Assert.IsType<CategoryAddBatch200Response>(response);
        }

        /// <summary>
        /// Test ProductVariantDelete
        /// </summary>
        [Fact]
        public void ProductVariantDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string productId = null;
            //string? storeId = null;
            //var response = instance.ProductVariantDelete(id, productId, storeId);
            //Assert.IsType<AttributeValueDelete200Response>(response);
        }

        /// <summary>
        /// Test ProductVariantDeleteBatch
        /// </summary>
        [Fact]
        public void ProductVariantDeleteBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProductVariantDeleteBatch productVariantDeleteBatch = null;
            //var response = instance.ProductVariantDeleteBatch(productVariantDeleteBatch);
            //Assert.IsType<CategoryAddBatch200Response>(response);
        }

        /// <summary>
        /// Test ProductVariantImageAdd
        /// </summary>
        [Fact]
        public void ProductVariantImageAddTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProductVariantImageAdd productVariantImageAdd = null;
            //var response = instance.ProductVariantImageAdd(productVariantImageAdd);
            //Assert.IsType<ProductVariantImageAdd200Response>(response);
        }

        /// <summary>
        /// Test ProductVariantImageDelete
        /// </summary>
        [Fact]
        public void ProductVariantImageDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string productId = null;
            //string productVariantId = null;
            //string id = null;
            //string? storeId = null;
            //var response = instance.ProductVariantImageDelete(productId, productVariantId, id, storeId);
            //Assert.IsType<AttributeDelete200Response>(response);
        }

        /// <summary>
        /// Test ProductVariantPriceAdd
        /// </summary>
        [Fact]
        public void ProductVariantPriceAddTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProductVariantPriceAdd productVariantPriceAdd = null;
            //var response = instance.ProductVariantPriceAdd(productVariantPriceAdd);
            //Assert.IsType<CartValidate200Response>(response);
        }

        /// <summary>
        /// Test ProductVariantPriceDelete
        /// </summary>
        [Fact]
        public void ProductVariantPriceDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string productId = null;
            //string groupPrices = null;
            //string? storeId = null;
            //var response = instance.ProductVariantPriceDelete(id, productId, groupPrices, storeId);
            //Assert.IsType<AttributeDelete200Response>(response);
        }

        /// <summary>
        /// Test ProductVariantPriceUpdate
        /// </summary>
        [Fact]
        public void ProductVariantPriceUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProductVariantPriceUpdate productVariantPriceUpdate = null;
            //var response = instance.ProductVariantPriceUpdate(productVariantPriceUpdate);
            //Assert.IsType<AccountConfigUpdate200Response>(response);
        }

        /// <summary>
        /// Test ProductVariantUpdate
        /// </summary>
        [Fact]
        public void ProductVariantUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProductVariantUpdate productVariantUpdate = null;
            //var response = instance.ProductVariantUpdate(productVariantUpdate);
            //Assert.IsType<AccountConfigUpdate200Response>(response);
        }

        /// <summary>
        /// Test ProductVariantUpdateBatch
        /// </summary>
        [Fact]
        public void ProductVariantUpdateBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProductVariantUpdateBatch productVariantUpdateBatch = null;
            //var response = instance.ProductVariantUpdateBatch(productVariantUpdateBatch);
            //Assert.IsType<CategoryAddBatch200Response>(response);
        }
    }
}
