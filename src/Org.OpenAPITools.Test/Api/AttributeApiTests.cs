/*
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing AttributeApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AttributeApiTests : IDisposable
    {
        private AttributeApi instance;

        public AttributeApiTests()
        {
            instance = new AttributeApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of AttributeApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' AttributeApi
            //Assert.IsType<AttributeApi>(instance);
        }

        /// <summary>
        /// Test AttributeAdd
        /// </summary>
        [Fact]
        public void AttributeAddTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string type = null;
            //string name = null;
            //string? code = null;
            //string? storeId = null;
            //string? langId = null;
            //bool? visible = null;
            //bool? required = null;
            //int? position = null;
            //string? attributeGroupId = null;
            //string? isGlobal = null;
            //bool? isSearchable = null;
            //string? isFilterable = null;
            //bool? isComparable = null;
            //bool? isHtmlAllowedOnFront = null;
            //bool? isFilterableInSearch = null;
            //bool? isConfigurable = null;
            //bool? isVisibleInAdvancedSearch = null;
            //bool? isUsedForPromoRules = null;
            //bool? usedInProductListing = null;
            //bool? usedForSortBy = null;
            //string? applyTo = null;
            //var response = instance.AttributeAdd(type, name, code, storeId, langId, visible, required, position, attributeGroupId, isGlobal, isSearchable, isFilterable, isComparable, isHtmlAllowedOnFront, isFilterableInSearch, isConfigurable, isVisibleInAdvancedSearch, isUsedForPromoRules, usedInProductListing, usedForSortBy, applyTo);
            //Assert.IsType<AttributeAdd200Response>(response);
        }

        /// <summary>
        /// Test AttributeAssignGroup
        /// </summary>
        [Fact]
        public void AttributeAssignGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string groupId = null;
            //string? attributeSetId = null;
            //var response = instance.AttributeAssignGroup(id, groupId, attributeSetId);
            //Assert.IsType<AttributeAssignGroup200Response>(response);
        }

        /// <summary>
        /// Test AttributeAssignSet
        /// </summary>
        [Fact]
        public void AttributeAssignSetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string attributeSetId = null;
            //string? groupId = null;
            //var response = instance.AttributeAssignSet(id, attributeSetId, groupId);
            //Assert.IsType<AttributeAssignGroup200Response>(response);
        }

        /// <summary>
        /// Test AttributeAttributesetList
        /// </summary>
        [Fact]
        public void AttributeAttributesetListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? start = null;
            //int? count = null;
            //string? responseFields = null;
            //string? varParams = null;
            //string? exclude = null;
            //var response = instance.AttributeAttributesetList(start, count, responseFields, varParams, exclude);
            //Assert.IsType<ModelResponseAttributeAttributesetList>(response);
        }

        /// <summary>
        /// Test AttributeCount
        /// </summary>
        [Fact]
        public void AttributeCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? type = null;
            //string? attributeSetId = null;
            //string? storeId = null;
            //string? langId = null;
            //bool? visible = null;
            //bool? required = null;
            //bool? varSystem = null;
            //var response = instance.AttributeCount(type, attributeSetId, storeId, langId, visible, required, varSystem);
            //Assert.IsType<AttributeCount200Response>(response);
        }

        /// <summary>
        /// Test AttributeDelete
        /// </summary>
        [Fact]
        public void AttributeDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string? storeId = null;
            //var response = instance.AttributeDelete(id, storeId);
            //Assert.IsType<AttributeDelete200Response>(response);
        }

        /// <summary>
        /// Test AttributeGroupList
        /// </summary>
        [Fact]
        public void AttributeGroupListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? start = null;
            //int? count = null;
            //string? attributeSetId = null;
            //string? langId = null;
            //string? responseFields = null;
            //string? varParams = null;
            //string? exclude = null;
            //var response = instance.AttributeGroupList(start, count, attributeSetId, langId, responseFields, varParams, exclude);
            //Assert.IsType<ModelResponseAttributeGroupList>(response);
        }

        /// <summary>
        /// Test AttributeInfo
        /// </summary>
        [Fact]
        public void AttributeInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string? attributeSetId = null;
            //string? storeId = null;
            //string? langId = null;
            //string? responseFields = null;
            //string? varParams = null;
            //string? exclude = null;
            //var response = instance.AttributeInfo(id, attributeSetId, storeId, langId, responseFields, varParams, exclude);
            //Assert.IsType<AttributeInfo200Response>(response);
        }

        /// <summary>
        /// Test AttributeList
        /// </summary>
        [Fact]
        public void AttributeListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? start = null;
            //int? count = null;
            //string? attributeIds = null;
            //string? attributeSetId = null;
            //string? storeId = null;
            //string? langId = null;
            //string? type = null;
            //bool? visible = null;
            //bool? required = null;
            //bool? varSystem = null;
            //string? responseFields = null;
            //string? varParams = null;
            //string? exclude = null;
            //var response = instance.AttributeList(start, count, attributeIds, attributeSetId, storeId, langId, type, visible, required, varSystem, responseFields, varParams, exclude);
            //Assert.IsType<ModelResponseAttributeList>(response);
        }

        /// <summary>
        /// Test AttributeTypeList
        /// </summary>
        [Fact]
        public void AttributeTypeListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.AttributeTypeList();
            //Assert.IsType<AttributeTypeList200Response>(response);
        }

        /// <summary>
        /// Test AttributeUnassignGroup
        /// </summary>
        [Fact]
        public void AttributeUnassignGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string groupId = null;
            //var response = instance.AttributeUnassignGroup(id, groupId);
            //Assert.IsType<AttributeUnassignGroup200Response>(response);
        }

        /// <summary>
        /// Test AttributeUnassignSet
        /// </summary>
        [Fact]
        public void AttributeUnassignSetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string attributeSetId = null;
            //var response = instance.AttributeUnassignSet(id, attributeSetId);
            //Assert.IsType<AttributeUnassignGroup200Response>(response);
        }

        /// <summary>
        /// Test AttributeUpdate
        /// </summary>
        [Fact]
        public void AttributeUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string name = null;
            //string? storeId = null;
            //string? langId = null;
            //var response = instance.AttributeUpdate(id, name, storeId, langId);
            //Assert.IsType<AttributeUpdate200Response>(response);
        }

        /// <summary>
        /// Test AttributeValueAdd
        /// </summary>
        [Fact]
        public void AttributeValueAddTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string attributeId = null;
            //string name = null;
            //string? code = null;
            //string? description = null;
            //string? storeId = null;
            //string? langId = null;
            //var response = instance.AttributeValueAdd(attributeId, name, code, description, storeId, langId);
            //Assert.IsType<AttributeAdd200Response>(response);
        }

        /// <summary>
        /// Test AttributeValueDelete
        /// </summary>
        [Fact]
        public void AttributeValueDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string attributeId = null;
            //string? storeId = null;
            //var response = instance.AttributeValueDelete(id, attributeId, storeId);
            //Assert.IsType<AttributeValueDelete200Response>(response);
        }

        /// <summary>
        /// Test AttributeValueUpdate
        /// </summary>
        [Fact]
        public void AttributeValueUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string attributeId = null;
            //string? name = null;
            //string? description = null;
            //string? code = null;
            //string? storeId = null;
            //string? langId = null;
            //var response = instance.AttributeValueUpdate(id, attributeId, name, description, code, storeId, langId);
            //Assert.IsType<AttributeUpdate200Response>(response);
        }
    }
}
