/*
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing CartApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class CartApiTests : IDisposable
    {
        private CartApi instance;

        public CartApiTests()
        {
            instance = new CartApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of CartApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' CartApi
            //Assert.IsType<CartApi>(instance);
        }

        /// <summary>
        /// Test CartBridge
        /// </summary>
        [Fact]
        public void CartBridgeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.CartBridge();
            //Assert.IsType<CartBridge200Response>(response);
        }

        /// <summary>
        /// Test CartCatalogPriceRulesCount
        /// </summary>
        [Fact]
        public void CartCatalogPriceRulesCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.CartCatalogPriceRulesCount();
            //Assert.IsType<CartCatalogPriceRulesCount200Response>(response);
        }

        /// <summary>
        /// Test CartCatalogPriceRulesList
        /// </summary>
        [Fact]
        public void CartCatalogPriceRulesListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? start = null;
            //int? count = null;
            //string? pageCursor = null;
            //string? ids = null;
            //string? responseFields = null;
            //string? varParams = null;
            //string? exclude = null;
            //var response = instance.CartCatalogPriceRulesList(start, count, pageCursor, ids, responseFields, varParams, exclude);
            //Assert.IsType<ModelResponseCartCatalogPriceRulesList>(response);
        }

        /// <summary>
        /// Test CartClearCache
        /// </summary>
        [Fact]
        public void CartClearCacheTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string cacheType = null;
            //var response = instance.CartClearCache(cacheType);
            //Assert.IsType<CartClearCache200Response>(response);
        }

        /// <summary>
        /// Test CartConfig
        /// </summary>
        [Fact]
        public void CartConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? varParams = null;
            //string? exclude = null;
            //var response = instance.CartConfig(varParams, exclude);
            //Assert.IsType<CartConfig200Response>(response);
        }

        /// <summary>
        /// Test CartConfigUpdate
        /// </summary>
        [Fact]
        public void CartConfigUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CartConfigUpdate cartConfigUpdate = null;
            //var response = instance.CartConfigUpdate(cartConfigUpdate);
            //Assert.IsType<CartConfigUpdate200Response>(response);
        }

        /// <summary>
        /// Test CartCouponAdd
        /// </summary>
        [Fact]
        public void CartCouponAddTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CartCouponAdd cartCouponAdd = null;
            //var response = instance.CartCouponAdd(cartCouponAdd);
            //Assert.IsType<CartCouponAdd200Response>(response);
        }

        /// <summary>
        /// Test CartCouponConditionAdd
        /// </summary>
        [Fact]
        public void CartCouponConditionAddTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string couponId = null;
            //string entity = null;
            //string key = null;
            //string varOperator = null;
            //string value = null;
            //string? target = null;
            //bool? includeTax = null;
            //bool? includeShipping = null;
            //string? storeId = null;
            //var response = instance.CartCouponConditionAdd(couponId, entity, key, varOperator, value, target, includeTax, includeShipping, storeId);
            //Assert.IsType<BasketLiveShippingServiceDelete200Response>(response);
        }

        /// <summary>
        /// Test CartCouponCount
        /// </summary>
        [Fact]
        public void CartCouponCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? storeId = null;
            //bool? avail = null;
            //string? dateStartFrom = null;
            //string? dateStartTo = null;
            //string? dateEndFrom = null;
            //string? dateEndTo = null;
            //var response = instance.CartCouponCount(storeId, avail, dateStartFrom, dateStartTo, dateEndFrom, dateEndTo);
            //Assert.IsType<CartCouponCount200Response>(response);
        }

        /// <summary>
        /// Test CartCouponDelete
        /// </summary>
        [Fact]
        public void CartCouponDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string? storeId = null;
            //var response = instance.CartCouponDelete(id, storeId);
            //Assert.IsType<AttributeDelete200Response>(response);
        }

        /// <summary>
        /// Test CartCouponList
        /// </summary>
        [Fact]
        public void CartCouponListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? start = null;
            //int? count = null;
            //string? pageCursor = null;
            //string? couponsIds = null;
            //string? storeId = null;
            //string? langId = null;
            //bool? avail = null;
            //string? dateStartFrom = null;
            //string? dateStartTo = null;
            //string? dateEndFrom = null;
            //string? dateEndTo = null;
            //string? responseFields = null;
            //string? varParams = null;
            //string? exclude = null;
            //var response = instance.CartCouponList(start, count, pageCursor, couponsIds, storeId, langId, avail, dateStartFrom, dateStartTo, dateEndFrom, dateEndTo, responseFields, varParams, exclude);
            //Assert.IsType<ModelResponseCartCouponList>(response);
        }

        /// <summary>
        /// Test CartCreate
        /// </summary>
        [Fact]
        public void CartCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CartCreate cartCreate = null;
            //var response = instance.CartCreate(cartCreate);
            //Assert.IsType<AccountCartAdd200Response>(response);
        }

        /// <summary>
        /// Test CartDelete
        /// </summary>
        [Fact]
        public void CartDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? deleteBridge = null;
            //var response = instance.CartDelete(deleteBridge);
            //Assert.IsType<CartDelete200Response>(response);
        }

        /// <summary>
        /// Test CartDisconnect
        /// </summary>
        [Fact]
        public void CartDisconnectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? deleteBridge = null;
            //var response = instance.CartDisconnect(deleteBridge);
            //Assert.IsType<CartDisconnect200Response>(response);
        }

        /// <summary>
        /// Test CartGiftcardAdd
        /// </summary>
        [Fact]
        public void CartGiftcardAddTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal amount = null;
            //string? code = null;
            //string? ownerEmail = null;
            //string? recipientEmail = null;
            //string? recipientName = null;
            //string? ownerName = null;
            //var response = instance.CartGiftcardAdd(amount, code, ownerEmail, recipientEmail, recipientName, ownerName);
            //Assert.IsType<CartGiftcardAdd200Response>(response);
        }

        /// <summary>
        /// Test CartGiftcardCount
        /// </summary>
        [Fact]
        public void CartGiftcardCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? storeId = null;
            //var response = instance.CartGiftcardCount(storeId);
            //Assert.IsType<CartGiftcardCount200Response>(response);
        }

        /// <summary>
        /// Test CartGiftcardDelete
        /// </summary>
        [Fact]
        public void CartGiftcardDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.CartGiftcardDelete(id);
            //Assert.IsType<AttributeDelete200Response>(response);
        }

        /// <summary>
        /// Test CartGiftcardList
        /// </summary>
        [Fact]
        public void CartGiftcardListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? start = null;
            //int? count = null;
            //string? pageCursor = null;
            //string? storeId = null;
            //string? responseFields = null;
            //string? varParams = null;
            //string? exclude = null;
            //var response = instance.CartGiftcardList(start, count, pageCursor, storeId, responseFields, varParams, exclude);
            //Assert.IsType<ModelResponseCartGiftCardList>(response);
        }

        /// <summary>
        /// Test CartInfo
        /// </summary>
        [Fact]
        public void CartInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? storeId = null;
            //string? responseFields = null;
            //string? varParams = null;
            //string? exclude = null;
            //var response = instance.CartInfo(storeId, responseFields, varParams, exclude);
            //Assert.IsType<CartInfo200Response>(response);
        }

        /// <summary>
        /// Test CartList
        /// </summary>
        [Fact]
        public void CartListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.CartList();
            //Assert.IsType<CartList200Response>(response);
        }

        /// <summary>
        /// Test CartMetaDataList
        /// </summary>
        [Fact]
        public void CartMetaDataListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string entityId = null;
            //int? count = null;
            //string? pageCursor = null;
            //string? entity = null;
            //string? storeId = null;
            //string? langId = null;
            //string? key = null;
            //string? responseFields = null;
            //string? varParams = null;
            //string? exclude = null;
            //var response = instance.CartMetaDataList(entityId, count, pageCursor, entity, storeId, langId, key, responseFields, varParams, exclude);
            //Assert.IsType<ModelResponseCartMetaDataList>(response);
        }

        /// <summary>
        /// Test CartMetaDataSet
        /// </summary>
        [Fact]
        public void CartMetaDataSetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string entityId = null;
            //string key = null;
            //string value = null;
            //string varNamespace = null;
            //string? entity = null;
            //string? storeId = null;
            //string? langId = null;
            //var response = instance.CartMetaDataSet(entityId, key, value, varNamespace, entity, storeId, langId);
            //Assert.IsType<AttributeAdd200Response>(response);
        }

        /// <summary>
        /// Test CartMetaDataUnset
        /// </summary>
        [Fact]
        public void CartMetaDataUnsetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string entityId = null;
            //string key = null;
            //string id = null;
            //string? entity = null;
            //string? storeId = null;
            //var response = instance.CartMetaDataUnset(entityId, key, id, entity, storeId);
            //Assert.IsType<BasketLiveShippingServiceDelete200Response>(response);
        }

        /// <summary>
        /// Test CartMethods
        /// </summary>
        [Fact]
        public void CartMethodsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.CartMethods();
            //Assert.IsType<CartMethods200Response>(response);
        }

        /// <summary>
        /// Test CartPluginList
        /// </summary>
        [Fact]
        public void CartPluginListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? start = null;
            //int? count = null;
            //string? storeId = null;
            //var response = instance.CartPluginList(start, count, storeId);
            //Assert.IsType<CartPluginList200Response>(response);
        }

        /// <summary>
        /// Test CartScriptAdd
        /// </summary>
        [Fact]
        public void CartScriptAddTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? name = null;
            //string? description = null;
            //string? html = null;
            //string? src = null;
            //string? loadMethod = null;
            //string? scope = null;
            //string? events = null;
            //string? storeId = null;
            //var response = instance.CartScriptAdd(name, description, html, src, loadMethod, scope, events, storeId);
            //Assert.IsType<CartScriptAdd200Response>(response);
        }

        /// <summary>
        /// Test CartScriptDelete
        /// </summary>
        [Fact]
        public void CartScriptDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string? storeId = null;
            //var response = instance.CartScriptDelete(id, storeId);
            //Assert.IsType<AttributeDelete200Response>(response);
        }

        /// <summary>
        /// Test CartScriptList
        /// </summary>
        [Fact]
        public void CartScriptListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? start = null;
            //int? count = null;
            //string? pageCursor = null;
            //string? scriptIds = null;
            //string? storeId = null;
            //string? createdFrom = null;
            //string? createdTo = null;
            //string? modifiedFrom = null;
            //string? modifiedTo = null;
            //string? responseFields = null;
            //string? varParams = null;
            //string? exclude = null;
            //var response = instance.CartScriptList(start, count, pageCursor, scriptIds, storeId, createdFrom, createdTo, modifiedFrom, modifiedTo, responseFields, varParams, exclude);
            //Assert.IsType<ModelResponseCartScriptList>(response);
        }

        /// <summary>
        /// Test CartShippingZonesList
        /// </summary>
        [Fact]
        public void CartShippingZonesListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? start = null;
            //int? count = null;
            //string? storeId = null;
            //string? responseFields = null;
            //string? varParams = null;
            //string? exclude = null;
            //var response = instance.CartShippingZonesList(start, count, storeId, responseFields, varParams, exclude);
            //Assert.IsType<ModelResponseCartShippingZonesList>(response);
        }

        /// <summary>
        /// Test CartValidate
        /// </summary>
        [Fact]
        public void CartValidateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? validateVersion = null;
            //var response = instance.CartValidate(validateVersion);
            //Assert.IsType<CartValidate200Response>(response);
        }
    }
}
